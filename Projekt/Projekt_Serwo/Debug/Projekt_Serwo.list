
Projekt_Serwo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000921c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08009330  08009330  0000a330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009748  08009748  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009748  08009748  0000a748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009750  08009750  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009750  08009750  0000a750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009754  08009754  0000a754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009758  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200001d4  0800992c  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  0800992c  0000b52c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dfd  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000288c  00000000  00000000  0001cffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001f888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  00020948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019867  00000000  00000000  00021908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d86  00000000  00000000  0003b16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f881  00000000  00000000  0004fef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df776  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059bc  00000000  00000000  000df7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009314 	.word	0x08009314

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08009314 	.word	0x08009314

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d86:	2afd      	cmp	r2, #253	@ 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	@ 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	@ 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	@ 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpun>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010cc:	d102      	bne.n	80010d4 <__aeabi_fcmpun+0x14>
 80010ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d2:	d108      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d8:	d102      	bne.n	80010e0 <__aeabi_fcmpun+0x20>
 80010da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010de:	d102      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0001 	mov.w	r0, #1
 80010ea:	4770      	bx	lr

080010ec <__aeabi_f2iz>:
 80010ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010f4:	d30f      	bcc.n	8001116 <__aeabi_f2iz+0x2a>
 80010f6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010fe:	d90d      	bls.n	800111c <__aeabi_f2iz+0x30>
 8001100:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001104:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001108:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	bf18      	it	ne
 8001112:	4240      	negne	r0, r0
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2iz+0x3a>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d105      	bne.n	8001132 <__aeabi_f2iz+0x46>
 8001126:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800112a:	bf08      	it	eq
 800112c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr

08001138 <__aeabi_f2uiz>:
 8001138:	0042      	lsls	r2, r0, #1
 800113a:	d20e      	bcs.n	800115a <__aeabi_f2uiz+0x22>
 800113c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001140:	d30b      	bcc.n	800115a <__aeabi_f2uiz+0x22>
 8001142:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001146:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114a:	d409      	bmi.n	8001160 <__aeabi_f2uiz+0x28>
 800114c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001150:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001154:	fa23 f002 	lsr.w	r0, r3, r2
 8001158:	4770      	bx	lr
 800115a:	f04f 0000 	mov.w	r0, #0
 800115e:	4770      	bx	lr
 8001160:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001164:	d101      	bne.n	800116a <__aeabi_f2uiz+0x32>
 8001166:	0242      	lsls	r2, r0, #9
 8001168:	d102      	bne.n	8001170 <__aeabi_f2uiz+0x38>
 800116a:	f04f 30ff 	mov.w	r0, #4294967295
 800116e:	4770      	bx	lr
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <__aeabi_d2lz>:
 8001178:	b538      	push	{r3, r4, r5, lr}
 800117a:	2200      	movs	r2, #0
 800117c:	2300      	movs	r3, #0
 800117e:	4604      	mov	r4, r0
 8001180:	460d      	mov	r5, r1
 8001182:	f7ff fc1b 	bl	80009bc <__aeabi_dcmplt>
 8001186:	b928      	cbnz	r0, 8001194 <__aeabi_d2lz+0x1c>
 8001188:	4620      	mov	r0, r4
 800118a:	4629      	mov	r1, r5
 800118c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001190:	f000 b80a 	b.w	80011a8 <__aeabi_d2ulz>
 8001194:	4620      	mov	r0, r4
 8001196:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800119a:	f000 f805 	bl	80011a8 <__aeabi_d2ulz>
 800119e:	4240      	negs	r0, r0
 80011a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a4:	bd38      	pop	{r3, r4, r5, pc}
 80011a6:	bf00      	nop

080011a8 <__aeabi_d2ulz>:
 80011a8:	b5d0      	push	{r4, r6, r7, lr}
 80011aa:	2200      	movs	r2, #0
 80011ac:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <__aeabi_d2ulz+0x34>)
 80011ae:	4606      	mov	r6, r0
 80011b0:	460f      	mov	r7, r1
 80011b2:	f7ff f991 	bl	80004d8 <__aeabi_dmul>
 80011b6:	f7ff fc3f 	bl	8000a38 <__aeabi_d2uiz>
 80011ba:	4604      	mov	r4, r0
 80011bc:	f7ff f912 	bl	80003e4 <__aeabi_ui2d>
 80011c0:	2200      	movs	r2, #0
 80011c2:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <__aeabi_d2ulz+0x38>)
 80011c4:	f7ff f988 	bl	80004d8 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4630      	mov	r0, r6
 80011ce:	4639      	mov	r1, r7
 80011d0:	f7fe ffca 	bl	8000168 <__aeabi_dsub>
 80011d4:	f7ff fc30 	bl	8000a38 <__aeabi_d2uiz>
 80011d8:	4621      	mov	r1, r4
 80011da:	bdd0      	pop	{r4, r6, r7, pc}
 80011dc:	3df00000 	.word	0x3df00000
 80011e0:	41f00000 	.word	0x41f00000

080011e4 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af04      	add	r7, sp, #16
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <BMP280_Read8+0x38>)
 80011f4:	6818      	ldr	r0, [r3, #0]
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	230a      	movs	r3, #10
 80011fc:	9302      	str	r3, [sp, #8]
 80011fe:	2301      	movs	r3, #1
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	f107 030f 	add.w	r3, r7, #15
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	21ec      	movs	r1, #236	@ 0xec
 800120c:	f002 f93a 	bl	8003484 <HAL_I2C_Mem_Read>
  return tmp;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200001f0 	.word	0x200001f0

08001220 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af04      	add	r7, sp, #16
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 800122a:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <BMP280_Read16+0x40>)
 800122c:	6818      	ldr	r0, [r3, #0]
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	b29a      	uxth	r2, r3
 8001232:	230a      	movs	r3, #10
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	2302      	movs	r3, #2
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	21ec      	movs	r1, #236	@ 0xec
 8001244:	f002 f91e 	bl	8003484 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8001248:	7b3b      	ldrb	r3, [r7, #12]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	b21a      	sxth	r2, r3
 800124e:	7b7b      	ldrb	r3, [r7, #13]
 8001250:	b21b      	sxth	r3, r3
 8001252:	4313      	orrs	r3, r2
 8001254:	b21b      	sxth	r3, r3
 8001256:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200001f0 	.word	0x200001f0

08001264 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ffd5 	bl	8001220 <BMP280_Read16>
 8001276:	4603      	mov	r3, r0
 8001278:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800127a:	89fb      	ldrh	r3, [r7, #14]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	b29b      	uxth	r3, r3
 8001280:	b21a      	sxth	r2, r3
 8001282:	89fb      	ldrh	r3, [r7, #14]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21b      	sxth	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b21b      	sxth	r3, r3
 800128c:	b29b      	uxth	r3, r3
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af04      	add	r7, sp, #16
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <BMP280_Write8+0x34>)
 80012aa:	6818      	ldr	r0, [r3, #0]
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	230a      	movs	r3, #10
 80012b2:	9302      	str	r3, [sp, #8]
 80012b4:	2301      	movs	r3, #1
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	1dbb      	adds	r3, r7, #6
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	21ec      	movs	r1, #236	@ 0xec
 80012c0:	f001 ffe6 	bl	8003290 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200001f0 	.word	0x200001f0

080012d0 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af04      	add	r7, sp, #16
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 80012da:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <BMP280_Read24+0x40>)
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	230a      	movs	r3, #10
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2303      	movs	r3, #3
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	21ec      	movs	r1, #236	@ 0xec
 80012f4:	f002 f8c6 	bl	8003484 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 80012f8:	7b3b      	ldrb	r3, [r7, #12]
 80012fa:	041a      	lsls	r2, r3, #16
 80012fc:	7b7b      	ldrb	r3, [r7, #13]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	4313      	orrs	r3, r2
 8001302:	7bba      	ldrb	r2, [r7, #14]
 8001304:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200001f0 	.word	0x200001f0

08001314 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	4608      	mov	r0, r1
 800131e:	4611      	mov	r1, r2
 8001320:	461a      	mov	r2, r3
 8001322:	4603      	mov	r3, r0
 8001324:	70fb      	strb	r3, [r7, #3]
 8001326:	460b      	mov	r3, r1
 8001328:	70bb      	strb	r3, [r7, #2]
 800132a:	4613      	mov	r3, r2
 800132c:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 800132e:	4a48      	ldr	r2, [pc, #288]	@ (8001450 <BMP280_Init+0x13c>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 8001334:	787b      	ldrb	r3, [r7, #1]
 8001336:	2b03      	cmp	r3, #3
 8001338:	d901      	bls.n	800133e <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 800133a:	2303      	movs	r3, #3
 800133c:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 800133e:	4a45      	ldr	r2, [pc, #276]	@ (8001454 <BMP280_Init+0x140>)
 8001340:	787b      	ldrb	r3, [r7, #1]
 8001342:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 800134a:	2300      	movs	r3, #0
 800134c:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	2b05      	cmp	r3, #5
 8001352:	d901      	bls.n	8001358 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001354:	2305      	movs	r3, #5
 8001356:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001358:	4a3f      	ldr	r2, [pc, #252]	@ (8001458 <BMP280_Init+0x144>)
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 800135e:	78bb      	ldrb	r3, [r7, #2]
 8001360:	2b05      	cmp	r3, #5
 8001362:	d901      	bls.n	8001368 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8001364:	2305      	movs	r3, #5
 8001366:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8001368:	4a3c      	ldr	r2, [pc, #240]	@ (800145c <BMP280_Init+0x148>)
 800136a:	78bb      	ldrb	r3, [r7, #2]
 800136c:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 800136e:	bf00      	nop
 8001370:	20d0      	movs	r0, #208	@ 0xd0
 8001372:	f7ff ff37 	bl	80011e4 <BMP280_Read8>
 8001376:	4603      	mov	r3, r0
 8001378:	2b58      	cmp	r3, #88	@ 0x58
 800137a:	d1f9      	bne.n	8001370 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 800137c:	2088      	movs	r0, #136	@ 0x88
 800137e:	f7ff ff71 	bl	8001264 <BMP280_Read16LE>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	4b36      	ldr	r3, [pc, #216]	@ (8001460 <BMP280_Init+0x14c>)
 8001388:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 800138a:	208a      	movs	r0, #138	@ 0x8a
 800138c:	f7ff ff6a 	bl	8001264 <BMP280_Read16LE>
 8001390:	4603      	mov	r3, r0
 8001392:	b21a      	sxth	r2, r3
 8001394:	4b33      	ldr	r3, [pc, #204]	@ (8001464 <BMP280_Init+0x150>)
 8001396:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001398:	208c      	movs	r0, #140	@ 0x8c
 800139a:	f7ff ff63 	bl	8001264 <BMP280_Read16LE>
 800139e:	4603      	mov	r3, r0
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	4b31      	ldr	r3, [pc, #196]	@ (8001468 <BMP280_Init+0x154>)
 80013a4:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80013a6:	208e      	movs	r0, #142	@ 0x8e
 80013a8:	f7ff ff5c 	bl	8001264 <BMP280_Read16LE>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b2e      	ldr	r3, [pc, #184]	@ (800146c <BMP280_Init+0x158>)
 80013b2:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80013b4:	2090      	movs	r0, #144	@ 0x90
 80013b6:	f7ff ff55 	bl	8001264 <BMP280_Read16LE>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b21a      	sxth	r2, r3
 80013be:	4b2c      	ldr	r3, [pc, #176]	@ (8001470 <BMP280_Init+0x15c>)
 80013c0:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80013c2:	2092      	movs	r0, #146	@ 0x92
 80013c4:	f7ff ff4e 	bl	8001264 <BMP280_Read16LE>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b21a      	sxth	r2, r3
 80013cc:	4b29      	ldr	r3, [pc, #164]	@ (8001474 <BMP280_Init+0x160>)
 80013ce:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 80013d0:	2094      	movs	r0, #148	@ 0x94
 80013d2:	f7ff ff47 	bl	8001264 <BMP280_Read16LE>
 80013d6:	4603      	mov	r3, r0
 80013d8:	b21a      	sxth	r2, r3
 80013da:	4b27      	ldr	r3, [pc, #156]	@ (8001478 <BMP280_Init+0x164>)
 80013dc:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 80013de:	2096      	movs	r0, #150	@ 0x96
 80013e0:	f7ff ff40 	bl	8001264 <BMP280_Read16LE>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	4b24      	ldr	r3, [pc, #144]	@ (800147c <BMP280_Init+0x168>)
 80013ea:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 80013ec:	2098      	movs	r0, #152	@ 0x98
 80013ee:	f7ff ff39 	bl	8001264 <BMP280_Read16LE>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	4b22      	ldr	r3, [pc, #136]	@ (8001480 <BMP280_Init+0x16c>)
 80013f8:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 80013fa:	209a      	movs	r0, #154	@ 0x9a
 80013fc:	f7ff ff32 	bl	8001264 <BMP280_Read16LE>
 8001400:	4603      	mov	r3, r0
 8001402:	b21a      	sxth	r2, r3
 8001404:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <BMP280_Init+0x170>)
 8001406:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001408:	209c      	movs	r0, #156	@ 0x9c
 800140a:	f7ff ff2b 	bl	8001264 <BMP280_Read16LE>
 800140e:	4603      	mov	r3, r0
 8001410:	b21a      	sxth	r2, r3
 8001412:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <BMP280_Init+0x174>)
 8001414:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8001416:	209e      	movs	r0, #158	@ 0x9e
 8001418:	f7ff ff24 	bl	8001264 <BMP280_Read16LE>
 800141c:	4603      	mov	r3, r0
 800141e:	b21a      	sxth	r2, r3
 8001420:	4b1a      	ldr	r3, [pc, #104]	@ (800148c <BMP280_Init+0x178>)
 8001422:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	015b      	lsls	r3, r3, #5
 8001428:	b25a      	sxtb	r2, r3
 800142a:	78bb      	ldrb	r3, [r7, #2]
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	b25b      	sxtb	r3, r3
 8001430:	4313      	orrs	r3, r2
 8001432:	b25a      	sxtb	r2, r3
 8001434:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001438:	4313      	orrs	r3, r2
 800143a:	b25b      	sxtb	r3, r3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4619      	mov	r1, r3
 8001440:	20f4      	movs	r0, #244	@ 0xf4
 8001442:	f7ff ff29 	bl	8001298 <BMP280_Write8>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200001f0 	.word	0x200001f0
 8001454:	200001f6 	.word	0x200001f6
 8001458:	200001f4 	.word	0x200001f4
 800145c:	200001f5 	.word	0x200001f5
 8001460:	2000020c 	.word	0x2000020c
 8001464:	200001f8 	.word	0x200001f8
 8001468:	200001fa 	.word	0x200001fa
 800146c:	2000020e 	.word	0x2000020e
 8001470:	200001fc 	.word	0x200001fc
 8001474:	200001fe 	.word	0x200001fe
 8001478:	20000200 	.word	0x20000200
 800147c:	20000202 	.word	0x20000202
 8001480:	20000204 	.word	0x20000204
 8001484:	20000206 	.word	0x20000206
 8001488:	20000208 	.word	0x20000208
 800148c:	2000020a 	.word	0x2000020a

08001490 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8001496:	4b3a      	ldr	r3, [pc, #232]	@ (8001580 <BMP280_ReadTemperature+0xf0>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d16b      	bne.n	8001576 <BMP280_ReadTemperature+0xe6>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800149e:	20f4      	movs	r0, #244	@ 0xf4
 80014a0:	f7ff fea0 	bl	80011e4 <BMP280_Read8>
 80014a4:	4603      	mov	r3, r0
 80014a6:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80014a8:	7dfb      	ldrb	r3, [r7, #23]
 80014aa:	f023 0303 	bic.w	r3, r3, #3
 80014ae:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	4619      	mov	r1, r3
 80014bc:	20f4      	movs	r0, #244	@ 0xf4
 80014be:	f7ff feeb 	bl	8001298 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80014c2:	20f4      	movs	r0, #244	@ 0xf4
 80014c4:	f7ff fe8e 	bl	80011e4 <BMP280_Read8>
 80014c8:	4603      	mov	r3, r0
 80014ca:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80014cc:	7dbb      	ldrb	r3, [r7, #22]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 80014d4:	7dbb      	ldrb	r3, [r7, #22]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d14d      	bne.n	8001576 <BMP280_ReadTemperature+0xe6>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 80014da:	20f4      	movs	r0, #244	@ 0xf4
 80014dc:	f7ff fe82 	bl	80011e4 <BMP280_Read8>
 80014e0:	4603      	mov	r3, r0
 80014e2:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 80014e4:	7dbb      	ldrb	r3, [r7, #22]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 80014ec:	7dbb      	ldrb	r3, [r7, #22]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d000      	beq.n	80014f4 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 80014f2:	e7f2      	b.n	80014da <BMP280_ReadTemperature+0x4a>
				  break;
 80014f4:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 80014f6:	20fa      	movs	r0, #250	@ 0xfa
 80014f8:	f7ff feea 	bl	80012d0 <BMP280_Read24>
 80014fc:	4603      	mov	r3, r0
 80014fe:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	111b      	asrs	r3, r3, #4
 8001504:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	10da      	asrs	r2, r3, #3
 800150a:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <BMP280_ReadTemperature+0xf4>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 8001512:	4a1d      	ldr	r2, [pc, #116]	@ (8001588 <BMP280_ReadTemperature+0xf8>)
 8001514:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001518:	fb02 f303 	mul.w	r3, r2, r3
 800151c:	12db      	asrs	r3, r3, #11
 800151e:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	111b      	asrs	r3, r3, #4
 8001524:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <BMP280_ReadTemperature+0xf4>)
 8001526:	8812      	ldrh	r2, [r2, #0]
 8001528:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	1112      	asrs	r2, r2, #4
 800152e:	4915      	ldr	r1, [pc, #84]	@ (8001584 <BMP280_ReadTemperature+0xf4>)
 8001530:	8809      	ldrh	r1, [r1, #0]
 8001532:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001534:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001538:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 800153a:	4a14      	ldr	r2, [pc, #80]	@ (800158c <BMP280_ReadTemperature+0xfc>)
 800153c:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001540:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001544:	139b      	asrs	r3, r3, #14
 8001546:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	4413      	add	r3, r2
 800154e:	4a10      	ldr	r2, [pc, #64]	@ (8001590 <BMP280_ReadTemperature+0x100>)
 8001550:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <BMP280_ReadTemperature+0x100>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	3380      	adds	r3, #128	@ 0x80
 800155e:	121b      	asrs	r3, r3, #8
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fb93 	bl	8000c8c <__aeabi_i2f>
 8001566:	4603      	mov	r3, r0
 8001568:	607b      	str	r3, [r7, #4]
		  return T/100;
 800156a:	490a      	ldr	r1, [pc, #40]	@ (8001594 <BMP280_ReadTemperature+0x104>)
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fc95 	bl	8000e9c <__aeabi_fdiv>
 8001572:	4603      	mov	r3, r0
 8001574:	e000      	b.n	8001578 <BMP280_ReadTemperature+0xe8>
	  }
  }

  return -99;
 8001576:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <BMP280_ReadTemperature+0x108>)
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200001f6 	.word	0x200001f6
 8001584:	2000020c 	.word	0x2000020c
 8001588:	200001f8 	.word	0x200001f8
 800158c:	200001fa 	.word	0x200001fa
 8001590:	20000210 	.word	0x20000210
 8001594:	42c80000 	.word	0x42c80000
 8001598:	c2c60000 	.word	0xc2c60000

0800159c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <MX_GPIO_Init+0xcc>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a2c      	ldr	r2, [pc, #176]	@ (8001668 <MX_GPIO_Init+0xcc>)
 80015b6:	f043 0310 	orr.w	r3, r3, #16
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <MX_GPIO_Init+0xcc>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0310 	and.w	r3, r3, #16
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c8:	4b27      	ldr	r3, [pc, #156]	@ (8001668 <MX_GPIO_Init+0xcc>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a26      	ldr	r2, [pc, #152]	@ (8001668 <MX_GPIO_Init+0xcc>)
 80015ce:	f043 0320 	orr.w	r3, r3, #32
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b24      	ldr	r3, [pc, #144]	@ (8001668 <MX_GPIO_Init+0xcc>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0320 	and.w	r3, r3, #32
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	4b21      	ldr	r3, [pc, #132]	@ (8001668 <MX_GPIO_Init+0xcc>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a20      	ldr	r2, [pc, #128]	@ (8001668 <MX_GPIO_Init+0xcc>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001668 <MX_GPIO_Init+0xcc>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <MX_GPIO_Init+0xcc>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001668 <MX_GPIO_Init+0xcc>)
 80015fe:	f043 0308 	orr.w	r3, r3, #8
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <MX_GPIO_Init+0xcc>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8001610:	2201      	movs	r2, #1
 8001612:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001616:	4815      	ldr	r0, [pc, #84]	@ (800166c <MX_GPIO_Init+0xd0>)
 8001618:	f001 fcdd 	bl	8002fd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 800161c:	2201      	movs	r2, #1
 800161e:	2120      	movs	r1, #32
 8001620:	4813      	ldr	r0, [pc, #76]	@ (8001670 <MX_GPIO_Init+0xd4>)
 8001622:	f001 fcd8 	bl	8002fd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Led_Pin;
 8001626:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800162a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2302      	movs	r3, #2
 8001636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	4619      	mov	r1, r3
 800163e:	480b      	ldr	r0, [pc, #44]	@ (800166c <MX_GPIO_Init+0xd0>)
 8001640:	f001 fb2e 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS_Pin;
 8001644:	2320      	movs	r3, #32
 8001646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001648:	2311      	movs	r3, #17
 800164a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	4619      	mov	r1, r3
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_GPIO_Init+0xd4>)
 800165c:	f001 fb20 	bl	8002ca0 <HAL_GPIO_Init>

}
 8001660:	bf00      	nop
 8001662:	3720      	adds	r7, #32
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021000 	.word	0x40021000
 800166c:	40011000 	.word	0x40011000
 8001670:	40010c00 	.word	0x40010c00

08001674 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001678:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <MX_I2C1_Init+0x50>)
 800167a:	4a13      	ldr	r2, [pc, #76]	@ (80016c8 <MX_I2C1_Init+0x54>)
 800167c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <MX_I2C1_Init+0x50>)
 8001680:	4a12      	ldr	r2, [pc, #72]	@ (80016cc <MX_I2C1_Init+0x58>)
 8001682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001684:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <MX_I2C1_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <MX_I2C1_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <MX_I2C1_Init+0x50>)
 8001692:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001696:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001698:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <MX_I2C1_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <MX_I2C1_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016a4:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <MX_I2C1_Init+0x50>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <MX_I2C1_Init+0x50>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016b0:	4804      	ldr	r0, [pc, #16]	@ (80016c4 <MX_I2C1_Init+0x50>)
 80016b2:	f001 fca9 	bl	8003008 <HAL_I2C_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016bc:	f000 fd73 	bl	80021a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000214 	.word	0x20000214
 80016c8:	40005400 	.word	0x40005400
 80016cc:	00061a80 	.word	0x00061a80

080016d0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016d4:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <MX_I2C2_Init+0x50>)
 80016d6:	4a13      	ldr	r2, [pc, #76]	@ (8001724 <MX_I2C2_Init+0x54>)
 80016d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016da:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <MX_I2C2_Init+0x50>)
 80016dc:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <MX_I2C2_Init+0x58>)
 80016de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <MX_I2C2_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <MX_I2C2_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <MX_I2C2_Init+0x50>)
 80016ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <MX_I2C2_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <MX_I2C2_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001700:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <MX_I2C2_Init+0x50>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <MX_I2C2_Init+0x50>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800170c:	4804      	ldr	r0, [pc, #16]	@ (8001720 <MX_I2C2_Init+0x50>)
 800170e:	f001 fc7b 	bl	8003008 <HAL_I2C_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001718:	f000 fd45 	bl	80021a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000268 	.word	0x20000268
 8001724:	40005800 	.word	0x40005800
 8001728:	000186a0 	.word	0x000186a0

0800172c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0318 	add.w	r3, r7, #24
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a2b      	ldr	r2, [pc, #172]	@ (80017f4 <HAL_I2C_MspInit+0xc8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d124      	bne.n	8001796 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174c:	4b2a      	ldr	r3, [pc, #168]	@ (80017f8 <HAL_I2C_MspInit+0xcc>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a29      	ldr	r2, [pc, #164]	@ (80017f8 <HAL_I2C_MspInit+0xcc>)
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b27      	ldr	r3, [pc, #156]	@ (80017f8 <HAL_I2C_MspInit+0xcc>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001764:	23c0      	movs	r3, #192	@ 0xc0
 8001766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001768:	2312      	movs	r3, #18
 800176a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001770:	f107 0318 	add.w	r3, r7, #24
 8001774:	4619      	mov	r1, r3
 8001776:	4821      	ldr	r0, [pc, #132]	@ (80017fc <HAL_I2C_MspInit+0xd0>)
 8001778:	f001 fa92 	bl	8002ca0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800177c:	4b1e      	ldr	r3, [pc, #120]	@ (80017f8 <HAL_I2C_MspInit+0xcc>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	4a1d      	ldr	r2, [pc, #116]	@ (80017f8 <HAL_I2C_MspInit+0xcc>)
 8001782:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001786:	61d3      	str	r3, [r2, #28]
 8001788:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <HAL_I2C_MspInit+0xcc>)
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001794:	e029      	b.n	80017ea <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a19      	ldr	r2, [pc, #100]	@ (8001800 <HAL_I2C_MspInit+0xd4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d124      	bne.n	80017ea <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a0:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <HAL_I2C_MspInit+0xcc>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a14      	ldr	r2, [pc, #80]	@ (80017f8 <HAL_I2C_MspInit+0xcc>)
 80017a6:	f043 0308 	orr.w	r3, r3, #8
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_I2C_MspInit+0xcc>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017be:	2312      	movs	r3, #18
 80017c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	f107 0318 	add.w	r3, r7, #24
 80017ca:	4619      	mov	r1, r3
 80017cc:	480b      	ldr	r0, [pc, #44]	@ (80017fc <HAL_I2C_MspInit+0xd0>)
 80017ce:	f001 fa67 	bl	8002ca0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017d2:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <HAL_I2C_MspInit+0xcc>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a08      	ldr	r2, [pc, #32]	@ (80017f8 <HAL_I2C_MspInit+0xcc>)
 80017d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017dc:	61d3      	str	r3, [r2, #28]
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_I2C_MspInit+0xcc>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	@ 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40005400 	.word	0x40005400
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010c00 	.word	0x40010c00
 8001800:	40005800 	.word	0x40005800

08001804 <PID_Init>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */


/*------------------------------------------------PID-----------------------------------------------*/
void PID_Init(PID_Controller *pid, float Kp, float Ki, float Kd, float output_min, float output_max) {
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
    pid->Kp = Kp;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	609a      	str	r2, [r3, #8]

    pid->previous_error = 0.0f;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
    pid->setpoint = 0.0f;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	615a      	str	r2, [r3, #20]

    pid->output_min = output_min;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	619a      	str	r2, [r3, #24]
    pid->output_max = output_max;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	61da      	str	r2, [r3, #28]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
	...

08001854 <PID_Compute>:
float PID_Compute(PID_Controller *pid, float measured_value, float dt) {
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b089      	sub	sp, #36	@ 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
    float error = pid->setpoint - measured_value;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f95a 	bl	8000b20 <__aeabi_fsub>
 800186c:	4603      	mov	r3, r0
 800186e:	61bb      	str	r3, [r7, #24]
    float derivative = (error - pid->previous_error) / dt;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4619      	mov	r1, r3
 8001876:	69b8      	ldr	r0, [r7, #24]
 8001878:	f7ff f952 	bl	8000b20 <__aeabi_fsub>
 800187c:	4603      	mov	r3, r0
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fb0b 	bl	8000e9c <__aeabi_fdiv>
 8001886:	4603      	mov	r3, r0
 8001888:	617b      	str	r3, [r7, #20]
    pid->integral += error * dt;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	691c      	ldr	r4, [r3, #16]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	69b8      	ldr	r0, [r7, #24]
 8001892:	f7ff fa4f 	bl	8000d34 <__aeabi_fmul>
 8001896:	4603      	mov	r3, r0
 8001898:	4619      	mov	r1, r3
 800189a:	4620      	mov	r0, r4
 800189c:	f7ff f942 	bl	8000b24 <__addsf3>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	611a      	str	r2, [r3, #16]
    float output = pid->Kp * error + pid->Ki * pid->integral + pid->Kd * derivative;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	69b9      	ldr	r1, [r7, #24]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fa40 	bl	8000d34 <__aeabi_fmul>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461c      	mov	r4, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	4619      	mov	r1, r3
 80018c2:	4610      	mov	r0, r2
 80018c4:	f7ff fa36 	bl	8000d34 <__aeabi_fmul>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4619      	mov	r1, r3
 80018cc:	4620      	mov	r0, r4
 80018ce:	f7ff f929 	bl	8000b24 <__addsf3>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461c      	mov	r4, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	6979      	ldr	r1, [r7, #20]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fa29 	bl	8000d34 <__aeabi_fmul>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4619      	mov	r1, r3
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff f91c 	bl	8000b24 <__addsf3>
 80018ec:	4603      	mov	r3, r0
 80018ee:	61fb      	str	r3, [r7, #28]

    if(output > pid->output_max){
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	4619      	mov	r1, r3
 80018f6:	69f8      	ldr	r0, [r7, #28]
 80018f8:	f7ff fbd8 	bl	80010ac <__aeabi_fcmpgt>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <PID_Compute+0xb6>
        output = pid->output_max;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	e00b      	b.n	8001922 <PID_Compute+0xce>
    }else if(output < pid->output_min){
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	4619      	mov	r1, r3
 8001910:	69f8      	ldr	r0, [r7, #28]
 8001912:	f7ff fbad 	bl	8001070 <__aeabi_fcmplt>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <PID_Compute+0xce>
        output = pid->output_min;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	61fb      	str	r3, [r7, #28]
    }

    pid->previous_error = error;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	60da      	str	r2, [r3, #12]

    Error = error;
 8001928:	4a05      	ldr	r2, [pc, #20]	@ (8001940 <PID_Compute+0xec>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	6013      	str	r3, [r2, #0]
    OUTPUT = output;
 800192e:	4a05      	ldr	r2, [pc, #20]	@ (8001944 <PID_Compute+0xf0>)
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	6013      	str	r3, [r2, #0]

    return output;
 8001934:	69fb      	ldr	r3, [r7, #28]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	@ 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd90      	pop	{r4, r7, pc}
 800193e:	bf00      	nop
 8001940:	200002d0 	.word	0x200002d0
 8001944:	200002d4 	.word	0x200002d4

08001948 <SetPWM>:
void SetPWM(uint16_t PWM){
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <SetPWM+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	88fa      	ldrh	r2, [r7, #6]
 8001958:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800195a:	2100      	movs	r1, #0
 800195c:	4803      	ldr	r0, [pc, #12]	@ (800196c <SetPWM+0x24>)
 800195e:	f003 f91b 	bl	8004b98 <HAL_TIM_PWM_Start>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000304 	.word	0x20000304

08001970 <Uart_Send_String>:


void Uart_Send_String(char *d){
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)d, strlen(d), 2000);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7fe fbe9 	bl	8000150 <strlen>
 800197e:	4603      	mov	r3, r0
 8001980:	b29a      	uxth	r2, r3
 8001982:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4803      	ldr	r0, [pc, #12]	@ (8001998 <Uart_Send_String+0x28>)
 800198a:	f004 f811 	bl	80059b0 <HAL_UART_Transmit>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000394 	.word	0x20000394

0800199c <Delay_Init>:

uint32_t Delay_Init(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80019a0:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <Delay_Init+0x58>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4a13      	ldr	r2, [pc, #76]	@ (80019f4 <Delay_Init+0x58>)
 80019a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019aa:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80019ac:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <Delay_Init+0x58>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4a10      	ldr	r2, [pc, #64]	@ (80019f4 <Delay_Init+0x58>)
 80019b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019b6:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <Delay_Init+0x5c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0e      	ldr	r2, [pc, #56]	@ (80019f8 <Delay_Init+0x5c>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <Delay_Init+0x5c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0b      	ldr	r2, [pc, #44]	@ (80019f8 <Delay_Init+0x5c>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <Delay_Init+0x5c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80019d6:	bf00      	nop
    __ASM volatile ("NOP");
 80019d8:	bf00      	nop
    __ASM volatile ("NOP");
 80019da:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <Delay_Init+0x5c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80019e4:	2300      	movs	r3, #0
 80019e6:	e000      	b.n	80019ea <Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80019e8:	2301      	movs	r3, #1
    }
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000edf0 	.word	0xe000edf0
 80019f8:	e0001000 	.word	0xe0001000

080019fc <delay_us>:
void delay_us(uint32_t us)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	uint32_t au32_initial_ticks = DWT->CYCCNT;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	@ (8001a44 <delay_us+0x48>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	60fb      	str	r3, [r7, #12]
	uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8001a0a:	f002 ff23 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4a0d      	ldr	r2, [pc, #52]	@ (8001a48 <delay_us+0x4c>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0c9b      	lsrs	r3, r3, #18
 8001a18:	60bb      	str	r3, [r7, #8]
	us *= au32_ticks;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - au32_initial_ticks) < us-au32_ticks);
 8001a24:	bf00      	nop
 8001a26:	4b07      	ldr	r3, [pc, #28]	@ (8001a44 <delay_us+0x48>)
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad2      	subs	r2, r2, r3
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	1acb      	subs	r3, r1, r3
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d3f6      	bcc.n	8001a26 <delay_us+0x2a>
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e0001000 	.word	0xe0001000
 8001a48:	431bde83 	.word	0x431bde83

08001a4c <wire_reset>:
HAL_StatusTypeDef wire_reset(void){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
  int rc;

  DS_GPIO_Port -> ODR &= ~DS_Pin;
 8001a52:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <wire_reset+0x54>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	4a12      	ldr	r2, [pc, #72]	@ (8001aa0 <wire_reset+0x54>)
 8001a58:	f023 0320 	bic.w	r3, r3, #32
 8001a5c:	60d3      	str	r3, [r2, #12]
  delay_us(480);
 8001a5e:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8001a62:	f7ff ffcb 	bl	80019fc <delay_us>
  DS_GPIO_Port -> ODR |= DS_Pin;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa0 <wire_reset+0x54>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa0 <wire_reset+0x54>)
 8001a6c:	f043 0320 	orr.w	r3, r3, #32
 8001a70:	60d3      	str	r3, [r2, #12]
  delay_us(70);
 8001a72:	2046      	movs	r0, #70	@ 0x46
 8001a74:	f7ff ffc2 	bl	80019fc <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 8001a78:	2120      	movs	r1, #32
 8001a7a:	4809      	ldr	r0, [pc, #36]	@ (8001aa0 <wire_reset+0x54>)
 8001a7c:	f001 fa94 	bl	8002fa8 <HAL_GPIO_ReadPin>
 8001a80:	4603      	mov	r3, r0
 8001a82:	607b      	str	r3, [r7, #4]
  delay_us(410);
 8001a84:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8001a88:	f7ff ffb8 	bl	80019fc <delay_us>

  if (rc == 0)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <wire_reset+0x4a>
    return HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e000      	b.n	8001a98 <wire_reset+0x4c>
  else
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40010c00 	.word	0x40010c00

08001aa4 <write_bit>:
void write_bit(int value)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if (value) {
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d012      	beq.n	8001ad8 <write_bit+0x34>
	DS_GPIO_Port -> ODR &= ~DS_Pin;
 8001ab2:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <write_bit+0x60>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	4a13      	ldr	r2, [pc, #76]	@ (8001b04 <write_bit+0x60>)
 8001ab8:	f023 0320 	bic.w	r3, r3, #32
 8001abc:	60d3      	str	r3, [r2, #12]
    delay_us(6);
 8001abe:	2006      	movs	r0, #6
 8001ac0:	f7ff ff9c 	bl	80019fc <delay_us>
    DS_GPIO_Port -> ODR |= DS_Pin;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <write_bit+0x60>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8001b04 <write_bit+0x60>)
 8001aca:	f043 0320 	orr.w	r3, r3, #32
 8001ace:	60d3      	str	r3, [r2, #12]
    delay_us(64);
 8001ad0:	2040      	movs	r0, #64	@ 0x40
 8001ad2:	f7ff ff93 	bl	80019fc <delay_us>
	DS_GPIO_Port -> ODR &= ~DS_Pin;
    delay_us(60);
    DS_GPIO_Port -> ODR |= DS_Pin;
    delay_us(10);
  }
}
 8001ad6:	e011      	b.n	8001afc <write_bit+0x58>
	DS_GPIO_Port -> ODR &= ~DS_Pin;
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <write_bit+0x60>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4a09      	ldr	r2, [pc, #36]	@ (8001b04 <write_bit+0x60>)
 8001ade:	f023 0320 	bic.w	r3, r3, #32
 8001ae2:	60d3      	str	r3, [r2, #12]
    delay_us(60);
 8001ae4:	203c      	movs	r0, #60	@ 0x3c
 8001ae6:	f7ff ff89 	bl	80019fc <delay_us>
    DS_GPIO_Port -> ODR |= DS_Pin;
 8001aea:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <write_bit+0x60>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	4a05      	ldr	r2, [pc, #20]	@ (8001b04 <write_bit+0x60>)
 8001af0:	f043 0320 	orr.w	r3, r3, #32
 8001af4:	60d3      	str	r3, [r2, #12]
    delay_us(10);
 8001af6:	200a      	movs	r0, #10
 8001af8:	f7ff ff80 	bl	80019fc <delay_us>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40010c00 	.word	0x40010c00

08001b08 <read_bit>:
int read_bit(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
  int rc;
  DS_GPIO_Port -> ODR &= ~DS_Pin;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <read_bit+0x48>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	4a0f      	ldr	r2, [pc, #60]	@ (8001b50 <read_bit+0x48>)
 8001b14:	f023 0320 	bic.w	r3, r3, #32
 8001b18:	60d3      	str	r3, [r2, #12]
  delay_us(6);
 8001b1a:	2006      	movs	r0, #6
 8001b1c:	f7ff ff6e 	bl	80019fc <delay_us>
  DS_GPIO_Port -> ODR |= DS_Pin;
 8001b20:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <read_bit+0x48>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <read_bit+0x48>)
 8001b26:	f043 0320 	orr.w	r3, r3, #32
 8001b2a:	60d3      	str	r3, [r2, #12]
  delay_us(9);
 8001b2c:	2009      	movs	r0, #9
 8001b2e:	f7ff ff65 	bl	80019fc <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 8001b32:	2120      	movs	r1, #32
 8001b34:	4806      	ldr	r0, [pc, #24]	@ (8001b50 <read_bit+0x48>)
 8001b36:	f001 fa37 	bl	8002fa8 <HAL_GPIO_ReadPin>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	607b      	str	r3, [r7, #4]
  delay_us(55);
 8001b3e:	2037      	movs	r0, #55	@ 0x37
 8001b40:	f7ff ff5c 	bl	80019fc <delay_us>
  return rc;
 8001b44:	687b      	ldr	r3, [r7, #4]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40010c00 	.word	0x40010c00

08001b54 <wire_write>:
void wire_write(uint8_t byte)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	e00b      	b.n	8001b7c <wire_write+0x28>
    write_bit(byte & 0x01);
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff9a 	bl	8001aa4 <write_bit>
    byte >>= 1;
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	085b      	lsrs	r3, r3, #1
 8001b74:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b07      	cmp	r3, #7
 8001b80:	ddf0      	ble.n	8001b64 <wire_write+0x10>
  }
}
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <wire_read>:
uint8_t wire_read(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	e00e      	b.n	8001bba <wire_read+0x2e>
    value >>= 1;
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	085b      	lsrs	r3, r3, #1
 8001ba0:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 8001ba2:	f7ff ffb1 	bl	8001b08 <read_bit>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <wire_read+0x28>
      value |= 0x80;
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bb2:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	2b07      	cmp	r3, #7
 8001bbe:	dded      	ble.n	8001b9c <wire_read+0x10>
  }
  return value;
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <ReadTemperature>:
    wire_write(0x48); // Kopiowanie Scratchpada do EEPROM
    HAL_Delay(10);    // Krótka przerwa na zapis

    return HAL_OK;
}
float ReadTemperature(void) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
    uint8_t temp_lsb, temp_msb;
    int16_t temp_raw;
    float temperature;

    // Reset i inicjalizacja czujnika
    if (wire_reset() != HAL_OK) {
 8001bd2:	f7ff ff3b 	bl	8001a4c <wire_reset>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <ReadTemperature+0x14>
        return -999.0; // Błąd komunikacji
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c58 <ReadTemperature+0x8c>)
 8001bde:	e037      	b.n	8001c50 <ReadTemperature+0x84>
    }

    // Wybór urządzenia (SKIP ROM - pomijamy adresowanie, zakładając jeden czujnik)
    wire_write(0xCC);
 8001be0:	20cc      	movs	r0, #204	@ 0xcc
 8001be2:	f7ff ffb7 	bl	8001b54 <wire_write>

    // Wydanie polecenia rozpoczęcia konwersji temperatury
    wire_write(0x44);
 8001be6:	2044      	movs	r0, #68	@ 0x44
 8001be8:	f7ff ffb4 	bl	8001b54 <wire_write>

    // Czekanie na zakończenie konwersji (czas max. 750 ms)
    HAL_Delay(100);
 8001bec:	2064      	movs	r0, #100	@ 0x64
 8001bee:	f000 fe73 	bl	80028d8 <HAL_Delay>

    // Reset i ponowne inicjalizowanie do odczytu danych
    if (wire_reset() != HAL_OK) {
 8001bf2:	f7ff ff2b 	bl	8001a4c <wire_reset>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <ReadTemperature+0x34>
        return -999.0; // Błąd komunikacji
 8001bfc:	4b16      	ldr	r3, [pc, #88]	@ (8001c58 <ReadTemperature+0x8c>)
 8001bfe:	e027      	b.n	8001c50 <ReadTemperature+0x84>
    }

    // Wybór urządzenia (SKIP ROM)
    wire_write(0xCC);
 8001c00:	20cc      	movs	r0, #204	@ 0xcc
 8001c02:	f7ff ffa7 	bl	8001b54 <wire_write>

    // Wydanie polecenia odczytu Scratchpad
    wire_write(0xBE);
 8001c06:	20be      	movs	r0, #190	@ 0xbe
 8001c08:	f7ff ffa4 	bl	8001b54 <wire_write>

    // Odczyt dwóch pierwszych bajtów Scratchpad (temp LSB i MSB)
    temp_lsb = wire_read();
 8001c0c:	f7ff ffbe 	bl	8001b8c <wire_read>
 8001c10:	4603      	mov	r3, r0
 8001c12:	71fb      	strb	r3, [r7, #7]
    temp_msb = wire_read();
 8001c14:	f7ff ffba 	bl	8001b8c <wire_read>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	71bb      	strb	r3, [r7, #6]

    // Złożenie surowej wartości temperatury
    temp_raw = (temp_msb << 8) | temp_lsb;
 8001c1c:	79bb      	ldrb	r3, [r7, #6]
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	b21a      	sxth	r2, r3
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	80bb      	strh	r3, [r7, #4]

    // Przekształcenie na wartość temperatury w stopniach Celsjusza
    temperature = temp_raw / 16.0;
 8001c2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fbe8 	bl	8000404 <__aeabi_i2d>
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <ReadTemperature+0x90>)
 8001c3a:	f7fe fd77 	bl	800072c <__aeabi_ddiv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe ff17 	bl	8000a78 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	603b      	str	r3, [r7, #0]

    return temperature;
 8001c4e:	683b      	ldr	r3, [r7, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	c479c000 	.word	0xc479c000
 8001c5c:	40300000 	.word	0x40300000

08001c60 <SendDataToPC>:

void SendDataToPC() {
 8001c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
    int8_t MSB = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	73fb      	strb	r3, [r7, #15]
    uint8_t LSB = 0; // LSB jako uint8_t dla poprawności zakresu
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73bb      	strb	r3, [r7, #14]
    char Buff[10];   // Bufor do konwersji liczb na ciągi znaków

    // Temperaturę wysyłamy jako "<MSB.LSB/"
    MSB = (int8_t)temperature;
 8001c6e:	4b87      	ldr	r3, [pc, #540]	@ (8001e8c <SendDataToPC+0x22c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fa3a 	bl	80010ec <__aeabi_f2iz>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	73fb      	strb	r3, [r7, #15]
    LSB = (uint8_t)((temperature - MSB) * 100.0);
 8001c7c:	4b83      	ldr	r3, [pc, #524]	@ (8001e8c <SendDataToPC+0x22c>)
 8001c7e:	681e      	ldr	r6, [r3, #0]
 8001c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff f801 	bl	8000c8c <__aeabi_i2f>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4630      	mov	r0, r6
 8001c90:	f7fe ff46 	bl	8000b20 <__aeabi_fsub>
 8001c94:	4603      	mov	r3, r0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fbc6 	bl	8000428 <__aeabi_f2d>
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	4b7b      	ldr	r3, [pc, #492]	@ (8001e90 <SendDataToPC+0x230>)
 8001ca2:	f7fe fc19 	bl	80004d8 <__aeabi_dmul>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	f7fe fec3 	bl	8000a38 <__aeabi_d2uiz>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	73bb      	strb	r3, [r7, #14]
    Uart_Send_String("<");
 8001cb6:	4877      	ldr	r0, [pc, #476]	@ (8001e94 <SendDataToPC+0x234>)
 8001cb8:	f7ff fe5a 	bl	8001970 <Uart_Send_String>
    itoa(MSB, Buff, 10);
 8001cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc0:	1d39      	adds	r1, r7, #4
 8001cc2:	220a      	movs	r2, #10
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f004 fca5 	bl	8006614 <itoa>
    Uart_Send_String(Buff);
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fe4f 	bl	8001970 <Uart_Send_String>
    Uart_Send_String(".");
 8001cd2:	4871      	ldr	r0, [pc, #452]	@ (8001e98 <SendDataToPC+0x238>)
 8001cd4:	f7ff fe4c 	bl	8001970 <Uart_Send_String>
    itoa(LSB, Buff, 10);
 8001cd8:	7bbb      	ldrb	r3, [r7, #14]
 8001cda:	1d39      	adds	r1, r7, #4
 8001cdc:	220a      	movs	r2, #10
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 fc98 	bl	8006614 <itoa>
    Uart_Send_String(Buff);
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fe42 	bl	8001970 <Uart_Send_String>
    Uart_Send_String("/");
 8001cec:	486b      	ldr	r0, [pc, #428]	@ (8001e9c <SendDataToPC+0x23c>)
 8001cee:	f7ff fe3f 	bl	8001970 <Uart_Send_String>

    // Błąd (Error)
    MSB = (int8_t)Error;
 8001cf2:	4b6b      	ldr	r3, [pc, #428]	@ (8001ea0 <SendDataToPC+0x240>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f9f8 	bl	80010ec <__aeabi_f2iz>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	73fb      	strb	r3, [r7, #15]
    LSB = (uint8_t)(fabs(Error * 100.0) - abs(MSB * 100)); // fabs dla liczb zmiennoprzecinkowych
 8001d00:	4b67      	ldr	r3, [pc, #412]	@ (8001ea0 <SendDataToPC+0x240>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fb8f 	bl	8000428 <__aeabi_f2d>
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	4b60      	ldr	r3, [pc, #384]	@ (8001e90 <SendDataToPC+0x230>)
 8001d10:	f7fe fbe2 	bl	80004d8 <__aeabi_dmul>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4614      	mov	r4, r2
 8001d1a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d22:	2264      	movs	r2, #100	@ 0x64
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bfb8      	it	lt
 8001d2c:	425b      	neglt	r3, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fb68 	bl	8000404 <__aeabi_i2d>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4620      	mov	r0, r4
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	f7fe fa14 	bl	8000168 <__aeabi_dsub>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	f7fe fe76 	bl	8000a38 <__aeabi_d2uiz>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	73bb      	strb	r3, [r7, #14]
    itoa(MSB, Buff, 10);
 8001d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d54:	1d39      	adds	r1, r7, #4
 8001d56:	220a      	movs	r2, #10
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f004 fc5b 	bl	8006614 <itoa>
    Uart_Send_String(Buff);
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fe05 	bl	8001970 <Uart_Send_String>
    Uart_Send_String(".");
 8001d66:	484c      	ldr	r0, [pc, #304]	@ (8001e98 <SendDataToPC+0x238>)
 8001d68:	f7ff fe02 	bl	8001970 <Uart_Send_String>
    itoa(LSB, Buff, 10);
 8001d6c:	7bbb      	ldrb	r3, [r7, #14]
 8001d6e:	1d39      	adds	r1, r7, #4
 8001d70:	220a      	movs	r2, #10
 8001d72:	4618      	mov	r0, r3
 8001d74:	f004 fc4e 	bl	8006614 <itoa>
    Uart_Send_String(Buff);
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fdf8 	bl	8001970 <Uart_Send_String>
    Uart_Send_String("/");
 8001d80:	4846      	ldr	r0, [pc, #280]	@ (8001e9c <SendDataToPC+0x23c>)
 8001d82:	f7ff fdf5 	bl	8001970 <Uart_Send_String>

    // Setpoint (PID)
    MSB = (int8_t)PID.setpoint;
 8001d86:	4b47      	ldr	r3, [pc, #284]	@ (8001ea4 <SendDataToPC+0x244>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff f9ae 	bl	80010ec <__aeabi_f2iz>
 8001d90:	4603      	mov	r3, r0
 8001d92:	73fb      	strb	r3, [r7, #15]
    LSB = (uint8_t)((PID.setpoint - MSB) * 100.0);
 8001d94:	4b43      	ldr	r3, [pc, #268]	@ (8001ea4 <SendDataToPC+0x244>)
 8001d96:	695c      	ldr	r4, [r3, #20]
 8001d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe ff75 	bl	8000c8c <__aeabi_i2f>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4619      	mov	r1, r3
 8001da6:	4620      	mov	r0, r4
 8001da8:	f7fe feba 	bl	8000b20 <__aeabi_fsub>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fb3a 	bl	8000428 <__aeabi_f2d>
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	4b35      	ldr	r3, [pc, #212]	@ (8001e90 <SendDataToPC+0x230>)
 8001dba:	f7fe fb8d 	bl	80004d8 <__aeabi_dmul>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f7fe fe37 	bl	8000a38 <__aeabi_d2uiz>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	73bb      	strb	r3, [r7, #14]
    itoa(MSB, Buff, 10);
 8001dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd2:	1d39      	adds	r1, r7, #4
 8001dd4:	220a      	movs	r2, #10
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f004 fc1c 	bl	8006614 <itoa>
    Uart_Send_String(Buff);
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fdc6 	bl	8001970 <Uart_Send_String>
    Uart_Send_String(".");
 8001de4:	482c      	ldr	r0, [pc, #176]	@ (8001e98 <SendDataToPC+0x238>)
 8001de6:	f7ff fdc3 	bl	8001970 <Uart_Send_String>
    itoa(LSB, Buff, 10);
 8001dea:	7bbb      	ldrb	r3, [r7, #14]
 8001dec:	1d39      	adds	r1, r7, #4
 8001dee:	220a      	movs	r2, #10
 8001df0:	4618      	mov	r0, r3
 8001df2:	f004 fc0f 	bl	8006614 <itoa>
    Uart_Send_String(Buff);
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fdb9 	bl	8001970 <Uart_Send_String>
    Uart_Send_String("/");
 8001dfe:	4827      	ldr	r0, [pc, #156]	@ (8001e9c <SendDataToPC+0x23c>)
 8001e00:	f7ff fdb6 	bl	8001970 <Uart_Send_String>

    // Temperatura
    MSB = (int8_t)Temperatura;
 8001e04:	4b28      	ldr	r3, [pc, #160]	@ (8001ea8 <SendDataToPC+0x248>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff f96f 	bl	80010ec <__aeabi_f2iz>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	73fb      	strb	r3, [r7, #15]
    LSB = (uint8_t)((Temperatura - MSB) * 100.0);
 8001e12:	4b25      	ldr	r3, [pc, #148]	@ (8001ea8 <SendDataToPC+0x248>)
 8001e14:	681c      	ldr	r4, [r3, #0]
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe ff36 	bl	8000c8c <__aeabi_i2f>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4619      	mov	r1, r3
 8001e24:	4620      	mov	r0, r4
 8001e26:	f7fe fe7b 	bl	8000b20 <__aeabi_fsub>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fafb 	bl	8000428 <__aeabi_f2d>
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <SendDataToPC+0x230>)
 8001e38:	f7fe fb4e 	bl	80004d8 <__aeabi_dmul>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	f7fe fdf8 	bl	8000a38 <__aeabi_d2uiz>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	73bb      	strb	r3, [r7, #14]
    itoa(MSB, Buff, 10);
 8001e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e50:	1d39      	adds	r1, r7, #4
 8001e52:	220a      	movs	r2, #10
 8001e54:	4618      	mov	r0, r3
 8001e56:	f004 fbdd 	bl	8006614 <itoa>
    Uart_Send_String(Buff);
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fd87 	bl	8001970 <Uart_Send_String>
    Uart_Send_String(".");
 8001e62:	480d      	ldr	r0, [pc, #52]	@ (8001e98 <SendDataToPC+0x238>)
 8001e64:	f7ff fd84 	bl	8001970 <Uart_Send_String>
    itoa(LSB, Buff, 10);
 8001e68:	7bbb      	ldrb	r3, [r7, #14]
 8001e6a:	1d39      	adds	r1, r7, #4
 8001e6c:	220a      	movs	r2, #10
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f004 fbd0 	bl	8006614 <itoa>
    Uart_Send_String(Buff);
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fd7a 	bl	8001970 <Uart_Send_String>
    Uart_Send_String(">\r\n");
 8001e7c:	480b      	ldr	r0, [pc, #44]	@ (8001eac <SendDataToPC+0x24c>)
 8001e7e:	f7ff fd77 	bl	8001970 <Uart_Send_String>
}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200002c8 	.word	0x200002c8
 8001e90:	40590000 	.word	0x40590000
 8001e94:	08009330 	.word	0x08009330
 8001e98:	08009334 	.word	0x08009334
 8001e9c:	08009338 	.word	0x08009338
 8001ea0:	200002d0 	.word	0x200002d0
 8001ea4:	200002e0 	.word	0x200002e0
 8001ea8:	200002d8 	.word	0x200002d8
 8001eac:	0800933c 	.word	0x0800933c

08001eb0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a08      	ldr	r2, [pc, #32]	@ (8001edc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d108      	bne.n	8001ed2 <HAL_TIM_PeriodElapsedCallback+0x22>
		iRQ = 1;
 8001ec0:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
		CNT++;
 8001ec6:	4b07      	ldr	r3, [pc, #28]	@ (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ed0:	801a      	strh	r2, [r3, #0]
	}
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	2000034c 	.word	0x2000034c
 8001ee0:	200002dc 	.word	0x200002dc
 8001ee4:	200002ce 	.word	0x200002ce

08001ee8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a41      	ldr	r2, [pc, #260]	@ (8001ff8 <HAL_UART_RxCpltCallback+0x110>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d17a      	bne.n	8001fee <HAL_UART_RxCpltCallback+0x106>
		char *endptr;
		float temp = 0.0;
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]

		if(buffer_index < 10) {
 8001efe:	4b3f      	ldr	r3, [pc, #252]	@ (8001ffc <HAL_UART_RxCpltCallback+0x114>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b09      	cmp	r3, #9
 8001f04:	d80b      	bhi.n	8001f1e <HAL_UART_RxCpltCallback+0x36>
		     RX_Buffer[buffer_index++] = RX_Char;
 8001f06:	4b3d      	ldr	r3, [pc, #244]	@ (8001ffc <HAL_UART_RxCpltCallback+0x114>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	b2d1      	uxtb	r1, r2
 8001f0e:	4a3b      	ldr	r2, [pc, #236]	@ (8001ffc <HAL_UART_RxCpltCallback+0x114>)
 8001f10:	7011      	strb	r1, [r2, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b3a      	ldr	r3, [pc, #232]	@ (8002000 <HAL_UART_RxCpltCallback+0x118>)
 8001f16:	7819      	ldrb	r1, [r3, #0]
 8001f18:	4b3a      	ldr	r3, [pc, #232]	@ (8002004 <HAL_UART_RxCpltCallback+0x11c>)
 8001f1a:	5499      	strb	r1, [r3, r2]
 8001f1c:	e002      	b.n	8001f24 <HAL_UART_RxCpltCallback+0x3c>
		}else{
             buffer_index = 0;
 8001f1e:	4b37      	ldr	r3, [pc, #220]	@ (8001ffc <HAL_UART_RxCpltCallback+0x114>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
		}

		if((RX_Buffer[0] == '<') && (RX_Char == '>')){  //Koniec linii
 8001f24:	4b37      	ldr	r3, [pc, #220]	@ (8002004 <HAL_UART_RxCpltCallback+0x11c>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b3c      	cmp	r3, #60	@ 0x3c
 8001f2a:	d15b      	bne.n	8001fe4 <HAL_UART_RxCpltCallback+0xfc>
 8001f2c:	4b34      	ldr	r3, [pc, #208]	@ (8002000 <HAL_UART_RxCpltCallback+0x118>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b3e      	cmp	r3, #62	@ 0x3e
 8001f32:	d157      	bne.n	8001fe4 <HAL_UART_RxCpltCallback+0xfc>
			if (RX_Buffer[1] == '#') {
 8001f34:	4b33      	ldr	r3, [pc, #204]	@ (8002004 <HAL_UART_RxCpltCallback+0x11c>)
 8001f36:	785b      	ldrb	r3, [r3, #1]
 8001f38:	2b23      	cmp	r3, #35	@ 0x23
 8001f3a:	d10d      	bne.n	8001f58 <HAL_UART_RxCpltCallback+0x70>
			    // KP                                                                         //Kp - <#...>
			    temp = strtof((char*)&RX_Buffer[2], &endptr);
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	4619      	mov	r1, r3
 8001f42:	4831      	ldr	r0, [pc, #196]	@ (8002008 <HAL_UART_RxCpltCallback+0x120>)
 8001f44:	f005 f964 	bl	8007210 <strtof>
 8001f48:	6138      	str	r0, [r7, #16]
			    if (endptr != (char*)&RX_Buffer[2]) {
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4a2e      	ldr	r2, [pc, #184]	@ (8002008 <HAL_UART_RxCpltCallback+0x120>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d002      	beq.n	8001f58 <HAL_UART_RxCpltCallback+0x70>
			        PID.Kp = temp;
 8001f52:	4a2e      	ldr	r2, [pc, #184]	@ (800200c <HAL_UART_RxCpltCallback+0x124>)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	6013      	str	r3, [r2, #0]
			    //Uart_Send_String("KP ustawiono na: ");
			   // Uart_Send_String(Buff);
			   // Uart_Send_String("\r\n");
			}

			if (RX_Buffer[1] == '$') {
 8001f58:	4b2a      	ldr	r3, [pc, #168]	@ (8002004 <HAL_UART_RxCpltCallback+0x11c>)
 8001f5a:	785b      	ldrb	r3, [r3, #1]
 8001f5c:	2b24      	cmp	r3, #36	@ 0x24
 8001f5e:	d10d      	bne.n	8001f7c <HAL_UART_RxCpltCallback+0x94>
			    // KI                                                                         //Ki - <$...>
			    temp = strtof((char*)&RX_Buffer[2], &endptr);
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	4619      	mov	r1, r3
 8001f66:	4828      	ldr	r0, [pc, #160]	@ (8002008 <HAL_UART_RxCpltCallback+0x120>)
 8001f68:	f005 f952 	bl	8007210 <strtof>
 8001f6c:	6138      	str	r0, [r7, #16]
			    if (endptr != (char*)&RX_Buffer[2]) {
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4a25      	ldr	r2, [pc, #148]	@ (8002008 <HAL_UART_RxCpltCallback+0x120>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d002      	beq.n	8001f7c <HAL_UART_RxCpltCallback+0x94>
			        PID.Ki = temp;
 8001f76:	4a25      	ldr	r2, [pc, #148]	@ (800200c <HAL_UART_RxCpltCallback+0x124>)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	6053      	str	r3, [r2, #4]
			 	//Uart_Send_String("KI ustawiono na: ");
			 	//Uart_Send_String(Buff);
			 	//Uart_Send_String("\r\n");
			}

			if (RX_Buffer[1] == '^') {
 8001f7c:	4b21      	ldr	r3, [pc, #132]	@ (8002004 <HAL_UART_RxCpltCallback+0x11c>)
 8001f7e:	785b      	ldrb	r3, [r3, #1]
 8001f80:	2b5e      	cmp	r3, #94	@ 0x5e
 8001f82:	d10d      	bne.n	8001fa0 <HAL_UART_RxCpltCallback+0xb8>
			    // KD                                                                          //Kd - <^...>
			    temp = strtof((char*)&RX_Buffer[2], &endptr);
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	4619      	mov	r1, r3
 8001f8a:	481f      	ldr	r0, [pc, #124]	@ (8002008 <HAL_UART_RxCpltCallback+0x120>)
 8001f8c:	f005 f940 	bl	8007210 <strtof>
 8001f90:	6138      	str	r0, [r7, #16]
			    if (endptr != (char*)&RX_Buffer[2]) {
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4a1c      	ldr	r2, [pc, #112]	@ (8002008 <HAL_UART_RxCpltCallback+0x120>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d002      	beq.n	8001fa0 <HAL_UART_RxCpltCallback+0xb8>
			        PID.Kd = temp;
 8001f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800200c <HAL_UART_RxCpltCallback+0x124>)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	6093      	str	r3, [r2, #8]
			 	//Uart_Send_String("KD ustawiono na: ");
			 	//Uart_Send_String(Buff);
			 	//Uart_Send_String("\r\n");
			}

			if (RX_Buffer[1] == '*') {
 8001fa0:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <HAL_UART_RxCpltCallback+0x11c>)
 8001fa2:	785b      	ldrb	r3, [r3, #1]
 8001fa4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fa6:	d10d      	bne.n	8001fc4 <HAL_UART_RxCpltCallback+0xdc>
			    // Setpoint                                                                //Setpoint - <*...>
			    temp = strtof((char*)&RX_Buffer[2], &endptr);
 8001fa8:	f107 030c 	add.w	r3, r7, #12
 8001fac:	4619      	mov	r1, r3
 8001fae:	4816      	ldr	r0, [pc, #88]	@ (8002008 <HAL_UART_RxCpltCallback+0x120>)
 8001fb0:	f005 f92e 	bl	8007210 <strtof>
 8001fb4:	6138      	str	r0, [r7, #16]
			    if (endptr != (char*)&RX_Buffer[2]) {
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4a13      	ldr	r2, [pc, #76]	@ (8002008 <HAL_UART_RxCpltCallback+0x120>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d002      	beq.n	8001fc4 <HAL_UART_RxCpltCallback+0xdc>
			        PID.setpoint = temp;
 8001fbe:	4a13      	ldr	r2, [pc, #76]	@ (800200c <HAL_UART_RxCpltCallback+0x124>)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	6153      	str	r3, [r2, #20]
			    //utoa((uint16_t)PID.setpoint, Buff, 10);
			 	//Uart_Send_String("Setpoint ustawiono na: ");
			 	//Uart_Send_String(Buff);
			 	//Uart_Send_String("\r\n");
			}
			for(uint8_t i = 0; i < 10; i++){
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	75fb      	strb	r3, [r7, #23]
 8001fc8:	e006      	b.n	8001fd8 <HAL_UART_RxCpltCallback+0xf0>
				RX_Buffer[i] = 0;
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002004 <HAL_UART_RxCpltCallback+0x11c>)
 8001fce:	2100      	movs	r1, #0
 8001fd0:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < 10; i++){
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	75fb      	strb	r3, [r7, #23]
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
 8001fda:	2b09      	cmp	r3, #9
 8001fdc:	d9f5      	bls.n	8001fca <HAL_UART_RxCpltCallback+0xe2>
			}
			buffer_index = 0;
 8001fde:	4b07      	ldr	r3, [pc, #28]	@ (8001ffc <HAL_UART_RxCpltCallback+0x114>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &RX_Char, 1);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4906      	ldr	r1, [pc, #24]	@ (8002000 <HAL_UART_RxCpltCallback+0x118>)
 8001fe8:	4803      	ldr	r0, [pc, #12]	@ (8001ff8 <HAL_UART_RxCpltCallback+0x110>)
 8001fea:	f003 fd6c 	bl	8005ac6 <HAL_UART_Receive_IT>
	}
}
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000394 	.word	0x20000394
 8001ffc:	200002c7 	.word	0x200002c7
 8002000:	200002c6 	.word	0x200002c6
 8002004:	200002bc 	.word	0x200002bc
 8002008:	200002be 	.word	0x200002be
 800200c:	200002e0 	.word	0x200002e0

08002010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002016:	f000 fbfd 	bl	8002814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800201a:	f000 f87f 	bl	800211c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800201e:	f7ff fabd 	bl	800159c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002022:	f7ff fb27 	bl	8001674 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002026:	f000 fb51 	bl	80026cc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800202a:	f000 f9fd 	bl	8002428 <MX_TIM2_Init>
  MX_TIM3_Init();
 800202e:	f000 fa71 	bl	8002514 <MX_TIM3_Init>
  MX_I2C2_Init();
 8002032:	f7ff fb4d 	bl	80016d0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8002036:	4829      	ldr	r0, [pc, #164]	@ (80020dc <main+0xcc>)
 8002038:	f002 fcac 	bl	8004994 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &RX_Char, 1);
 800203c:	2201      	movs	r2, #1
 800203e:	4928      	ldr	r1, [pc, #160]	@ (80020e0 <main+0xd0>)
 8002040:	4828      	ldr	r0, [pc, #160]	@ (80020e4 <main+0xd4>)
 8002042:	f003 fd40 	bl	8005ac6 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8002046:	4828      	ldr	r0, [pc, #160]	@ (80020e8 <main+0xd8>)
 8002048:	f002 fca4 	bl	8004994 <HAL_TIM_Base_Start_IT>


  Delay_Init();
 800204c:	f7ff fca6 	bl	800199c <Delay_Init>
  PID_Init(&PID, 27.0, 0.9, 4.5, 0, 999);  //55.8, 0.05, 7.5
 8002050:	4b26      	ldr	r3, [pc, #152]	@ (80020ec <main+0xdc>)
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	4b25      	ldr	r3, [pc, #148]	@ (80020f0 <main+0xe0>)
 800205c:	4a25      	ldr	r2, [pc, #148]	@ (80020f4 <main+0xe4>)
 800205e:	4926      	ldr	r1, [pc, #152]	@ (80020f8 <main+0xe8>)
 8002060:	4826      	ldr	r0, [pc, #152]	@ (80020fc <main+0xec>)
 8002062:	f7ff fbcf 	bl	8001804 <PID_Init>
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8002066:	2301      	movs	r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	2101      	movs	r1, #1
 800206c:	4824      	ldr	r0, [pc, #144]	@ (8002100 <main+0xf0>)
 800206e:	f7ff f951 	bl	8001314 <BMP280_Init>
  PID.setpoint = 0.0;
 8002072:	4b22      	ldr	r3, [pc, #136]	@ (80020fc <main+0xec>)
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	615a      	str	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(iRQ == 1){
 800207a:	4b22      	ldr	r3, [pc, #136]	@ (8002104 <main+0xf4>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b01      	cmp	r3, #1
 8002082:	d11b      	bne.n	80020bc <main+0xac>
		temperature = BMP280_ReadTemperature();
 8002084:	f7ff fa04 	bl	8001490 <BMP280_ReadTemperature>
 8002088:	4603      	mov	r3, r0
 800208a:	4a1f      	ldr	r2, [pc, #124]	@ (8002108 <main+0xf8>)
 800208c:	6013      	str	r3, [r2, #0]
		Output = PID_Compute(&PID, temperature, 0.02);
 800208e:	4b1e      	ldr	r3, [pc, #120]	@ (8002108 <main+0xf8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1e      	ldr	r2, [pc, #120]	@ (800210c <main+0xfc>)
 8002094:	4619      	mov	r1, r3
 8002096:	4819      	ldr	r0, [pc, #100]	@ (80020fc <main+0xec>)
 8002098:	f7ff fbdc 	bl	8001854 <PID_Compute>
 800209c:	4603      	mov	r3, r0
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f84a 	bl	8001138 <__aeabi_f2uiz>
 80020a4:	4603      	mov	r3, r0
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	4b19      	ldr	r3, [pc, #100]	@ (8002110 <main+0x100>)
 80020aa:	801a      	strh	r2, [r3, #0]
		SetPWM(Output);
 80020ac:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <main+0x100>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fc49 	bl	8001948 <SetPWM>
		//Temperatura = ReadTemperature();
        iRQ = 0;
 80020b6:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <main+0xf4>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
	}

	if(CNT == 3){
 80020bc:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <main+0x104>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d1da      	bne.n	800207a <main+0x6a>
		Temperatura = ReadTemperature();
 80020c4:	f7ff fd82 	bl	8001bcc <ReadTemperature>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4a13      	ldr	r2, [pc, #76]	@ (8002118 <main+0x108>)
 80020cc:	6013      	str	r3, [r2, #0]
		SendDataToPC();
 80020ce:	f7ff fdc7 	bl	8001c60 <SendDataToPC>
		CNT = 0;
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <main+0x104>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	801a      	strh	r2, [r3, #0]
	if(iRQ == 1){
 80020d8:	e7cf      	b.n	800207a <main+0x6a>
 80020da:	bf00      	nop
 80020dc:	20000304 	.word	0x20000304
 80020e0:	200002c6 	.word	0x200002c6
 80020e4:	20000394 	.word	0x20000394
 80020e8:	2000034c 	.word	0x2000034c
 80020ec:	4479c000 	.word	0x4479c000
 80020f0:	40900000 	.word	0x40900000
 80020f4:	3f666666 	.word	0x3f666666
 80020f8:	41d80000 	.word	0x41d80000
 80020fc:	200002e0 	.word	0x200002e0
 8002100:	20000214 	.word	0x20000214
 8002104:	200002dc 	.word	0x200002dc
 8002108:	200002c8 	.word	0x200002c8
 800210c:	3ca3d70a 	.word	0x3ca3d70a
 8002110:	200002cc 	.word	0x200002cc
 8002114:	200002ce 	.word	0x200002ce
 8002118:	200002d8 	.word	0x200002d8

0800211c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b090      	sub	sp, #64	@ 0x40
 8002120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002122:	f107 0318 	add.w	r3, r7, #24
 8002126:	2228      	movs	r2, #40	@ 0x28
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f005 fa0f 	bl	800754e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800213e:	2301      	movs	r3, #1
 8002140:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002142:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002146:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002148:	2300      	movs	r3, #0
 800214a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800214c:	2301      	movs	r3, #1
 800214e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002150:	2302      	movs	r3, #2
 8002152:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002154:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002158:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800215a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800215e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002160:	f107 0318 	add.w	r3, r7, #24
 8002164:	4618      	mov	r0, r3
 8002166:	f001 ffb5 	bl	80040d4 <HAL_RCC_OscConfig>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002170:	f000 f819 	bl	80021a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002174:	230f      	movs	r3, #15
 8002176:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002178:	2302      	movs	r3, #2
 800217a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002180:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002184:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	2102      	movs	r1, #2
 800218e:	4618      	mov	r0, r3
 8002190:	f002 fa22 	bl	80045d8 <HAL_RCC_ClockConfig>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800219a:	f000 f804 	bl	80021a6 <Error_Handler>
  }
}
 800219e:	bf00      	nop
 80021a0:	3740      	adds	r7, #64	@ 0x40
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021aa:	b672      	cpsid	i
}
 80021ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021ae:	bf00      	nop
 80021b0:	e7fd      	b.n	80021ae <Error_Handler+0x8>
	...

080021b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021ba:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <HAL_MspInit+0x5c>)
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	4a14      	ldr	r2, [pc, #80]	@ (8002210 <HAL_MspInit+0x5c>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6193      	str	r3, [r2, #24]
 80021c6:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <HAL_MspInit+0x5c>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002210 <HAL_MspInit+0x5c>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002210 <HAL_MspInit+0x5c>)
 80021d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021dc:	61d3      	str	r3, [r2, #28]
 80021de:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <HAL_MspInit+0x5c>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <HAL_MspInit+0x60>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <HAL_MspInit+0x60>)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr
 8002210:	40021000 	.word	0x40021000
 8002214:	40010000 	.word	0x40010000

08002218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <NMI_Handler+0x4>

08002220 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <MemManage_Handler+0x4>

08002230 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <BusFault_Handler+0x4>

08002238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <UsageFault_Handler+0x4>

08002240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002268:	f000 fb1a 	bl	80028a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}

08002270 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <TIM3_IRQHandler+0x10>)
 8002276:	f002 fd31 	bl	8004cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000034c 	.word	0x2000034c

08002284 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002288:	4802      	ldr	r0, [pc, #8]	@ (8002294 <USART1_IRQHandler+0x10>)
 800228a:	f003 fc41 	bl	8005b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000394 	.word	0x20000394

08002298 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return 1;
 800229c:	2301      	movs	r3, #1
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <_kill>:

int _kill(int pid, int sig)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022b0:	f005 f9ae 	bl	8007610 <__errno>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2216      	movs	r2, #22
 80022b8:	601a      	str	r2, [r3, #0]
  return -1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_exit>:

void _exit (int status)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022ce:	f04f 31ff 	mov.w	r1, #4294967295
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffe7 	bl	80022a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <_exit+0x12>

080022dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	e00a      	b.n	8002304 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022ee:	f3af 8000 	nop.w
 80022f2:	4601      	mov	r1, r0
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	60ba      	str	r2, [r7, #8]
 80022fa:	b2ca      	uxtb	r2, r1
 80022fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3301      	adds	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	dbf0      	blt.n	80022ee <_read+0x12>
  }

  return len;
 800230c:	687b      	ldr	r3, [r7, #4]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	e009      	b.n	800233c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	60ba      	str	r2, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3301      	adds	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	429a      	cmp	r2, r3
 8002342:	dbf1      	blt.n	8002328 <_write+0x12>
  }
  return len;
 8002344:	687b      	ldr	r3, [r7, #4]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <_close>:

int _close(int file)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002374:	605a      	str	r2, [r3, #4]
  return 0;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr

08002382 <_isatty>:

int _isatty(int file)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800238a:	2301      	movs	r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002396:	b480      	push	{r7}
 8002398:	b085      	sub	sp, #20
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
	...

080023b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b8:	4a14      	ldr	r2, [pc, #80]	@ (800240c <_sbrk+0x5c>)
 80023ba:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <_sbrk+0x60>)
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c4:	4b13      	ldr	r3, [pc, #76]	@ (8002414 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023cc:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <_sbrk+0x64>)
 80023ce:	4a12      	ldr	r2, [pc, #72]	@ (8002418 <_sbrk+0x68>)
 80023d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023d2:	4b10      	ldr	r3, [pc, #64]	@ (8002414 <_sbrk+0x64>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d207      	bcs.n	80023f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e0:	f005 f916 	bl	8007610 <__errno>
 80023e4:	4603      	mov	r3, r0
 80023e6:	220c      	movs	r2, #12
 80023e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
 80023ee:	e009      	b.n	8002404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f0:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023f6:	4b07      	ldr	r3, [pc, #28]	@ (8002414 <_sbrk+0x64>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	4a05      	ldr	r2, [pc, #20]	@ (8002414 <_sbrk+0x64>)
 8002400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20005000 	.word	0x20005000
 8002410:	00000400 	.word	0x00000400
 8002414:	20000300 	.word	0x20000300
 8002418:	20000530 	.word	0x20000530

0800241c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08e      	sub	sp, #56	@ 0x38
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800242e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800243c:	f107 0320 	add.w	r3, r7, #32
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
 8002454:	615a      	str	r2, [r3, #20]
 8002456:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002458:	4b2d      	ldr	r3, [pc, #180]	@ (8002510 <MX_TIM2_Init+0xe8>)
 800245a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800245e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1439;
 8002460:	4b2b      	ldr	r3, [pc, #172]	@ (8002510 <MX_TIM2_Init+0xe8>)
 8002462:	f240 529f 	movw	r2, #1439	@ 0x59f
 8002466:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002468:	4b29      	ldr	r3, [pc, #164]	@ (8002510 <MX_TIM2_Init+0xe8>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800246e:	4b28      	ldr	r3, [pc, #160]	@ (8002510 <MX_TIM2_Init+0xe8>)
 8002470:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002474:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002476:	4b26      	ldr	r3, [pc, #152]	@ (8002510 <MX_TIM2_Init+0xe8>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247c:	4b24      	ldr	r3, [pc, #144]	@ (8002510 <MX_TIM2_Init+0xe8>)
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002482:	4823      	ldr	r0, [pc, #140]	@ (8002510 <MX_TIM2_Init+0xe8>)
 8002484:	f002 fa36 	bl	80048f4 <HAL_TIM_Base_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800248e:	f7ff fe8a 	bl	80021a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002492:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002496:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002498:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800249c:	4619      	mov	r1, r3
 800249e:	481c      	ldr	r0, [pc, #112]	@ (8002510 <MX_TIM2_Init+0xe8>)
 80024a0:	f002 fe2a 	bl	80050f8 <HAL_TIM_ConfigClockSource>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80024aa:	f7ff fe7c 	bl	80021a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024ae:	4818      	ldr	r0, [pc, #96]	@ (8002510 <MX_TIM2_Init+0xe8>)
 80024b0:	f002 fb1a 	bl	8004ae8 <HAL_TIM_PWM_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80024ba:	f7ff fe74 	bl	80021a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024c6:	f107 0320 	add.w	r3, r7, #32
 80024ca:	4619      	mov	r1, r3
 80024cc:	4810      	ldr	r0, [pc, #64]	@ (8002510 <MX_TIM2_Init+0xe8>)
 80024ce:	f003 f9af 	bl	8005830 <HAL_TIMEx_MasterConfigSynchronization>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80024d8:	f7ff fe65 	bl	80021a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80024dc:	2370      	movs	r3, #112	@ 0x70
 80024de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	2200      	movs	r2, #0
 80024f0:	4619      	mov	r1, r3
 80024f2:	4807      	ldr	r0, [pc, #28]	@ (8002510 <MX_TIM2_Init+0xe8>)
 80024f4:	f002 fd3e 	bl	8004f74 <HAL_TIM_PWM_ConfigChannel>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80024fe:	f7ff fe52 	bl	80021a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002502:	4803      	ldr	r0, [pc, #12]	@ (8002510 <MX_TIM2_Init+0xe8>)
 8002504:	f000 f8b2 	bl	800266c <HAL_TIM_MspPostInit>

}
 8002508:	bf00      	nop
 800250a:	3738      	adds	r7, #56	@ 0x38
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000304 	.word	0x20000304

08002514 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08e      	sub	sp, #56	@ 0x38
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002528:	f107 0320 	add.w	r3, r7, #32
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
 8002540:	615a      	str	r2, [r3, #20]
 8002542:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002544:	4b2b      	ldr	r3, [pc, #172]	@ (80025f4 <MX_TIM3_Init+0xe0>)
 8002546:	4a2c      	ldr	r2, [pc, #176]	@ (80025f8 <MX_TIM3_Init+0xe4>)
 8002548:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1439;
 800254a:	4b2a      	ldr	r3, [pc, #168]	@ (80025f4 <MX_TIM3_Init+0xe0>)
 800254c:	f240 529f 	movw	r2, #1439	@ 0x59f
 8002550:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002552:	4b28      	ldr	r3, [pc, #160]	@ (80025f4 <MX_TIM3_Init+0xe0>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002558:	4b26      	ldr	r3, [pc, #152]	@ (80025f4 <MX_TIM3_Init+0xe0>)
 800255a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800255e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002560:	4b24      	ldr	r3, [pc, #144]	@ (80025f4 <MX_TIM3_Init+0xe0>)
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002566:	4b23      	ldr	r3, [pc, #140]	@ (80025f4 <MX_TIM3_Init+0xe0>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800256c:	4821      	ldr	r0, [pc, #132]	@ (80025f4 <MX_TIM3_Init+0xe0>)
 800256e:	f002 f9c1 	bl	80048f4 <HAL_TIM_Base_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002578:	f7ff fe15 	bl	80021a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800257c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002580:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002582:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002586:	4619      	mov	r1, r3
 8002588:	481a      	ldr	r0, [pc, #104]	@ (80025f4 <MX_TIM3_Init+0xe0>)
 800258a:	f002 fdb5 	bl	80050f8 <HAL_TIM_ConfigClockSource>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002594:	f7ff fe07 	bl	80021a6 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002598:	4816      	ldr	r0, [pc, #88]	@ (80025f4 <MX_TIM3_Init+0xe0>)
 800259a:	f002 fa4d 	bl	8004a38 <HAL_TIM_OC_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80025a4:	f7ff fdff 	bl	80021a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a8:	2300      	movs	r3, #0
 80025aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025b0:	f107 0320 	add.w	r3, r7, #32
 80025b4:	4619      	mov	r1, r3
 80025b6:	480f      	ldr	r0, [pc, #60]	@ (80025f4 <MX_TIM3_Init+0xe0>)
 80025b8:	f003 f93a 	bl	8005830 <HAL_TIMEx_MasterConfigSynchronization>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80025c2:	f7ff fdf0 	bl	80021a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	2200      	movs	r2, #0
 80025da:	4619      	mov	r1, r3
 80025dc:	4805      	ldr	r0, [pc, #20]	@ (80025f4 <MX_TIM3_Init+0xe0>)
 80025de:	f002 fc6d 	bl	8004ebc <HAL_TIM_OC_ConfigChannel>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80025e8:	f7ff fddd 	bl	80021a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025ec:	bf00      	nop
 80025ee:	3738      	adds	r7, #56	@ 0x38
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	2000034c 	.word	0x2000034c
 80025f8:	40000400 	.word	0x40000400

080025fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800260c:	d10c      	bne.n	8002628 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800260e:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <HAL_TIM_Base_MspInit+0x68>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	4a14      	ldr	r2, [pc, #80]	@ (8002664 <HAL_TIM_Base_MspInit+0x68>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	61d3      	str	r3, [r2, #28]
 800261a:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <HAL_TIM_Base_MspInit+0x68>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002626:	e018      	b.n	800265a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0e      	ldr	r2, [pc, #56]	@ (8002668 <HAL_TIM_Base_MspInit+0x6c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d113      	bne.n	800265a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002632:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <HAL_TIM_Base_MspInit+0x68>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	4a0b      	ldr	r2, [pc, #44]	@ (8002664 <HAL_TIM_Base_MspInit+0x68>)
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	61d3      	str	r3, [r2, #28]
 800263e:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <HAL_TIM_Base_MspInit+0x68>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2103      	movs	r1, #3
 800264e:	201d      	movs	r0, #29
 8002650:	f000 fa3d 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002654:	201d      	movs	r0, #29
 8002656:	f000 fa56 	bl	8002b06 <HAL_NVIC_EnableIRQ>
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	40000400 	.word	0x40000400

0800266c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 0310 	add.w	r3, r7, #16
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800268a:	d117      	bne.n	80026bc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268c:	4b0d      	ldr	r3, [pc, #52]	@ (80026c4 <HAL_TIM_MspPostInit+0x58>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	4a0c      	ldr	r2, [pc, #48]	@ (80026c4 <HAL_TIM_MspPostInit+0x58>)
 8002692:	f043 0304 	orr.w	r3, r3, #4
 8002696:	6193      	str	r3, [r2, #24]
 8002698:	4b0a      	ldr	r3, [pc, #40]	@ (80026c4 <HAL_TIM_MspPostInit+0x58>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026a4:	2301      	movs	r3, #1
 80026a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2302      	movs	r3, #2
 80026ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	f107 0310 	add.w	r3, r7, #16
 80026b4:	4619      	mov	r1, r3
 80026b6:	4804      	ldr	r0, [pc, #16]	@ (80026c8 <HAL_TIM_MspPostInit+0x5c>)
 80026b8:	f000 faf2 	bl	8002ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80026bc:	bf00      	nop
 80026be:	3720      	adds	r7, #32
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40010800 	.word	0x40010800

080026cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026d0:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <MX_USART1_UART_Init+0x4c>)
 80026d2:	4a12      	ldr	r2, [pc, #72]	@ (800271c <MX_USART1_UART_Init+0x50>)
 80026d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026d6:	4b10      	ldr	r3, [pc, #64]	@ (8002718 <MX_USART1_UART_Init+0x4c>)
 80026d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026de:	4b0e      	ldr	r3, [pc, #56]	@ (8002718 <MX_USART1_UART_Init+0x4c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002718 <MX_USART1_UART_Init+0x4c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002718 <MX_USART1_UART_Init+0x4c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026f0:	4b09      	ldr	r3, [pc, #36]	@ (8002718 <MX_USART1_UART_Init+0x4c>)
 80026f2:	220c      	movs	r2, #12
 80026f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026f6:	4b08      	ldr	r3, [pc, #32]	@ (8002718 <MX_USART1_UART_Init+0x4c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026fc:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <MX_USART1_UART_Init+0x4c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002702:	4805      	ldr	r0, [pc, #20]	@ (8002718 <MX_USART1_UART_Init+0x4c>)
 8002704:	f003 f904 	bl	8005910 <HAL_UART_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800270e:	f7ff fd4a 	bl	80021a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000394 	.word	0x20000394
 800271c:	40013800 	.word	0x40013800

08002720 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 0310 	add.w	r3, r7, #16
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a20      	ldr	r2, [pc, #128]	@ (80027bc <HAL_UART_MspInit+0x9c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d139      	bne.n	80027b4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002740:	4b1f      	ldr	r3, [pc, #124]	@ (80027c0 <HAL_UART_MspInit+0xa0>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	4a1e      	ldr	r2, [pc, #120]	@ (80027c0 <HAL_UART_MspInit+0xa0>)
 8002746:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800274a:	6193      	str	r3, [r2, #24]
 800274c:	4b1c      	ldr	r3, [pc, #112]	@ (80027c0 <HAL_UART_MspInit+0xa0>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002758:	4b19      	ldr	r3, [pc, #100]	@ (80027c0 <HAL_UART_MspInit+0xa0>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	4a18      	ldr	r2, [pc, #96]	@ (80027c0 <HAL_UART_MspInit+0xa0>)
 800275e:	f043 0304 	orr.w	r3, r3, #4
 8002762:	6193      	str	r3, [r2, #24]
 8002764:	4b16      	ldr	r3, [pc, #88]	@ (80027c0 <HAL_UART_MspInit+0xa0>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002770:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002774:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800277a:	2303      	movs	r3, #3
 800277c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277e:	f107 0310 	add.w	r3, r7, #16
 8002782:	4619      	mov	r1, r3
 8002784:	480f      	ldr	r0, [pc, #60]	@ (80027c4 <HAL_UART_MspInit+0xa4>)
 8002786:	f000 fa8b 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800278a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800278e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002798:	f107 0310 	add.w	r3, r7, #16
 800279c:	4619      	mov	r1, r3
 800279e:	4809      	ldr	r0, [pc, #36]	@ (80027c4 <HAL_UART_MspInit+0xa4>)
 80027a0:	f000 fa7e 	bl	8002ca0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80027a4:	2200      	movs	r2, #0
 80027a6:	2101      	movs	r1, #1
 80027a8:	2025      	movs	r0, #37	@ 0x25
 80027aa:	f000 f990 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027ae:	2025      	movs	r0, #37	@ 0x25
 80027b0:	f000 f9a9 	bl	8002b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80027b4:	bf00      	nop
 80027b6:	3720      	adds	r7, #32
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40013800 	.word	0x40013800
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40010800 	.word	0x40010800

080027c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027c8:	f7ff fe28 	bl	800241c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027cc:	480b      	ldr	r0, [pc, #44]	@ (80027fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027ce:	490c      	ldr	r1, [pc, #48]	@ (8002800 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002804 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027d4:	e002      	b.n	80027dc <LoopCopyDataInit>

080027d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027da:	3304      	adds	r3, #4

080027dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e0:	d3f9      	bcc.n	80027d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027e2:	4a09      	ldr	r2, [pc, #36]	@ (8002808 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027e4:	4c09      	ldr	r4, [pc, #36]	@ (800280c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e8:	e001      	b.n	80027ee <LoopFillZerobss>

080027ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027ec:	3204      	adds	r2, #4

080027ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f0:	d3fb      	bcc.n	80027ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027f2:	f004 ff13 	bl	800761c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027f6:	f7ff fc0b 	bl	8002010 <main>
  bx lr
 80027fa:	4770      	bx	lr
  ldr r0, =_sdata
 80027fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002800:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002804:	08009758 	.word	0x08009758
  ldr r2, =_sbss
 8002808:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800280c:	2000052c 	.word	0x2000052c

08002810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002810:	e7fe      	b.n	8002810 <ADC1_2_IRQHandler>
	...

08002814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002818:	4b08      	ldr	r3, [pc, #32]	@ (800283c <HAL_Init+0x28>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a07      	ldr	r2, [pc, #28]	@ (800283c <HAL_Init+0x28>)
 800281e:	f043 0310 	orr.w	r3, r3, #16
 8002822:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002824:	2003      	movs	r0, #3
 8002826:	f000 f947 	bl	8002ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282a:	200f      	movs	r0, #15
 800282c:	f000 f808 	bl	8002840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002830:	f7ff fcc0 	bl	80021b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40022000 	.word	0x40022000

08002840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002848:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <HAL_InitTick+0x54>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <HAL_InitTick+0x58>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	4619      	mov	r1, r3
 8002852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002856:	fbb3 f3f1 	udiv	r3, r3, r1
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f95f 	bl	8002b22 <HAL_SYSTICK_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e00e      	b.n	800288c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b0f      	cmp	r3, #15
 8002872:	d80a      	bhi.n	800288a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002874:	2200      	movs	r2, #0
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	f000 f927 	bl	8002ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002880:	4a06      	ldr	r2, [pc, #24]	@ (800289c <HAL_InitTick+0x5c>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000000 	.word	0x20000000
 8002898:	20000008 	.word	0x20000008
 800289c:	20000004 	.word	0x20000004

080028a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a4:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_IncTick+0x1c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <HAL_IncTick+0x20>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	4a03      	ldr	r2, [pc, #12]	@ (80028c0 <HAL_IncTick+0x20>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	20000008 	.word	0x20000008
 80028c0:	200003dc 	.word	0x200003dc

080028c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return uwTick;
 80028c8:	4b02      	ldr	r3, [pc, #8]	@ (80028d4 <HAL_GetTick+0x10>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	200003dc 	.word	0x200003dc

080028d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e0:	f7ff fff0 	bl	80028c4 <HAL_GetTick>
 80028e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d005      	beq.n	80028fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028f2:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <HAL_Delay+0x44>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028fe:	bf00      	nop
 8002900:	f7ff ffe0 	bl	80028c4 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	429a      	cmp	r2, r3
 800290e:	d8f7      	bhi.n	8002900 <HAL_Delay+0x28>
  {
  }
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000008 	.word	0x20000008

08002920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002930:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800293c:	4013      	ands	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002948:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800294c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002952:	4a04      	ldr	r2, [pc, #16]	@ (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	60d3      	str	r3, [r2, #12]
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800296c:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <__NVIC_GetPriorityGrouping+0x18>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	f003 0307 	and.w	r3, r3, #7
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	2b00      	cmp	r3, #0
 8002994:	db0b      	blt.n	80029ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4906      	ldr	r1, [pc, #24]	@ (80029b8 <__NVIC_EnableIRQ+0x34>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	2001      	movs	r0, #1
 80029a6:	fa00 f202 	lsl.w	r2, r0, r2
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	@ (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	@ (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	@ 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	@ 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a84:	d301      	bcc.n	8002a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a86:	2301      	movs	r3, #1
 8002a88:	e00f      	b.n	8002aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab4 <SysTick_Config+0x40>)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a92:	210f      	movs	r1, #15
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	f7ff ff90 	bl	80029bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a9c:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <SysTick_Config+0x40>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa2:	4b04      	ldr	r3, [pc, #16]	@ (8002ab4 <SysTick_Config+0x40>)
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	e000e010 	.word	0xe000e010

08002ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ff2d 	bl	8002920 <__NVIC_SetPriorityGrouping>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae0:	f7ff ff42 	bl	8002968 <__NVIC_GetPriorityGrouping>
 8002ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	6978      	ldr	r0, [r7, #20]
 8002aec:	f7ff ff90 	bl	8002a10 <NVIC_EncodePriority>
 8002af0:	4602      	mov	r2, r0
 8002af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff5f 	bl	80029bc <__NVIC_SetPriority>
}
 8002afe:	bf00      	nop
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff35 	bl	8002984 <__NVIC_EnableIRQ>
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ffa2 	bl	8002a74 <SysTick_Config>
 8002b30:	4603      	mov	r3, r0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d008      	beq.n	8002b64 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2204      	movs	r2, #4
 8002b56:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e020      	b.n	8002ba6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 020e 	bic.w	r2, r2, #14
 8002b72:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b92:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d005      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2204      	movs	r2, #4
 8002bcc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	e051      	b.n	8002c78 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 020e 	bic.w	r2, r2, #14
 8002be2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0201 	bic.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a22      	ldr	r2, [pc, #136]	@ (8002c84 <HAL_DMA_Abort_IT+0xd4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d029      	beq.n	8002c52 <HAL_DMA_Abort_IT+0xa2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a21      	ldr	r2, [pc, #132]	@ (8002c88 <HAL_DMA_Abort_IT+0xd8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d022      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x9e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002c8c <HAL_DMA_Abort_IT+0xdc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d01a      	beq.n	8002c48 <HAL_DMA_Abort_IT+0x98>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a1e      	ldr	r2, [pc, #120]	@ (8002c90 <HAL_DMA_Abort_IT+0xe0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d012      	beq.n	8002c42 <HAL_DMA_Abort_IT+0x92>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1c      	ldr	r2, [pc, #112]	@ (8002c94 <HAL_DMA_Abort_IT+0xe4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00a      	beq.n	8002c3c <HAL_DMA_Abort_IT+0x8c>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002c98 <HAL_DMA_Abort_IT+0xe8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d102      	bne.n	8002c36 <HAL_DMA_Abort_IT+0x86>
 8002c30:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c34:	e00e      	b.n	8002c54 <HAL_DMA_Abort_IT+0xa4>
 8002c36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c3a:	e00b      	b.n	8002c54 <HAL_DMA_Abort_IT+0xa4>
 8002c3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c40:	e008      	b.n	8002c54 <HAL_DMA_Abort_IT+0xa4>
 8002c42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c46:	e005      	b.n	8002c54 <HAL_DMA_Abort_IT+0xa4>
 8002c48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c4c:	e002      	b.n	8002c54 <HAL_DMA_Abort_IT+0xa4>
 8002c4e:	2310      	movs	r3, #16
 8002c50:	e000      	b.n	8002c54 <HAL_DMA_Abort_IT+0xa4>
 8002c52:	2301      	movs	r3, #1
 8002c54:	4a11      	ldr	r2, [pc, #68]	@ (8002c9c <HAL_DMA_Abort_IT+0xec>)
 8002c56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
    } 
  }
  return status;
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40020008 	.word	0x40020008
 8002c88:	4002001c 	.word	0x4002001c
 8002c8c:	40020030 	.word	0x40020030
 8002c90:	40020044 	.word	0x40020044
 8002c94:	40020058 	.word	0x40020058
 8002c98:	4002006c 	.word	0x4002006c
 8002c9c:	40020000 	.word	0x40020000

08002ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b08b      	sub	sp, #44	@ 0x2c
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002caa:	2300      	movs	r3, #0
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb2:	e169      	b.n	8002f88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	f040 8158 	bne.w	8002f82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4a9a      	ldr	r2, [pc, #616]	@ (8002f40 <HAL_GPIO_Init+0x2a0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d05e      	beq.n	8002d9a <HAL_GPIO_Init+0xfa>
 8002cdc:	4a98      	ldr	r2, [pc, #608]	@ (8002f40 <HAL_GPIO_Init+0x2a0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d875      	bhi.n	8002dce <HAL_GPIO_Init+0x12e>
 8002ce2:	4a98      	ldr	r2, [pc, #608]	@ (8002f44 <HAL_GPIO_Init+0x2a4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d058      	beq.n	8002d9a <HAL_GPIO_Init+0xfa>
 8002ce8:	4a96      	ldr	r2, [pc, #600]	@ (8002f44 <HAL_GPIO_Init+0x2a4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d86f      	bhi.n	8002dce <HAL_GPIO_Init+0x12e>
 8002cee:	4a96      	ldr	r2, [pc, #600]	@ (8002f48 <HAL_GPIO_Init+0x2a8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d052      	beq.n	8002d9a <HAL_GPIO_Init+0xfa>
 8002cf4:	4a94      	ldr	r2, [pc, #592]	@ (8002f48 <HAL_GPIO_Init+0x2a8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d869      	bhi.n	8002dce <HAL_GPIO_Init+0x12e>
 8002cfa:	4a94      	ldr	r2, [pc, #592]	@ (8002f4c <HAL_GPIO_Init+0x2ac>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d04c      	beq.n	8002d9a <HAL_GPIO_Init+0xfa>
 8002d00:	4a92      	ldr	r2, [pc, #584]	@ (8002f4c <HAL_GPIO_Init+0x2ac>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d863      	bhi.n	8002dce <HAL_GPIO_Init+0x12e>
 8002d06:	4a92      	ldr	r2, [pc, #584]	@ (8002f50 <HAL_GPIO_Init+0x2b0>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d046      	beq.n	8002d9a <HAL_GPIO_Init+0xfa>
 8002d0c:	4a90      	ldr	r2, [pc, #576]	@ (8002f50 <HAL_GPIO_Init+0x2b0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d85d      	bhi.n	8002dce <HAL_GPIO_Init+0x12e>
 8002d12:	2b12      	cmp	r3, #18
 8002d14:	d82a      	bhi.n	8002d6c <HAL_GPIO_Init+0xcc>
 8002d16:	2b12      	cmp	r3, #18
 8002d18:	d859      	bhi.n	8002dce <HAL_GPIO_Init+0x12e>
 8002d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d20 <HAL_GPIO_Init+0x80>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002d9b 	.word	0x08002d9b
 8002d24:	08002d75 	.word	0x08002d75
 8002d28:	08002d87 	.word	0x08002d87
 8002d2c:	08002dc9 	.word	0x08002dc9
 8002d30:	08002dcf 	.word	0x08002dcf
 8002d34:	08002dcf 	.word	0x08002dcf
 8002d38:	08002dcf 	.word	0x08002dcf
 8002d3c:	08002dcf 	.word	0x08002dcf
 8002d40:	08002dcf 	.word	0x08002dcf
 8002d44:	08002dcf 	.word	0x08002dcf
 8002d48:	08002dcf 	.word	0x08002dcf
 8002d4c:	08002dcf 	.word	0x08002dcf
 8002d50:	08002dcf 	.word	0x08002dcf
 8002d54:	08002dcf 	.word	0x08002dcf
 8002d58:	08002dcf 	.word	0x08002dcf
 8002d5c:	08002dcf 	.word	0x08002dcf
 8002d60:	08002dcf 	.word	0x08002dcf
 8002d64:	08002d7d 	.word	0x08002d7d
 8002d68:	08002d91 	.word	0x08002d91
 8002d6c:	4a79      	ldr	r2, [pc, #484]	@ (8002f54 <HAL_GPIO_Init+0x2b4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d72:	e02c      	b.n	8002dce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	623b      	str	r3, [r7, #32]
          break;
 8002d7a:	e029      	b.n	8002dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	3304      	adds	r3, #4
 8002d82:	623b      	str	r3, [r7, #32]
          break;
 8002d84:	e024      	b.n	8002dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	3308      	adds	r3, #8
 8002d8c:	623b      	str	r3, [r7, #32]
          break;
 8002d8e:	e01f      	b.n	8002dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	330c      	adds	r3, #12
 8002d96:	623b      	str	r3, [r7, #32]
          break;
 8002d98:	e01a      	b.n	8002dd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d102      	bne.n	8002da8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002da2:	2304      	movs	r3, #4
 8002da4:	623b      	str	r3, [r7, #32]
          break;
 8002da6:	e013      	b.n	8002dd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d105      	bne.n	8002dbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002db0:	2308      	movs	r3, #8
 8002db2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	611a      	str	r2, [r3, #16]
          break;
 8002dba:	e009      	b.n	8002dd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dbc:	2308      	movs	r3, #8
 8002dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	615a      	str	r2, [r3, #20]
          break;
 8002dc6:	e003      	b.n	8002dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	623b      	str	r3, [r7, #32]
          break;
 8002dcc:	e000      	b.n	8002dd0 <HAL_GPIO_Init+0x130>
          break;
 8002dce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2bff      	cmp	r3, #255	@ 0xff
 8002dd4:	d801      	bhi.n	8002dda <HAL_GPIO_Init+0x13a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	e001      	b.n	8002dde <HAL_GPIO_Init+0x13e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2bff      	cmp	r3, #255	@ 0xff
 8002de4:	d802      	bhi.n	8002dec <HAL_GPIO_Init+0x14c>
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	e002      	b.n	8002df2 <HAL_GPIO_Init+0x152>
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	3b08      	subs	r3, #8
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	210f      	movs	r1, #15
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	401a      	ands	r2, r3
 8002e04:	6a39      	ldr	r1, [r7, #32]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 80b1 	beq.w	8002f82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e20:	4b4d      	ldr	r3, [pc, #308]	@ (8002f58 <HAL_GPIO_Init+0x2b8>)
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	4a4c      	ldr	r2, [pc, #304]	@ (8002f58 <HAL_GPIO_Init+0x2b8>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6193      	str	r3, [r2, #24]
 8002e2c:	4b4a      	ldr	r3, [pc, #296]	@ (8002f58 <HAL_GPIO_Init+0x2b8>)
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e38:	4a48      	ldr	r2, [pc, #288]	@ (8002f5c <HAL_GPIO_Init+0x2bc>)
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	3302      	adds	r3, #2
 8002e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	220f      	movs	r2, #15
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a40      	ldr	r2, [pc, #256]	@ (8002f60 <HAL_GPIO_Init+0x2c0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d013      	beq.n	8002e8c <HAL_GPIO_Init+0x1ec>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a3f      	ldr	r2, [pc, #252]	@ (8002f64 <HAL_GPIO_Init+0x2c4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00d      	beq.n	8002e88 <HAL_GPIO_Init+0x1e8>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a3e      	ldr	r2, [pc, #248]	@ (8002f68 <HAL_GPIO_Init+0x2c8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d007      	beq.n	8002e84 <HAL_GPIO_Init+0x1e4>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a3d      	ldr	r2, [pc, #244]	@ (8002f6c <HAL_GPIO_Init+0x2cc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d101      	bne.n	8002e80 <HAL_GPIO_Init+0x1e0>
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e006      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e80:	2304      	movs	r3, #4
 8002e82:	e004      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e002      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e90:	f002 0203 	and.w	r2, r2, #3
 8002e94:	0092      	lsls	r2, r2, #2
 8002e96:	4093      	lsls	r3, r2
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e9e:	492f      	ldr	r1, [pc, #188]	@ (8002f5c <HAL_GPIO_Init+0x2bc>)
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea2:	089b      	lsrs	r3, r3, #2
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d006      	beq.n	8002ec6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	492c      	ldr	r1, [pc, #176]	@ (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
 8002ec4:	e006      	b.n	8002ed4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	4928      	ldr	r1, [pc, #160]	@ (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d006      	beq.n	8002eee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ee0:	4b23      	ldr	r3, [pc, #140]	@ (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	4922      	ldr	r1, [pc, #136]	@ (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60cb      	str	r3, [r1, #12]
 8002eec:	e006      	b.n	8002efc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002eee:	4b20      	ldr	r3, [pc, #128]	@ (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	491e      	ldr	r1, [pc, #120]	@ (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d006      	beq.n	8002f16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f08:	4b19      	ldr	r3, [pc, #100]	@ (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	4918      	ldr	r1, [pc, #96]	@ (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
 8002f14:	e006      	b.n	8002f24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f16:	4b16      	ldr	r3, [pc, #88]	@ (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	4914      	ldr	r1, [pc, #80]	@ (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d021      	beq.n	8002f74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f30:	4b0f      	ldr	r3, [pc, #60]	@ (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	490e      	ldr	r1, [pc, #56]	@ (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	600b      	str	r3, [r1, #0]
 8002f3c:	e021      	b.n	8002f82 <HAL_GPIO_Init+0x2e2>
 8002f3e:	bf00      	nop
 8002f40:	10320000 	.word	0x10320000
 8002f44:	10310000 	.word	0x10310000
 8002f48:	10220000 	.word	0x10220000
 8002f4c:	10210000 	.word	0x10210000
 8002f50:	10120000 	.word	0x10120000
 8002f54:	10110000 	.word	0x10110000
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40010000 	.word	0x40010000
 8002f60:	40010800 	.word	0x40010800
 8002f64:	40010c00 	.word	0x40010c00
 8002f68:	40011000 	.word	0x40011000
 8002f6c:	40011400 	.word	0x40011400
 8002f70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f74:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <HAL_GPIO_Init+0x304>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	4909      	ldr	r1, [pc, #36]	@ (8002fa4 <HAL_GPIO_Init+0x304>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	3301      	adds	r3, #1
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f47f ae8e 	bne.w	8002cb4 <HAL_GPIO_Init+0x14>
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	372c      	adds	r7, #44	@ 0x2c
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	40010400 	.word	0x40010400

08002fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	887b      	ldrh	r3, [r7, #2]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
 8002fc4:	e001      	b.n	8002fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	807b      	strh	r3, [r7, #2]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fe6:	787b      	ldrb	r3, [r7, #1]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fec:	887a      	ldrh	r2, [r7, #2]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ff2:	e003      	b.n	8002ffc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ff4:	887b      	ldrh	r3, [r7, #2]
 8002ff6:	041a      	lsls	r2, r3, #16
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	611a      	str	r2, [r3, #16]
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr
	...

08003008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e12b      	b.n	8003272 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fe fb7c 	bl	800172c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2224      	movs	r2, #36	@ 0x24
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0201 	bic.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800305a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800306a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800306c:	f001 fbfc 	bl	8004868 <HAL_RCC_GetPCLK1Freq>
 8003070:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	4a81      	ldr	r2, [pc, #516]	@ (800327c <HAL_I2C_Init+0x274>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d807      	bhi.n	800308c <HAL_I2C_Init+0x84>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a80      	ldr	r2, [pc, #512]	@ (8003280 <HAL_I2C_Init+0x278>)
 8003080:	4293      	cmp	r3, r2
 8003082:	bf94      	ite	ls
 8003084:	2301      	movls	r3, #1
 8003086:	2300      	movhi	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	e006      	b.n	800309a <HAL_I2C_Init+0x92>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4a7d      	ldr	r2, [pc, #500]	@ (8003284 <HAL_I2C_Init+0x27c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	bf94      	ite	ls
 8003094:	2301      	movls	r3, #1
 8003096:	2300      	movhi	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e0e7      	b.n	8003272 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4a78      	ldr	r2, [pc, #480]	@ (8003288 <HAL_I2C_Init+0x280>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	0c9b      	lsrs	r3, r3, #18
 80030ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	430a      	orrs	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4a6a      	ldr	r2, [pc, #424]	@ (800327c <HAL_I2C_Init+0x274>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d802      	bhi.n	80030dc <HAL_I2C_Init+0xd4>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	3301      	adds	r3, #1
 80030da:	e009      	b.n	80030f0 <HAL_I2C_Init+0xe8>
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	4a69      	ldr	r2, [pc, #420]	@ (800328c <HAL_I2C_Init+0x284>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	3301      	adds	r3, #1
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003102:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	495c      	ldr	r1, [pc, #368]	@ (800327c <HAL_I2C_Init+0x274>)
 800310c:	428b      	cmp	r3, r1
 800310e:	d819      	bhi.n	8003144 <HAL_I2C_Init+0x13c>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1e59      	subs	r1, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	fbb1 f3f3 	udiv	r3, r1, r3
 800311e:	1c59      	adds	r1, r3, #1
 8003120:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003124:	400b      	ands	r3, r1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <HAL_I2C_Init+0x138>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1e59      	subs	r1, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fbb1 f3f3 	udiv	r3, r1, r3
 8003138:	3301      	adds	r3, #1
 800313a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313e:	e051      	b.n	80031e4 <HAL_I2C_Init+0x1dc>
 8003140:	2304      	movs	r3, #4
 8003142:	e04f      	b.n	80031e4 <HAL_I2C_Init+0x1dc>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d111      	bne.n	8003170 <HAL_I2C_Init+0x168>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e58      	subs	r0, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	440b      	add	r3, r1
 800315a:	fbb0 f3f3 	udiv	r3, r0, r3
 800315e:	3301      	adds	r3, #1
 8003160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	e012      	b.n	8003196 <HAL_I2C_Init+0x18e>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1e58      	subs	r0, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	0099      	lsls	r1, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	fbb0 f3f3 	udiv	r3, r0, r3
 8003186:	3301      	adds	r3, #1
 8003188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Init+0x196>
 800319a:	2301      	movs	r3, #1
 800319c:	e022      	b.n	80031e4 <HAL_I2C_Init+0x1dc>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10e      	bne.n	80031c4 <HAL_I2C_Init+0x1bc>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1e58      	subs	r0, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6859      	ldr	r1, [r3, #4]
 80031ae:	460b      	mov	r3, r1
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	440b      	add	r3, r1
 80031b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b8:	3301      	adds	r3, #1
 80031ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031c2:	e00f      	b.n	80031e4 <HAL_I2C_Init+0x1dc>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1e58      	subs	r0, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6859      	ldr	r1, [r3, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	0099      	lsls	r1, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031da:	3301      	adds	r3, #1
 80031dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	6809      	ldr	r1, [r1, #0]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69da      	ldr	r2, [r3, #28]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003212:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6911      	ldr	r1, [r2, #16]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68d2      	ldr	r2, [r2, #12]
 800321e:	4311      	orrs	r1, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	430b      	orrs	r3, r1
 8003226:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	000186a0 	.word	0x000186a0
 8003280:	001e847f 	.word	0x001e847f
 8003284:	003d08ff 	.word	0x003d08ff
 8003288:	431bde83 	.word	0x431bde83
 800328c:	10624dd3 	.word	0x10624dd3

08003290 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af02      	add	r7, sp, #8
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	4608      	mov	r0, r1
 800329a:	4611      	mov	r1, r2
 800329c:	461a      	mov	r2, r3
 800329e:	4603      	mov	r3, r0
 80032a0:	817b      	strh	r3, [r7, #10]
 80032a2:	460b      	mov	r3, r1
 80032a4:	813b      	strh	r3, [r7, #8]
 80032a6:	4613      	mov	r3, r2
 80032a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032aa:	f7ff fb0b 	bl	80028c4 <HAL_GetTick>
 80032ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	f040 80d9 	bne.w	8003470 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	2319      	movs	r3, #25
 80032c4:	2201      	movs	r2, #1
 80032c6:	496d      	ldr	r1, [pc, #436]	@ (800347c <HAL_I2C_Mem_Write+0x1ec>)
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 fccd 	bl	8003c68 <I2C_WaitOnFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032d4:	2302      	movs	r3, #2
 80032d6:	e0cc      	b.n	8003472 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_I2C_Mem_Write+0x56>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e0c5      	b.n	8003472 <HAL_I2C_Mem_Write+0x1e2>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d007      	beq.n	800330c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800331a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2221      	movs	r2, #33	@ 0x21
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2240      	movs	r2, #64	@ 0x40
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a3a      	ldr	r2, [r7, #32]
 8003336:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800333c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4a4d      	ldr	r2, [pc, #308]	@ (8003480 <HAL_I2C_Mem_Write+0x1f0>)
 800334c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800334e:	88f8      	ldrh	r0, [r7, #6]
 8003350:	893a      	ldrh	r2, [r7, #8]
 8003352:	8979      	ldrh	r1, [r7, #10]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	4603      	mov	r3, r0
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 fb04 	bl	800396c <I2C_RequestMemoryWrite>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d052      	beq.n	8003410 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e081      	b.n	8003472 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 fd92 	bl	8003e9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	2b04      	cmp	r3, #4
 8003384:	d107      	bne.n	8003396 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003394:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e06b      	b.n	8003472 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339e:	781a      	ldrb	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d11b      	bne.n	8003410 <HAL_I2C_Mem_Write+0x180>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d017      	beq.n	8003410 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e4:	781a      	ldrb	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1aa      	bne.n	800336e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 fd85 	bl	8003f2c <I2C_WaitOnBTFFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00d      	beq.n	8003444 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342c:	2b04      	cmp	r3, #4
 800342e:	d107      	bne.n	8003440 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800343e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e016      	b.n	8003472 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e000      	b.n	8003472 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
  }
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	00100002 	.word	0x00100002
 8003480:	ffff0000 	.word	0xffff0000

08003484 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08c      	sub	sp, #48	@ 0x30
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	4608      	mov	r0, r1
 800348e:	4611      	mov	r1, r2
 8003490:	461a      	mov	r2, r3
 8003492:	4603      	mov	r3, r0
 8003494:	817b      	strh	r3, [r7, #10]
 8003496:	460b      	mov	r3, r1
 8003498:	813b      	strh	r3, [r7, #8]
 800349a:	4613      	mov	r3, r2
 800349c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034a2:	f7ff fa0f 	bl	80028c4 <HAL_GetTick>
 80034a6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	f040 8250 	bne.w	8003956 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	2319      	movs	r3, #25
 80034bc:	2201      	movs	r2, #1
 80034be:	4982      	ldr	r1, [pc, #520]	@ (80036c8 <HAL_I2C_Mem_Read+0x244>)
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fbd1 	bl	8003c68 <I2C_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
 80034ce:	e243      	b.n	8003958 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_I2C_Mem_Read+0x5a>
 80034da:	2302      	movs	r3, #2
 80034dc:	e23c      	b.n	8003958 <HAL_I2C_Mem_Read+0x4d4>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d007      	beq.n	8003504 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003512:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2222      	movs	r2, #34	@ 0x22
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2240      	movs	r2, #64	@ 0x40
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800352e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003534:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4a62      	ldr	r2, [pc, #392]	@ (80036cc <HAL_I2C_Mem_Read+0x248>)
 8003544:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003546:	88f8      	ldrh	r0, [r7, #6]
 8003548:	893a      	ldrh	r2, [r7, #8]
 800354a:	8979      	ldrh	r1, [r7, #10]
 800354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	4603      	mov	r3, r0
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fa9e 	bl	8003a98 <I2C_RequestMemoryRead>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e1f8      	b.n	8003958 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356a:	2b00      	cmp	r3, #0
 800356c:	d113      	bne.n	8003596 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e1cc      	b.n	8003930 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359a:	2b01      	cmp	r3, #1
 800359c:	d11e      	bne.n	80035dc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035ae:	b672      	cpsid	i
}
 80035b0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035d8:	b662      	cpsie	i
}
 80035da:	e035      	b.n	8003648 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d11e      	bne.n	8003622 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035f4:	b672      	cpsid	i
}
 80035f6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800361c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800361e:	b662      	cpsie	i
}
 8003620:	e012      	b.n	8003648 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003630:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003632:	2300      	movs	r3, #0
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003648:	e172      	b.n	8003930 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364e:	2b03      	cmp	r3, #3
 8003650:	f200 811f 	bhi.w	8003892 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003658:	2b01      	cmp	r3, #1
 800365a:	d123      	bne.n	80036a4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800365e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fcab 	bl	8003fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e173      	b.n	8003958 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036a2:	e145      	b.n	8003930 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d152      	bne.n	8003752 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b2:	2200      	movs	r2, #0
 80036b4:	4906      	ldr	r1, [pc, #24]	@ (80036d0 <HAL_I2C_Mem_Read+0x24c>)
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fad6 	bl	8003c68 <I2C_WaitOnFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e148      	b.n	8003958 <HAL_I2C_Mem_Read+0x4d4>
 80036c6:	bf00      	nop
 80036c8:	00100002 	.word	0x00100002
 80036cc:	ffff0000 	.word	0xffff0000
 80036d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80036d4:	b672      	cpsid	i
}
 80036d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800371a:	b662      	cpsie	i
}
 800371c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003750:	e0ee      	b.n	8003930 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003758:	2200      	movs	r2, #0
 800375a:	4981      	ldr	r1, [pc, #516]	@ (8003960 <HAL_I2C_Mem_Read+0x4dc>)
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 fa83 	bl	8003c68 <I2C_WaitOnFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0f5      	b.n	8003958 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800377a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800377c:	b672      	cpsid	i
}
 800377e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80037b2:	4b6c      	ldr	r3, [pc, #432]	@ (8003964 <HAL_I2C_Mem_Read+0x4e0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	08db      	lsrs	r3, r3, #3
 80037b8:	4a6b      	ldr	r2, [pc, #428]	@ (8003968 <HAL_I2C_Mem_Read+0x4e4>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	0a1a      	lsrs	r2, r3, #8
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	00da      	lsls	r2, r3, #3
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d118      	bne.n	800380a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	f043 0220 	orr.w	r2, r3, #32
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80037fa:	b662      	cpsie	i
}
 80037fc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e0a6      	b.n	8003958 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b04      	cmp	r3, #4
 8003816:	d1d9      	bne.n	80037cc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800385a:	b662      	cpsie	i
}
 800385c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003890:	e04e      	b.n	8003930 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003894:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fb90 	bl	8003fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e058      	b.n	8003958 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d124      	bne.n	8003930 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d107      	bne.n	80038fe <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038fc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003934:	2b00      	cmp	r3, #0
 8003936:	f47f ae88 	bne.w	800364a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	e000      	b.n	8003958 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003956:	2302      	movs	r3, #2
  }
}
 8003958:	4618      	mov	r0, r3
 800395a:	3728      	adds	r7, #40	@ 0x28
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	00010004 	.word	0x00010004
 8003964:	20000000 	.word	0x20000000
 8003968:	14f8b589 	.word	0x14f8b589

0800396c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	4608      	mov	r0, r1
 8003976:	4611      	mov	r1, r2
 8003978:	461a      	mov	r2, r3
 800397a:	4603      	mov	r3, r0
 800397c:	817b      	strh	r3, [r7, #10]
 800397e:	460b      	mov	r3, r1
 8003980:	813b      	strh	r3, [r7, #8]
 8003982:	4613      	mov	r3, r2
 8003984:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003994:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	2200      	movs	r2, #0
 800399e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f960 	bl	8003c68 <I2C_WaitOnFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00d      	beq.n	80039ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039bc:	d103      	bne.n	80039c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e05f      	b.n	8003a8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ca:	897b      	ldrh	r3, [r7, #10]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	461a      	mov	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039dc:	6a3a      	ldr	r2, [r7, #32]
 80039de:	492d      	ldr	r1, [pc, #180]	@ (8003a94 <I2C_RequestMemoryWrite+0x128>)
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f9bb 	bl	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e04c      	b.n	8003a8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a08:	6a39      	ldr	r1, [r7, #32]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fa46 	bl	8003e9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00d      	beq.n	8003a32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d107      	bne.n	8003a2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e02b      	b.n	8003a8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d105      	bne.n	8003a44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a38:	893b      	ldrh	r3, [r7, #8]
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	611a      	str	r2, [r3, #16]
 8003a42:	e021      	b.n	8003a88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a44:	893b      	ldrh	r3, [r7, #8]
 8003a46:	0a1b      	lsrs	r3, r3, #8
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a54:	6a39      	ldr	r1, [r7, #32]
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 fa20 	bl	8003e9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00d      	beq.n	8003a7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d107      	bne.n	8003a7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e005      	b.n	8003a8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a7e:	893b      	ldrh	r3, [r7, #8]
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	00010002 	.word	0x00010002

08003a98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	817b      	strh	r3, [r7, #10]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	813b      	strh	r3, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ac0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ad0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f8c2 	bl	8003c68 <I2C_WaitOnFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003af8:	d103      	bne.n	8003b02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e0aa      	b.n	8003c5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b06:	897b      	ldrh	r3, [r7, #10]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	6a3a      	ldr	r2, [r7, #32]
 8003b1a:	4952      	ldr	r1, [pc, #328]	@ (8003c64 <I2C_RequestMemoryRead+0x1cc>)
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f91d 	bl	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e097      	b.n	8003c5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b44:	6a39      	ldr	r1, [r7, #32]
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f9a8 	bl	8003e9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00d      	beq.n	8003b6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d107      	bne.n	8003b6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e076      	b.n	8003c5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d105      	bne.n	8003b80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b74:	893b      	ldrh	r3, [r7, #8]
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	611a      	str	r2, [r3, #16]
 8003b7e:	e021      	b.n	8003bc4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b80:	893b      	ldrh	r3, [r7, #8]
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b90:	6a39      	ldr	r1, [r7, #32]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f982 	bl	8003e9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00d      	beq.n	8003bba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d107      	bne.n	8003bb6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e050      	b.n	8003c5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bba:	893b      	ldrh	r3, [r7, #8]
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc6:	6a39      	ldr	r1, [r7, #32]
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f967 	bl	8003e9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00d      	beq.n	8003bf0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d107      	bne.n	8003bec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e035      	b.n	8003c5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bfe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f82b 	bl	8003c68 <I2C_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00d      	beq.n	8003c34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c26:	d103      	bne.n	8003c30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e013      	b.n	8003c5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c34:	897b      	ldrh	r3, [r7, #10]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	6a3a      	ldr	r2, [r7, #32]
 8003c48:	4906      	ldr	r1, [pc, #24]	@ (8003c64 <I2C_RequestMemoryRead+0x1cc>)
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f886 	bl	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	00010002 	.word	0x00010002

08003c68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	4613      	mov	r3, r2
 8003c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c78:	e048      	b.n	8003d0c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c80:	d044      	beq.n	8003d0c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c82:	f7fe fe1f 	bl	80028c4 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d302      	bcc.n	8003c98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d139      	bne.n	8003d0c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	0c1b      	lsrs	r3, r3, #16
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d10d      	bne.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	43da      	mvns	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	4013      	ands	r3, r2
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	e00c      	b.n	8003cd8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	43da      	mvns	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bf0c      	ite	eq
 8003cd0:	2301      	moveq	r3, #1
 8003cd2:	2300      	movne	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d116      	bne.n	8003d0c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf8:	f043 0220 	orr.w	r2, r3, #32
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e023      	b.n	8003d54 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	0c1b      	lsrs	r3, r3, #16
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d10d      	bne.n	8003d32 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	43da      	mvns	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	4013      	ands	r3, r2
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf0c      	ite	eq
 8003d28:	2301      	moveq	r3, #1
 8003d2a:	2300      	movne	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	461a      	mov	r2, r3
 8003d30:	e00c      	b.n	8003d4c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	43da      	mvns	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d093      	beq.n	8003c7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d6a:	e071      	b.n	8003e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d7a:	d123      	bne.n	8003dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d8a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db0:	f043 0204 	orr.w	r2, r3, #4
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e067      	b.n	8003e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d041      	beq.n	8003e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dcc:	f7fe fd7a 	bl	80028c4 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d302      	bcc.n	8003de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d136      	bne.n	8003e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	0c1b      	lsrs	r3, r3, #16
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d10c      	bne.n	8003e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	43da      	mvns	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4013      	ands	r3, r2
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	bf14      	ite	ne
 8003dfe:	2301      	movne	r3, #1
 8003e00:	2300      	moveq	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	e00b      	b.n	8003e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	43da      	mvns	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	4013      	ands	r3, r2
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	bf14      	ite	ne
 8003e18:	2301      	movne	r3, #1
 8003e1a:	2300      	moveq	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d016      	beq.n	8003e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3c:	f043 0220 	orr.w	r2, r3, #32
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e021      	b.n	8003e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	0c1b      	lsrs	r3, r3, #16
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d10c      	bne.n	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	43da      	mvns	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	4013      	ands	r3, r2
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf14      	ite	ne
 8003e6c:	2301      	movne	r3, #1
 8003e6e:	2300      	moveq	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	e00b      	b.n	8003e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	43da      	mvns	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bf14      	ite	ne
 8003e86:	2301      	movne	r3, #1
 8003e88:	2300      	moveq	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f47f af6d 	bne.w	8003d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ea8:	e034      	b.n	8003f14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f8e3 	bl	8004076 <I2C_IsAcknowledgeFailed>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e034      	b.n	8003f24 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec0:	d028      	beq.n	8003f14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec2:	f7fe fcff 	bl	80028c4 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d302      	bcc.n	8003ed8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d11d      	bne.n	8003f14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee2:	2b80      	cmp	r3, #128	@ 0x80
 8003ee4:	d016      	beq.n	8003f14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e007      	b.n	8003f24 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f1e:	2b80      	cmp	r3, #128	@ 0x80
 8003f20:	d1c3      	bne.n	8003eaa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f38:	e034      	b.n	8003fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 f89b 	bl	8004076 <I2C_IsAcknowledgeFailed>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e034      	b.n	8003fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d028      	beq.n	8003fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f52:	f7fe fcb7 	bl	80028c4 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d302      	bcc.n	8003f68 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d11d      	bne.n	8003fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d016      	beq.n	8003fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	f043 0220 	orr.w	r2, r3, #32
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e007      	b.n	8003fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d1c3      	bne.n	8003f3a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fc8:	e049      	b.n	800405e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d119      	bne.n	800400c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0210 	mvn.w	r2, #16
 8003fe0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e030      	b.n	800406e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400c:	f7fe fc5a 	bl	80028c4 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	429a      	cmp	r2, r3
 800401a:	d302      	bcc.n	8004022 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d11d      	bne.n	800405e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402c:	2b40      	cmp	r3, #64	@ 0x40
 800402e:	d016      	beq.n	800405e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	f043 0220 	orr.w	r2, r3, #32
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e007      	b.n	800406e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004068:	2b40      	cmp	r3, #64	@ 0x40
 800406a:	d1ae      	bne.n	8003fca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800408c:	d11b      	bne.n	80040c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004096:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	f043 0204 	orr.w	r2, r3, #4
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr
	...

080040d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e272      	b.n	80045cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 8087 	beq.w	8004202 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040f4:	4b92      	ldr	r3, [pc, #584]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 030c 	and.w	r3, r3, #12
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d00c      	beq.n	800411a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004100:	4b8f      	ldr	r3, [pc, #572]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	2b08      	cmp	r3, #8
 800410a:	d112      	bne.n	8004132 <HAL_RCC_OscConfig+0x5e>
 800410c:	4b8c      	ldr	r3, [pc, #560]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004118:	d10b      	bne.n	8004132 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411a:	4b89      	ldr	r3, [pc, #548]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d06c      	beq.n	8004200 <HAL_RCC_OscConfig+0x12c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d168      	bne.n	8004200 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e24c      	b.n	80045cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800413a:	d106      	bne.n	800414a <HAL_RCC_OscConfig+0x76>
 800413c:	4b80      	ldr	r3, [pc, #512]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a7f      	ldr	r2, [pc, #508]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 8004142:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	e02e      	b.n	80041a8 <HAL_RCC_OscConfig+0xd4>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10c      	bne.n	800416c <HAL_RCC_OscConfig+0x98>
 8004152:	4b7b      	ldr	r3, [pc, #492]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a7a      	ldr	r2, [pc, #488]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 8004158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	4b78      	ldr	r3, [pc, #480]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a77      	ldr	r2, [pc, #476]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 8004164:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	e01d      	b.n	80041a8 <HAL_RCC_OscConfig+0xd4>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004174:	d10c      	bne.n	8004190 <HAL_RCC_OscConfig+0xbc>
 8004176:	4b72      	ldr	r3, [pc, #456]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a71      	ldr	r2, [pc, #452]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 800417c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	4b6f      	ldr	r3, [pc, #444]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a6e      	ldr	r2, [pc, #440]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 8004188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e00b      	b.n	80041a8 <HAL_RCC_OscConfig+0xd4>
 8004190:	4b6b      	ldr	r3, [pc, #428]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a6a      	ldr	r2, [pc, #424]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 8004196:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	4b68      	ldr	r3, [pc, #416]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a67      	ldr	r2, [pc, #412]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 80041a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d013      	beq.n	80041d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7fe fb88 	bl	80028c4 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fe fb84 	bl	80028c4 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	@ 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e200      	b.n	80045cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ca:	4b5d      	ldr	r3, [pc, #372]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0xe4>
 80041d6:	e014      	b.n	8004202 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d8:	f7fe fb74 	bl	80028c4 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e0:	f7fe fb70 	bl	80028c4 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b64      	cmp	r3, #100	@ 0x64
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e1ec      	b.n	80045cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041f2:	4b53      	ldr	r3, [pc, #332]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0x10c>
 80041fe:	e000      	b.n	8004202 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d063      	beq.n	80042d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800420e:	4b4c      	ldr	r3, [pc, #304]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800421a:	4b49      	ldr	r3, [pc, #292]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b08      	cmp	r3, #8
 8004224:	d11c      	bne.n	8004260 <HAL_RCC_OscConfig+0x18c>
 8004226:	4b46      	ldr	r3, [pc, #280]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d116      	bne.n	8004260 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004232:	4b43      	ldr	r3, [pc, #268]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <HAL_RCC_OscConfig+0x176>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d001      	beq.n	800424a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e1c0      	b.n	80045cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424a:	4b3d      	ldr	r3, [pc, #244]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4939      	ldr	r1, [pc, #228]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800425e:	e03a      	b.n	80042d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d020      	beq.n	80042aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004268:	4b36      	ldr	r3, [pc, #216]	@ (8004344 <HAL_RCC_OscConfig+0x270>)
 800426a:	2201      	movs	r2, #1
 800426c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426e:	f7fe fb29 	bl	80028c4 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004276:	f7fe fb25 	bl	80028c4 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e1a1      	b.n	80045cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004288:	4b2d      	ldr	r3, [pc, #180]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004294:	4b2a      	ldr	r3, [pc, #168]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4927      	ldr	r1, [pc, #156]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	600b      	str	r3, [r1, #0]
 80042a8:	e015      	b.n	80042d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042aa:	4b26      	ldr	r3, [pc, #152]	@ (8004344 <HAL_RCC_OscConfig+0x270>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b0:	f7fe fb08 	bl	80028c4 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b8:	f7fe fb04 	bl	80028c4 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e180      	b.n	80045cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d03a      	beq.n	8004358 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d019      	beq.n	800431e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ea:	4b17      	ldr	r3, [pc, #92]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f0:	f7fe fae8 	bl	80028c4 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f8:	f7fe fae4 	bl	80028c4 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e160      	b.n	80045cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800430a:	4b0d      	ldr	r3, [pc, #52]	@ (8004340 <HAL_RCC_OscConfig+0x26c>)
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004316:	2001      	movs	r0, #1
 8004318:	f000 face 	bl	80048b8 <RCC_Delay>
 800431c:	e01c      	b.n	8004358 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800431e:	4b0a      	ldr	r3, [pc, #40]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004324:	f7fe face 	bl	80028c4 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800432a:	e00f      	b.n	800434c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800432c:	f7fe faca 	bl	80028c4 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d908      	bls.n	800434c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e146      	b.n	80045cc <HAL_RCC_OscConfig+0x4f8>
 800433e:	bf00      	nop
 8004340:	40021000 	.word	0x40021000
 8004344:	42420000 	.word	0x42420000
 8004348:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800434c:	4b92      	ldr	r3, [pc, #584]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e9      	bne.n	800432c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80a6 	beq.w	80044b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004366:	2300      	movs	r3, #0
 8004368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800436a:	4b8b      	ldr	r3, [pc, #556]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10d      	bne.n	8004392 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004376:	4b88      	ldr	r3, [pc, #544]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	4a87      	ldr	r2, [pc, #540]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 800437c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004380:	61d3      	str	r3, [r2, #28]
 8004382:	4b85      	ldr	r3, [pc, #532]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438a:	60bb      	str	r3, [r7, #8]
 800438c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800438e:	2301      	movs	r3, #1
 8004390:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004392:	4b82      	ldr	r3, [pc, #520]	@ (800459c <HAL_RCC_OscConfig+0x4c8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439a:	2b00      	cmp	r3, #0
 800439c:	d118      	bne.n	80043d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800439e:	4b7f      	ldr	r3, [pc, #508]	@ (800459c <HAL_RCC_OscConfig+0x4c8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a7e      	ldr	r2, [pc, #504]	@ (800459c <HAL_RCC_OscConfig+0x4c8>)
 80043a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043aa:	f7fe fa8b 	bl	80028c4 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b2:	f7fe fa87 	bl	80028c4 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b64      	cmp	r3, #100	@ 0x64
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e103      	b.n	80045cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c4:	4b75      	ldr	r3, [pc, #468]	@ (800459c <HAL_RCC_OscConfig+0x4c8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d106      	bne.n	80043e6 <HAL_RCC_OscConfig+0x312>
 80043d8:	4b6f      	ldr	r3, [pc, #444]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	4a6e      	ldr	r2, [pc, #440]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	6213      	str	r3, [r2, #32]
 80043e4:	e02d      	b.n	8004442 <HAL_RCC_OscConfig+0x36e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10c      	bne.n	8004408 <HAL_RCC_OscConfig+0x334>
 80043ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	4a69      	ldr	r2, [pc, #420]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 80043f4:	f023 0301 	bic.w	r3, r3, #1
 80043f8:	6213      	str	r3, [r2, #32]
 80043fa:	4b67      	ldr	r3, [pc, #412]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	4a66      	ldr	r2, [pc, #408]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 8004400:	f023 0304 	bic.w	r3, r3, #4
 8004404:	6213      	str	r3, [r2, #32]
 8004406:	e01c      	b.n	8004442 <HAL_RCC_OscConfig+0x36e>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	2b05      	cmp	r3, #5
 800440e:	d10c      	bne.n	800442a <HAL_RCC_OscConfig+0x356>
 8004410:	4b61      	ldr	r3, [pc, #388]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	4a60      	ldr	r2, [pc, #384]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 8004416:	f043 0304 	orr.w	r3, r3, #4
 800441a:	6213      	str	r3, [r2, #32]
 800441c:	4b5e      	ldr	r3, [pc, #376]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	4a5d      	ldr	r2, [pc, #372]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	6213      	str	r3, [r2, #32]
 8004428:	e00b      	b.n	8004442 <HAL_RCC_OscConfig+0x36e>
 800442a:	4b5b      	ldr	r3, [pc, #364]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	4a5a      	ldr	r2, [pc, #360]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	6213      	str	r3, [r2, #32]
 8004436:	4b58      	ldr	r3, [pc, #352]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	4a57      	ldr	r2, [pc, #348]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 800443c:	f023 0304 	bic.w	r3, r3, #4
 8004440:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d015      	beq.n	8004476 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444a:	f7fe fa3b 	bl	80028c4 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004450:	e00a      	b.n	8004468 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004452:	f7fe fa37 	bl	80028c4 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004460:	4293      	cmp	r3, r2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e0b1      	b.n	80045cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004468:	4b4b      	ldr	r3, [pc, #300]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0ee      	beq.n	8004452 <HAL_RCC_OscConfig+0x37e>
 8004474:	e014      	b.n	80044a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004476:	f7fe fa25 	bl	80028c4 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447c:	e00a      	b.n	8004494 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800447e:	f7fe fa21 	bl	80028c4 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800448c:	4293      	cmp	r3, r2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e09b      	b.n	80045cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004494:	4b40      	ldr	r3, [pc, #256]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1ee      	bne.n	800447e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044a0:	7dfb      	ldrb	r3, [r7, #23]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d105      	bne.n	80044b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a6:	4b3c      	ldr	r3, [pc, #240]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	4a3b      	ldr	r2, [pc, #236]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 80044ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 8087 	beq.w	80045ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044bc:	4b36      	ldr	r3, [pc, #216]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 030c 	and.w	r3, r3, #12
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d061      	beq.n	800458c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d146      	bne.n	800455e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d0:	4b33      	ldr	r3, [pc, #204]	@ (80045a0 <HAL_RCC_OscConfig+0x4cc>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d6:	f7fe f9f5 	bl	80028c4 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044de:	f7fe f9f1 	bl	80028c4 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e06d      	b.n	80045cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044f0:	4b29      	ldr	r3, [pc, #164]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f0      	bne.n	80044de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004504:	d108      	bne.n	8004518 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004506:	4b24      	ldr	r3, [pc, #144]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	4921      	ldr	r1, [pc, #132]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 8004514:	4313      	orrs	r3, r2
 8004516:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004518:	4b1f      	ldr	r3, [pc, #124]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a19      	ldr	r1, [r3, #32]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	430b      	orrs	r3, r1
 800452a:	491b      	ldr	r1, [pc, #108]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 800452c:	4313      	orrs	r3, r2
 800452e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004530:	4b1b      	ldr	r3, [pc, #108]	@ (80045a0 <HAL_RCC_OscConfig+0x4cc>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004536:	f7fe f9c5 	bl	80028c4 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453e:	f7fe f9c1 	bl	80028c4 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e03d      	b.n	80045cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004550:	4b11      	ldr	r3, [pc, #68]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x46a>
 800455c:	e035      	b.n	80045ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455e:	4b10      	ldr	r3, [pc, #64]	@ (80045a0 <HAL_RCC_OscConfig+0x4cc>)
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004564:	f7fe f9ae 	bl	80028c4 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800456c:	f7fe f9aa 	bl	80028c4 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e026      	b.n	80045cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800457e:	4b06      	ldr	r3, [pc, #24]	@ (8004598 <HAL_RCC_OscConfig+0x4c4>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x498>
 800458a:	e01e      	b.n	80045ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d107      	bne.n	80045a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e019      	b.n	80045cc <HAL_RCC_OscConfig+0x4f8>
 8004598:	40021000 	.word	0x40021000
 800459c:	40007000 	.word	0x40007000
 80045a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045a4:	4b0b      	ldr	r3, [pc, #44]	@ (80045d4 <HAL_RCC_OscConfig+0x500>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d106      	bne.n	80045c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d001      	beq.n	80045ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40021000 	.word	0x40021000

080045d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0d0      	b.n	800478e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045ec:	4b6a      	ldr	r3, [pc, #424]	@ (8004798 <HAL_RCC_ClockConfig+0x1c0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d910      	bls.n	800461c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fa:	4b67      	ldr	r3, [pc, #412]	@ (8004798 <HAL_RCC_ClockConfig+0x1c0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f023 0207 	bic.w	r2, r3, #7
 8004602:	4965      	ldr	r1, [pc, #404]	@ (8004798 <HAL_RCC_ClockConfig+0x1c0>)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	4313      	orrs	r3, r2
 8004608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460a:	4b63      	ldr	r3, [pc, #396]	@ (8004798 <HAL_RCC_ClockConfig+0x1c0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0b8      	b.n	800478e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d020      	beq.n	800466a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004634:	4b59      	ldr	r3, [pc, #356]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	4a58      	ldr	r2, [pc, #352]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 800463a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800463e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800464c:	4b53      	ldr	r3, [pc, #332]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4a52      	ldr	r2, [pc, #328]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 8004652:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004656:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004658:	4b50      	ldr	r3, [pc, #320]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	494d      	ldr	r1, [pc, #308]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 8004666:	4313      	orrs	r3, r2
 8004668:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d040      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467e:	4b47      	ldr	r3, [pc, #284]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d115      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e07f      	b.n	800478e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d107      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004696:	4b41      	ldr	r3, [pc, #260]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e073      	b.n	800478e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a6:	4b3d      	ldr	r3, [pc, #244]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e06b      	b.n	800478e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046b6:	4b39      	ldr	r3, [pc, #228]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f023 0203 	bic.w	r2, r3, #3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4936      	ldr	r1, [pc, #216]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046c8:	f7fe f8fc 	bl	80028c4 <HAL_GetTick>
 80046cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d0:	f7fe f8f8 	bl	80028c4 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e053      	b.n	800478e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e6:	4b2d      	ldr	r3, [pc, #180]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 020c 	and.w	r2, r3, #12
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d1eb      	bne.n	80046d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046f8:	4b27      	ldr	r3, [pc, #156]	@ (8004798 <HAL_RCC_ClockConfig+0x1c0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d210      	bcs.n	8004728 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004706:	4b24      	ldr	r3, [pc, #144]	@ (8004798 <HAL_RCC_ClockConfig+0x1c0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 0207 	bic.w	r2, r3, #7
 800470e:	4922      	ldr	r1, [pc, #136]	@ (8004798 <HAL_RCC_ClockConfig+0x1c0>)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b20      	ldr	r3, [pc, #128]	@ (8004798 <HAL_RCC_ClockConfig+0x1c0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e032      	b.n	800478e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004734:	4b19      	ldr	r3, [pc, #100]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4916      	ldr	r1, [pc, #88]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 8004742:	4313      	orrs	r3, r2
 8004744:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004752:	4b12      	ldr	r3, [pc, #72]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	490e      	ldr	r1, [pc, #56]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 8004762:	4313      	orrs	r3, r2
 8004764:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004766:	f000 f821 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 800476a:	4602      	mov	r2, r0
 800476c:	4b0b      	ldr	r3, [pc, #44]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	091b      	lsrs	r3, r3, #4
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	490a      	ldr	r1, [pc, #40]	@ (80047a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004778:	5ccb      	ldrb	r3, [r1, r3]
 800477a:	fa22 f303 	lsr.w	r3, r2, r3
 800477e:	4a09      	ldr	r2, [pc, #36]	@ (80047a4 <HAL_RCC_ClockConfig+0x1cc>)
 8004780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004782:	4b09      	ldr	r3, [pc, #36]	@ (80047a8 <HAL_RCC_ClockConfig+0x1d0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe f85a 	bl	8002840 <HAL_InitTick>

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40022000 	.word	0x40022000
 800479c:	40021000 	.word	0x40021000
 80047a0:	08009340 	.word	0x08009340
 80047a4:	20000000 	.word	0x20000000
 80047a8:	20000004 	.word	0x20000004

080047ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	2300      	movs	r3, #0
 80047c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80047c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004840 <HAL_RCC_GetSysClockFreq+0x94>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d002      	beq.n	80047dc <HAL_RCC_GetSysClockFreq+0x30>
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d003      	beq.n	80047e2 <HAL_RCC_GetSysClockFreq+0x36>
 80047da:	e027      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047dc:	4b19      	ldr	r3, [pc, #100]	@ (8004844 <HAL_RCC_GetSysClockFreq+0x98>)
 80047de:	613b      	str	r3, [r7, #16]
      break;
 80047e0:	e027      	b.n	8004832 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	0c9b      	lsrs	r3, r3, #18
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	4a17      	ldr	r2, [pc, #92]	@ (8004848 <HAL_RCC_GetSysClockFreq+0x9c>)
 80047ec:	5cd3      	ldrb	r3, [r2, r3]
 80047ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d010      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047fa:	4b11      	ldr	r3, [pc, #68]	@ (8004840 <HAL_RCC_GetSysClockFreq+0x94>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	0c5b      	lsrs	r3, r3, #17
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	4a11      	ldr	r2, [pc, #68]	@ (800484c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004806:	5cd3      	ldrb	r3, [r2, r3]
 8004808:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a0d      	ldr	r2, [pc, #52]	@ (8004844 <HAL_RCC_GetSysClockFreq+0x98>)
 800480e:	fb03 f202 	mul.w	r2, r3, r2
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	e004      	b.n	8004826 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a0c      	ldr	r2, [pc, #48]	@ (8004850 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004820:	fb02 f303 	mul.w	r3, r2, r3
 8004824:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	613b      	str	r3, [r7, #16]
      break;
 800482a:	e002      	b.n	8004832 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800482c:	4b05      	ldr	r3, [pc, #20]	@ (8004844 <HAL_RCC_GetSysClockFreq+0x98>)
 800482e:	613b      	str	r3, [r7, #16]
      break;
 8004830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004832:	693b      	ldr	r3, [r7, #16]
}
 8004834:	4618      	mov	r0, r3
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	bc80      	pop	{r7}
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000
 8004844:	007a1200 	.word	0x007a1200
 8004848:	08009358 	.word	0x08009358
 800484c:	08009368 	.word	0x08009368
 8004850:	003d0900 	.word	0x003d0900

08004854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004858:	4b02      	ldr	r3, [pc, #8]	@ (8004864 <HAL_RCC_GetHCLKFreq+0x10>)
 800485a:	681b      	ldr	r3, [r3, #0]
}
 800485c:	4618      	mov	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr
 8004864:	20000000 	.word	0x20000000

08004868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800486c:	f7ff fff2 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 8004870:	4602      	mov	r2, r0
 8004872:	4b05      	ldr	r3, [pc, #20]	@ (8004888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	0a1b      	lsrs	r3, r3, #8
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	4903      	ldr	r1, [pc, #12]	@ (800488c <HAL_RCC_GetPCLK1Freq+0x24>)
 800487e:	5ccb      	ldrb	r3, [r1, r3]
 8004880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004884:	4618      	mov	r0, r3
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40021000 	.word	0x40021000
 800488c:	08009350 	.word	0x08009350

08004890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004894:	f7ff ffde 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 8004898:	4602      	mov	r2, r0
 800489a:	4b05      	ldr	r3, [pc, #20]	@ (80048b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	0adb      	lsrs	r3, r3, #11
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	4903      	ldr	r1, [pc, #12]	@ (80048b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048a6:	5ccb      	ldrb	r3, [r1, r3]
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40021000 	.word	0x40021000
 80048b4:	08009350 	.word	0x08009350

080048b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80048c0:	4b0a      	ldr	r3, [pc, #40]	@ (80048ec <RCC_Delay+0x34>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a0a      	ldr	r2, [pc, #40]	@ (80048f0 <RCC_Delay+0x38>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	0a5b      	lsrs	r3, r3, #9
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80048d4:	bf00      	nop
  }
  while (Delay --);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1e5a      	subs	r2, r3, #1
 80048da:	60fa      	str	r2, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1f9      	bne.n	80048d4 <RCC_Delay+0x1c>
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr
 80048ec:	20000000 	.word	0x20000000
 80048f0:	10624dd3 	.word	0x10624dd3

080048f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e041      	b.n	800498a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fd fe6e 	bl	80025fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f000 fccc 	bl	80052d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d001      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e03a      	b.n	8004a22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a18      	ldr	r2, [pc, #96]	@ (8004a2c <HAL_TIM_Base_Start_IT+0x98>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00e      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x58>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d6:	d009      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x58>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a14      	ldr	r2, [pc, #80]	@ (8004a30 <HAL_TIM_Base_Start_IT+0x9c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x58>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a13      	ldr	r2, [pc, #76]	@ (8004a34 <HAL_TIM_Base_Start_IT+0xa0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d111      	bne.n	8004a10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d010      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0e:	e007      	b.n	8004a20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr
 8004a2c:	40012c00 	.word	0x40012c00
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800

08004a38 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e041      	b.n	8004ace <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f839 	bl	8004ad6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3304      	adds	r3, #4
 8004a74:	4619      	mov	r1, r3
 8004a76:	4610      	mov	r0, r2
 8004a78:	f000 fc2a 	bl	80052d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e041      	b.n	8004b7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f839 	bl	8004b86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f000 fbd2 	bl	80052d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr

08004b98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <HAL_TIM_PWM_Start+0x24>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	e022      	b.n	8004c02 <HAL_TIM_PWM_Start+0x6a>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d109      	bne.n	8004bd6 <HAL_TIM_PWM_Start+0x3e>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	bf14      	ite	ne
 8004bce:	2301      	movne	r3, #1
 8004bd0:	2300      	moveq	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	e015      	b.n	8004c02 <HAL_TIM_PWM_Start+0x6a>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d109      	bne.n	8004bf0 <HAL_TIM_PWM_Start+0x58>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	bf14      	ite	ne
 8004be8:	2301      	movne	r3, #1
 8004bea:	2300      	moveq	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	e008      	b.n	8004c02 <HAL_TIM_PWM_Start+0x6a>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	bf14      	ite	ne
 8004bfc:	2301      	movne	r3, #1
 8004bfe:	2300      	moveq	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e05e      	b.n	8004cc8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d104      	bne.n	8004c1a <HAL_TIM_PWM_Start+0x82>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c18:	e013      	b.n	8004c42 <HAL_TIM_PWM_Start+0xaa>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d104      	bne.n	8004c2a <HAL_TIM_PWM_Start+0x92>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c28:	e00b      	b.n	8004c42 <HAL_TIM_PWM_Start+0xaa>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d104      	bne.n	8004c3a <HAL_TIM_PWM_Start+0xa2>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c38:	e003      	b.n	8004c42 <HAL_TIM_PWM_Start+0xaa>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2201      	movs	r2, #1
 8004c48:	6839      	ldr	r1, [r7, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fdcc 	bl	80057e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd0 <HAL_TIM_PWM_Start+0x138>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d107      	bne.n	8004c6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a18      	ldr	r2, [pc, #96]	@ (8004cd0 <HAL_TIM_PWM_Start+0x138>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00e      	beq.n	8004c92 <HAL_TIM_PWM_Start+0xfa>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c7c:	d009      	beq.n	8004c92 <HAL_TIM_PWM_Start+0xfa>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a14      	ldr	r2, [pc, #80]	@ (8004cd4 <HAL_TIM_PWM_Start+0x13c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <HAL_TIM_PWM_Start+0xfa>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a12      	ldr	r2, [pc, #72]	@ (8004cd8 <HAL_TIM_PWM_Start+0x140>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d111      	bne.n	8004cb6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b06      	cmp	r3, #6
 8004ca2:	d010      	beq.n	8004cc6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb4:	e007      	b.n	8004cc6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f042 0201 	orr.w	r2, r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40012c00 	.word	0x40012c00
 8004cd4:	40000400 	.word	0x40000400
 8004cd8:	40000800 	.word	0x40000800

08004cdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d020      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01b      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0202 	mvn.w	r2, #2
 8004d10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fab6 	bl	8005298 <HAL_TIM_IC_CaptureCallback>
 8004d2c:	e005      	b.n	8004d3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 faa9 	bl	8005286 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fab8 	bl	80052aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d020      	beq.n	8004d8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01b      	beq.n	8004d8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0204 	mvn.w	r2, #4
 8004d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2202      	movs	r2, #2
 8004d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fa90 	bl	8005298 <HAL_TIM_IC_CaptureCallback>
 8004d78:	e005      	b.n	8004d86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fa83 	bl	8005286 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fa92 	bl	80052aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d020      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01b      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0208 	mvn.w	r2, #8
 8004da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2204      	movs	r2, #4
 8004dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fa6a 	bl	8005298 <HAL_TIM_IC_CaptureCallback>
 8004dc4:	e005      	b.n	8004dd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fa5d 	bl	8005286 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fa6c 	bl	80052aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f003 0310 	and.w	r3, r3, #16
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d020      	beq.n	8004e24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01b      	beq.n	8004e24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0210 	mvn.w	r2, #16
 8004df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2208      	movs	r2, #8
 8004dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fa44 	bl	8005298 <HAL_TIM_IC_CaptureCallback>
 8004e10:	e005      	b.n	8004e1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fa37 	bl	8005286 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fa46 	bl	80052aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00c      	beq.n	8004e48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f06f 0201 	mvn.w	r2, #1
 8004e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fd f834 	bl	8001eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00c      	beq.n	8004e6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fd49 	bl	80058fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00c      	beq.n	8004e90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d007      	beq.n	8004e90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fa16 	bl	80052bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00c      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0220 	mvn.w	r2, #32
 8004eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fd1c 	bl	80058ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_TIM_OC_ConfigChannel+0x1e>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e048      	b.n	8004f6c <HAL_TIM_OC_ConfigChannel+0xb0>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b0c      	cmp	r3, #12
 8004ee6:	d839      	bhi.n	8004f5c <HAL_TIM_OC_ConfigChannel+0xa0>
 8004ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eee:	bf00      	nop
 8004ef0:	08004f25 	.word	0x08004f25
 8004ef4:	08004f5d 	.word	0x08004f5d
 8004ef8:	08004f5d 	.word	0x08004f5d
 8004efc:	08004f5d 	.word	0x08004f5d
 8004f00:	08004f33 	.word	0x08004f33
 8004f04:	08004f5d 	.word	0x08004f5d
 8004f08:	08004f5d 	.word	0x08004f5d
 8004f0c:	08004f5d 	.word	0x08004f5d
 8004f10:	08004f41 	.word	0x08004f41
 8004f14:	08004f5d 	.word	0x08004f5d
 8004f18:	08004f5d 	.word	0x08004f5d
 8004f1c:	08004f5d 	.word	0x08004f5d
 8004f20:	08004f4f 	.word	0x08004f4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fa3e 	bl	80053ac <TIM_OC1_SetConfig>
      break;
 8004f30:	e017      	b.n	8004f62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fa9d 	bl	8005478 <TIM_OC2_SetConfig>
      break;
 8004f3e:	e010      	b.n	8004f62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fb00 	bl	800554c <TIM_OC3_SetConfig>
      break;
 8004f4c:	e009      	b.n	8004f62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fb63 	bl	8005620 <TIM_OC4_SetConfig>
      break;
 8004f5a:	e002      	b.n	8004f62 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e0ae      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b0c      	cmp	r3, #12
 8004f9e:	f200 809f 	bhi.w	80050e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa8:	08004fdd 	.word	0x08004fdd
 8004fac:	080050e1 	.word	0x080050e1
 8004fb0:	080050e1 	.word	0x080050e1
 8004fb4:	080050e1 	.word	0x080050e1
 8004fb8:	0800501d 	.word	0x0800501d
 8004fbc:	080050e1 	.word	0x080050e1
 8004fc0:	080050e1 	.word	0x080050e1
 8004fc4:	080050e1 	.word	0x080050e1
 8004fc8:	0800505f 	.word	0x0800505f
 8004fcc:	080050e1 	.word	0x080050e1
 8004fd0:	080050e1 	.word	0x080050e1
 8004fd4:	080050e1 	.word	0x080050e1
 8004fd8:	0800509f 	.word	0x0800509f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68b9      	ldr	r1, [r7, #8]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 f9e2 	bl	80053ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699a      	ldr	r2, [r3, #24]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0208 	orr.w	r2, r2, #8
 8004ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699a      	ldr	r2, [r3, #24]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0204 	bic.w	r2, r2, #4
 8005006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6999      	ldr	r1, [r3, #24]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	619a      	str	r2, [r3, #24]
      break;
 800501a:	e064      	b.n	80050e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fa28 	bl	8005478 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699a      	ldr	r2, [r3, #24]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6999      	ldr	r1, [r3, #24]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	021a      	lsls	r2, r3, #8
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	619a      	str	r2, [r3, #24]
      break;
 800505c:	e043      	b.n	80050e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fa71 	bl	800554c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69da      	ldr	r2, [r3, #28]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0208 	orr.w	r2, r2, #8
 8005078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0204 	bic.w	r2, r2, #4
 8005088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69d9      	ldr	r1, [r3, #28]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	61da      	str	r2, [r3, #28]
      break;
 800509c:	e023      	b.n	80050e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fabb 	bl	8005620 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69da      	ldr	r2, [r3, #28]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69da      	ldr	r2, [r3, #28]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69d9      	ldr	r1, [r3, #28]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	021a      	lsls	r2, r3, #8
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	61da      	str	r2, [r3, #28]
      break;
 80050de:	e002      	b.n	80050e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	75fb      	strb	r3, [r7, #23]
      break;
 80050e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_TIM_ConfigClockSource+0x1c>
 8005110:	2302      	movs	r3, #2
 8005112:	e0b4      	b.n	800527e <HAL_TIM_ConfigClockSource+0x186>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800513a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800514c:	d03e      	beq.n	80051cc <HAL_TIM_ConfigClockSource+0xd4>
 800514e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005152:	f200 8087 	bhi.w	8005264 <HAL_TIM_ConfigClockSource+0x16c>
 8005156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800515a:	f000 8086 	beq.w	800526a <HAL_TIM_ConfigClockSource+0x172>
 800515e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005162:	d87f      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x16c>
 8005164:	2b70      	cmp	r3, #112	@ 0x70
 8005166:	d01a      	beq.n	800519e <HAL_TIM_ConfigClockSource+0xa6>
 8005168:	2b70      	cmp	r3, #112	@ 0x70
 800516a:	d87b      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x16c>
 800516c:	2b60      	cmp	r3, #96	@ 0x60
 800516e:	d050      	beq.n	8005212 <HAL_TIM_ConfigClockSource+0x11a>
 8005170:	2b60      	cmp	r3, #96	@ 0x60
 8005172:	d877      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x16c>
 8005174:	2b50      	cmp	r3, #80	@ 0x50
 8005176:	d03c      	beq.n	80051f2 <HAL_TIM_ConfigClockSource+0xfa>
 8005178:	2b50      	cmp	r3, #80	@ 0x50
 800517a:	d873      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x16c>
 800517c:	2b40      	cmp	r3, #64	@ 0x40
 800517e:	d058      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x13a>
 8005180:	2b40      	cmp	r3, #64	@ 0x40
 8005182:	d86f      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x16c>
 8005184:	2b30      	cmp	r3, #48	@ 0x30
 8005186:	d064      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x15a>
 8005188:	2b30      	cmp	r3, #48	@ 0x30
 800518a:	d86b      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x16c>
 800518c:	2b20      	cmp	r3, #32
 800518e:	d060      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x15a>
 8005190:	2b20      	cmp	r3, #32
 8005192:	d867      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x16c>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d05c      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x15a>
 8005198:	2b10      	cmp	r3, #16
 800519a:	d05a      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x15a>
 800519c:	e062      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051ae:	f000 fafc 	bl	80057aa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	609a      	str	r2, [r3, #8]
      break;
 80051ca:	e04f      	b.n	800526c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051dc:	f000 fae5 	bl	80057aa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051ee:	609a      	str	r2, [r3, #8]
      break;
 80051f0:	e03c      	b.n	800526c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fe:	461a      	mov	r2, r3
 8005200:	f000 fa5c 	bl	80056bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2150      	movs	r1, #80	@ 0x50
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fab3 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 8005210:	e02c      	b.n	800526c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800521e:	461a      	mov	r2, r3
 8005220:	f000 fa7a 	bl	8005718 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2160      	movs	r1, #96	@ 0x60
 800522a:	4618      	mov	r0, r3
 800522c:	f000 faa3 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 8005230:	e01c      	b.n	800526c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800523e:	461a      	mov	r2, r3
 8005240:	f000 fa3c 	bl	80056bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2140      	movs	r1, #64	@ 0x40
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fa93 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 8005250:	e00c      	b.n	800526c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4619      	mov	r1, r3
 800525c:	4610      	mov	r0, r2
 800525e:	f000 fa8a 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 8005262:	e003      	b.n	800526c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	73fb      	strb	r3, [r7, #15]
      break;
 8005268:	e000      	b.n	800526c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800526a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800527c:	7bfb      	ldrb	r3, [r7, #15]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr

08005298 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr

080052aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr

080052bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr
	...

080052d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a2f      	ldr	r2, [pc, #188]	@ (80053a0 <TIM_Base_SetConfig+0xd0>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00b      	beq.n	8005300 <TIM_Base_SetConfig+0x30>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ee:	d007      	beq.n	8005300 <TIM_Base_SetConfig+0x30>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a2c      	ldr	r2, [pc, #176]	@ (80053a4 <TIM_Base_SetConfig+0xd4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d003      	beq.n	8005300 <TIM_Base_SetConfig+0x30>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a2b      	ldr	r2, [pc, #172]	@ (80053a8 <TIM_Base_SetConfig+0xd8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d108      	bne.n	8005312 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a22      	ldr	r2, [pc, #136]	@ (80053a0 <TIM_Base_SetConfig+0xd0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00b      	beq.n	8005332 <TIM_Base_SetConfig+0x62>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005320:	d007      	beq.n	8005332 <TIM_Base_SetConfig+0x62>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a1f      	ldr	r2, [pc, #124]	@ (80053a4 <TIM_Base_SetConfig+0xd4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d003      	beq.n	8005332 <TIM_Base_SetConfig+0x62>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a1e      	ldr	r2, [pc, #120]	@ (80053a8 <TIM_Base_SetConfig+0xd8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d108      	bne.n	8005344 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a0d      	ldr	r2, [pc, #52]	@ (80053a0 <TIM_Base_SetConfig+0xd0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d103      	bne.n	8005378 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f023 0201 	bic.w	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	611a      	str	r2, [r3, #16]
  }
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr
 80053a0:	40012c00 	.word	0x40012c00
 80053a4:	40000400 	.word	0x40000400
 80053a8:	40000800 	.word	0x40000800

080053ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	f023 0201 	bic.w	r2, r3, #1
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0303 	bic.w	r3, r3, #3
 80053e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f023 0302 	bic.w	r3, r3, #2
 80053f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a1c      	ldr	r2, [pc, #112]	@ (8005474 <TIM_OC1_SetConfig+0xc8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d10c      	bne.n	8005422 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f023 0308 	bic.w	r3, r3, #8
 800540e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f023 0304 	bic.w	r3, r3, #4
 8005420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a13      	ldr	r2, [pc, #76]	@ (8005474 <TIM_OC1_SetConfig+0xc8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d111      	bne.n	800544e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	621a      	str	r2, [r3, #32]
}
 8005468:	bf00      	nop
 800546a:	371c      	adds	r7, #28
 800546c:	46bd      	mov	sp, r7
 800546e:	bc80      	pop	{r7}
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40012c00 	.word	0x40012c00

08005478 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	f023 0210 	bic.w	r2, r3, #16
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f023 0320 	bic.w	r3, r3, #32
 80054c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005548 <TIM_OC2_SetConfig+0xd0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d10d      	bne.n	80054f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a14      	ldr	r2, [pc, #80]	@ (8005548 <TIM_OC2_SetConfig+0xd0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d113      	bne.n	8005524 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005502:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800550a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	4313      	orrs	r3, r2
 8005522:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	621a      	str	r2, [r3, #32]
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr
 8005548:	40012c00 	.word	0x40012c00

0800554c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800557a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0303 	bic.w	r3, r3, #3
 8005582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	021b      	lsls	r3, r3, #8
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a1d      	ldr	r2, [pc, #116]	@ (800561c <TIM_OC3_SetConfig+0xd0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d10d      	bne.n	80055c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a14      	ldr	r2, [pc, #80]	@ (800561c <TIM_OC3_SetConfig+0xd0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d113      	bne.n	80055f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	621a      	str	r2, [r3, #32]
}
 8005610:	bf00      	nop
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40012c00 	.word	0x40012c00

08005620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800564e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	021b      	lsls	r3, r3, #8
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800566a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	031b      	lsls	r3, r3, #12
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a0f      	ldr	r2, [pc, #60]	@ (80056b8 <TIM_OC4_SetConfig+0x98>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d109      	bne.n	8005694 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005686:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	019b      	lsls	r3, r3, #6
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	621a      	str	r2, [r3, #32]
}
 80056ae:	bf00      	nop
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr
 80056b8:	40012c00 	.word	0x40012c00

080056bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f023 0201 	bic.w	r2, r3, #1
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f023 030a 	bic.w	r3, r3, #10
 80056f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr

08005718 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f023 0210 	bic.w	r2, r3, #16
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	031b      	lsls	r3, r3, #12
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005754:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	621a      	str	r2, [r3, #32]
}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	bc80      	pop	{r7}
 8005774:	4770      	bx	lr

08005776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005776:	b480      	push	{r7}
 8005778:	b085      	sub	sp, #20
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800578c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	f043 0307 	orr.w	r3, r3, #7
 8005798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	609a      	str	r2, [r3, #8]
}
 80057a0:	bf00      	nop
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bc80      	pop	{r7}
 80057a8:	4770      	bx	lr

080057aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b087      	sub	sp, #28
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
 80057b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	021a      	lsls	r2, r3, #8
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	431a      	orrs	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	609a      	str	r2, [r3, #8]
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bc80      	pop	{r7}
 80057e6:	4770      	bx	lr

080057e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f003 031f 	and.w	r3, r3, #31
 80057fa:	2201      	movs	r2, #1
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a1a      	ldr	r2, [r3, #32]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	43db      	mvns	r3, r3
 800580a:	401a      	ands	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a1a      	ldr	r2, [r3, #32]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f003 031f 	and.w	r3, r3, #31
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	fa01 f303 	lsl.w	r3, r1, r3
 8005820:	431a      	orrs	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	bc80      	pop	{r7}
 800582e:	4770      	bx	lr

08005830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005844:	2302      	movs	r3, #2
 8005846:	e046      	b.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800586e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a16      	ldr	r2, [pc, #88]	@ (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d00e      	beq.n	80058aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005894:	d009      	beq.n	80058aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a12      	ldr	r2, [pc, #72]	@ (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d004      	beq.n	80058aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a10      	ldr	r2, [pc, #64]	@ (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d10c      	bne.n	80058c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr
 80058e0:	40012c00 	.word	0x40012c00
 80058e4:	40000400 	.word	0x40000400
 80058e8:	40000800 	.word	0x40000800

080058ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr

080058fe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	bc80      	pop	{r7}
 800590e:	4770      	bx	lr

08005910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e042      	b.n	80059a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fc fef2 	bl	8002720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2224      	movs	r2, #36	@ 0x24
 8005940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fdb7 	bl	80064c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695a      	ldr	r2, [r3, #20]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b08a      	sub	sp, #40	@ 0x28
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	4613      	mov	r3, r2
 80059be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	d175      	bne.n	8005abc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_UART_Transmit+0x2c>
 80059d6:	88fb      	ldrh	r3, [r7, #6]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e06e      	b.n	8005abe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2221      	movs	r2, #33	@ 0x21
 80059ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059ee:	f7fc ff69 	bl	80028c4 <HAL_GetTick>
 80059f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	88fa      	ldrh	r2, [r7, #6]
 80059f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	88fa      	ldrh	r2, [r7, #6]
 80059fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a08:	d108      	bne.n	8005a1c <HAL_UART_Transmit+0x6c>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d104      	bne.n	8005a1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	61bb      	str	r3, [r7, #24]
 8005a1a:	e003      	b.n	8005a24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a24:	e02e      	b.n	8005a84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2180      	movs	r1, #128	@ 0x80
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 fb1c 	bl	800606e <UART_WaitOnFlagUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e03a      	b.n	8005abe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10b      	bne.n	8005a66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	3302      	adds	r3, #2
 8005a62:	61bb      	str	r3, [r7, #24]
 8005a64:	e007      	b.n	8005a76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	781a      	ldrb	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	3301      	adds	r3, #1
 8005a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1cb      	bne.n	8005a26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2200      	movs	r2, #0
 8005a96:	2140      	movs	r1, #64	@ 0x40
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 fae8 	bl	800606e <UART_WaitOnFlagUntilTimeout>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d005      	beq.n	8005ab0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e006      	b.n	8005abe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	e000      	b.n	8005abe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005abc:	2302      	movs	r3, #2
  }
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3720      	adds	r7, #32
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d112      	bne.n	8005b06 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <HAL_UART_Receive_IT+0x26>
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e00b      	b.n	8005b08 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005af6:	88fb      	ldrh	r3, [r7, #6]
 8005af8:	461a      	mov	r2, r3
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 fb0f 	bl	8006120 <UART_Start_Receive_IT>
 8005b02:	4603      	mov	r3, r0
 8005b04:	e000      	b.n	8005b08 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005b06:	2302      	movs	r3, #2
  }
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b0ba      	sub	sp, #232	@ 0xe8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10f      	bne.n	8005b76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b5a:	f003 0320 	and.w	r3, r3, #32
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d009      	beq.n	8005b76 <HAL_UART_IRQHandler+0x66>
 8005b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fbec 	bl	800634c <UART_Receive_IT>
      return;
 8005b74:	e25b      	b.n	800602e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 80de 	beq.w	8005d3c <HAL_UART_IRQHandler+0x22c>
 8005b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d106      	bne.n	8005b9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 80d1 	beq.w	8005d3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00b      	beq.n	8005bbe <HAL_UART_IRQHandler+0xae>
 8005ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d005      	beq.n	8005bbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb6:	f043 0201 	orr.w	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bc2:	f003 0304 	and.w	r3, r3, #4
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00b      	beq.n	8005be2 <HAL_UART_IRQHandler+0xd2>
 8005bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bda:	f043 0202 	orr.w	r2, r3, #2
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00b      	beq.n	8005c06 <HAL_UART_IRQHandler+0xf6>
 8005bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d005      	beq.n	8005c06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfe:	f043 0204 	orr.w	r2, r3, #4
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d011      	beq.n	8005c36 <HAL_UART_IRQHandler+0x126>
 8005c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d105      	bne.n	8005c2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2e:	f043 0208 	orr.w	r2, r3, #8
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 81f2 	beq.w	8006024 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c44:	f003 0320 	and.w	r3, r3, #32
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <HAL_UART_IRQHandler+0x14e>
 8005c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c50:	f003 0320 	and.w	r3, r3, #32
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fb77 	bl	800634c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	bf14      	ite	ne
 8005c6c:	2301      	movne	r3, #1
 8005c6e:	2300      	moveq	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d103      	bne.n	8005c8a <HAL_UART_IRQHandler+0x17a>
 8005c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d04f      	beq.n	8005d2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fa81 	bl	8006192 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d041      	beq.n	8005d22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3314      	adds	r3, #20
 8005ca4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005cb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3314      	adds	r3, #20
 8005cc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005cca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005cce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005cd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1d9      	bne.n	8005c9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d013      	beq.n	8005d1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ef0 <HAL_UART_IRQHandler+0x3e0>)
 8005cf8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fc ff56 	bl	8002bb0 <HAL_DMA_Abort_IT>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d016      	beq.n	8005d38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005d14:	4610      	mov	r0, r2
 8005d16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d18:	e00e      	b.n	8005d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f993 	bl	8006046 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d20:	e00a      	b.n	8005d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f98f 	bl	8006046 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d28:	e006      	b.n	8005d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f98b 	bl	8006046 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005d36:	e175      	b.n	8006024 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d38:	bf00      	nop
    return;
 8005d3a:	e173      	b.n	8006024 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	f040 814f 	bne.w	8005fe4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d4a:	f003 0310 	and.w	r3, r3, #16
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 8148 	beq.w	8005fe4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d58:	f003 0310 	and.w	r3, r3, #16
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 8141 	beq.w	8005fe4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d62:	2300      	movs	r3, #0
 8005d64:	60bb      	str	r3, [r7, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60bb      	str	r3, [r7, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	60bb      	str	r3, [r7, #8]
 8005d76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 80b6 	beq.w	8005ef4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 8145 	beq.w	8006028 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005da2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005da6:	429a      	cmp	r2, r3
 8005da8:	f080 813e 	bcs.w	8006028 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005db2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	f000 8088 	beq.w	8005ed0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005dce:	e853 3f00 	ldrex	r3, [r3]
 8005dd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005dd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	330c      	adds	r3, #12
 8005de8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005dec:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005df0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005df8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1d9      	bne.n	8005dc0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3314      	adds	r3, #20
 8005e12:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e1e:	f023 0301 	bic.w	r3, r3, #1
 8005e22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3314      	adds	r3, #20
 8005e2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e30:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005e34:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e36:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e38:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005e3c:	e841 2300 	strex	r3, r2, [r1]
 8005e40:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005e42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e1      	bne.n	8005e0c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3314      	adds	r3, #20
 8005e4e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005e58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3314      	adds	r3, #20
 8005e68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005e6c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e6e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e72:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e3      	bne.n	8005e48 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	330c      	adds	r3, #12
 8005e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ea0:	f023 0310 	bic.w	r3, r3, #16
 8005ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	330c      	adds	r3, #12
 8005eae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005eb2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005eb4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005eb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ec0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e3      	bne.n	8005e8e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fc fe35 	bl	8002b3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f8b6 	bl	8006058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005eec:	e09c      	b.n	8006028 <HAL_UART_IRQHandler+0x518>
 8005eee:	bf00      	nop
 8005ef0:	08006257 	.word	0x08006257
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 808e 	beq.w	800602c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 8089 	beq.w	800602c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	330c      	adds	r3, #12
 8005f20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	330c      	adds	r3, #12
 8005f3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005f3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e3      	bne.n	8005f1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3314      	adds	r3, #20
 8005f58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	623b      	str	r3, [r7, #32]
   return(result);
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	f023 0301 	bic.w	r3, r3, #1
 8005f68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3314      	adds	r3, #20
 8005f72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f76:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e3      	bne.n	8005f52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	e853 3f00 	ldrex	r3, [r3]
 8005fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 0310 	bic.w	r3, r3, #16
 8005fae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	330c      	adds	r3, #12
 8005fb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005fbc:	61fa      	str	r2, [r7, #28]
 8005fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	69b9      	ldr	r1, [r7, #24]
 8005fc2:	69fa      	ldr	r2, [r7, #28]
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e3      	bne.n	8005f98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f83b 	bl	8006058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fe2:	e023      	b.n	800602c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d009      	beq.n	8006004 <HAL_UART_IRQHandler+0x4f4>
 8005ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f93e 	bl	800627e <UART_Transmit_IT>
    return;
 8006002:	e014      	b.n	800602e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00e      	beq.n	800602e <HAL_UART_IRQHandler+0x51e>
 8006010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	d008      	beq.n	800602e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f97d 	bl	800631c <UART_EndTransmit_IT>
    return;
 8006022:	e004      	b.n	800602e <HAL_UART_IRQHandler+0x51e>
    return;
 8006024:	bf00      	nop
 8006026:	e002      	b.n	800602e <HAL_UART_IRQHandler+0x51e>
      return;
 8006028:	bf00      	nop
 800602a:	e000      	b.n	800602e <HAL_UART_IRQHandler+0x51e>
      return;
 800602c:	bf00      	nop
  }
}
 800602e:	37e8      	adds	r7, #232	@ 0xe8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr

08006046 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800604e:	bf00      	nop
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	bc80      	pop	{r7}
 8006056:	4770      	bx	lr

08006058 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	bc80      	pop	{r7}
 800606c:	4770      	bx	lr

0800606e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b086      	sub	sp, #24
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	603b      	str	r3, [r7, #0]
 800607a:	4613      	mov	r3, r2
 800607c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800607e:	e03b      	b.n	80060f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006086:	d037      	beq.n	80060f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006088:	f7fc fc1c 	bl	80028c4 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	6a3a      	ldr	r2, [r7, #32]
 8006094:	429a      	cmp	r2, r3
 8006096:	d302      	bcc.n	800609e <UART_WaitOnFlagUntilTimeout+0x30>
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e03a      	b.n	8006118 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d023      	beq.n	80060f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b80      	cmp	r3, #128	@ 0x80
 80060b4:	d020      	beq.n	80060f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b40      	cmp	r3, #64	@ 0x40
 80060ba:	d01d      	beq.n	80060f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d116      	bne.n	80060f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80060ca:	2300      	movs	r3, #0
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 f856 	bl	8006192 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2208      	movs	r2, #8
 80060ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e00f      	b.n	8006118 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	4013      	ands	r3, r2
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	429a      	cmp	r2, r3
 8006106:	bf0c      	ite	eq
 8006108:	2301      	moveq	r3, #1
 800610a:	2300      	movne	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	461a      	mov	r2, r3
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	429a      	cmp	r2, r3
 8006114:	d0b4      	beq.n	8006080 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	4613      	mov	r3, r2
 800612c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	88fa      	ldrh	r2, [r7, #6]
 8006138:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	88fa      	ldrh	r2, [r7, #6]
 800613e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2222      	movs	r2, #34	@ 0x22
 800614a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d007      	beq.n	8006166 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006164:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	695a      	ldr	r2, [r3, #20]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0201 	orr.w	r2, r2, #1
 8006174:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f042 0220 	orr.w	r2, r2, #32
 8006184:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	bc80      	pop	{r7}
 8006190:	4770      	bx	lr

08006192 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006192:	b480      	push	{r7}
 8006194:	b095      	sub	sp, #84	@ 0x54
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	330c      	adds	r3, #12
 80061a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	330c      	adds	r3, #12
 80061b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061ba:	643a      	str	r2, [r7, #64]	@ 0x40
 80061bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e5      	bne.n	800619a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3314      	adds	r3, #20
 80061d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	f023 0301 	bic.w	r3, r3, #1
 80061e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3314      	adds	r3, #20
 80061ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e5      	bne.n	80061ce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006206:	2b01      	cmp	r3, #1
 8006208:	d119      	bne.n	800623e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	330c      	adds	r3, #12
 8006210:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	60bb      	str	r3, [r7, #8]
   return(result);
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f023 0310 	bic.w	r3, r3, #16
 8006220:	647b      	str	r3, [r7, #68]	@ 0x44
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	330c      	adds	r3, #12
 8006228:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800622a:	61ba      	str	r2, [r7, #24]
 800622c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6979      	ldr	r1, [r7, #20]
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	613b      	str	r3, [r7, #16]
   return(result);
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e5      	bne.n	800620a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800624c:	bf00      	nop
 800624e:	3754      	adds	r7, #84	@ 0x54
 8006250:	46bd      	mov	sp, r7
 8006252:	bc80      	pop	{r7}
 8006254:	4770      	bx	lr

08006256 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006262:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f7ff fee8 	bl	8006046 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006276:	bf00      	nop
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800627e:	b480      	push	{r7}
 8006280:	b085      	sub	sp, #20
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b21      	cmp	r3, #33	@ 0x21
 8006290:	d13e      	bne.n	8006310 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800629a:	d114      	bne.n	80062c6 <UART_Transmit_IT+0x48>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d110      	bne.n	80062c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	1c9a      	adds	r2, r3, #2
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	621a      	str	r2, [r3, #32]
 80062c4:	e008      	b.n	80062d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	1c59      	adds	r1, r3, #1
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6211      	str	r1, [r2, #32]
 80062d0:	781a      	ldrb	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062dc:	b29b      	uxth	r3, r3
 80062de:	3b01      	subs	r3, #1
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	4619      	mov	r1, r3
 80062e6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10f      	bne.n	800630c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800630a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	e000      	b.n	8006312 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006310:	2302      	movs	r3, #2
  }
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	bc80      	pop	{r7}
 800631a:	4770      	bx	lr

0800631c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006332:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7ff fe79 	bl	8006034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b08c      	sub	sp, #48	@ 0x30
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b22      	cmp	r3, #34	@ 0x22
 800635e:	f040 80ae 	bne.w	80064be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800636a:	d117      	bne.n	800639c <UART_Receive_IT+0x50>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d113      	bne.n	800639c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006374:	2300      	movs	r3, #0
 8006376:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	b29b      	uxth	r3, r3
 8006386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638a:	b29a      	uxth	r2, r3
 800638c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006394:	1c9a      	adds	r2, r3, #2
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	629a      	str	r2, [r3, #40]	@ 0x28
 800639a:	e026      	b.n	80063ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80063a2:	2300      	movs	r3, #0
 80063a4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ae:	d007      	beq.n	80063c0 <UART_Receive_IT+0x74>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10a      	bne.n	80063ce <UART_Receive_IT+0x82>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d106      	bne.n	80063ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ca:	701a      	strb	r2, [r3, #0]
 80063cc:	e008      	b.n	80063e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e4:	1c5a      	adds	r2, r3, #1
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	4619      	mov	r1, r3
 80063f8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d15d      	bne.n	80064ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0220 	bic.w	r2, r2, #32
 800640c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800641c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	695a      	ldr	r2, [r3, #20]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0201 	bic.w	r2, r2, #1
 800642c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2220      	movs	r2, #32
 8006432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006440:	2b01      	cmp	r3, #1
 8006442:	d135      	bne.n	80064b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	330c      	adds	r3, #12
 8006450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	e853 3f00 	ldrex	r3, [r3]
 8006458:	613b      	str	r3, [r7, #16]
   return(result);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f023 0310 	bic.w	r3, r3, #16
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	330c      	adds	r3, #12
 8006468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800646a:	623a      	str	r2, [r7, #32]
 800646c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	69f9      	ldr	r1, [r7, #28]
 8006470:	6a3a      	ldr	r2, [r7, #32]
 8006472:	e841 2300 	strex	r3, r2, [r1]
 8006476:	61bb      	str	r3, [r7, #24]
   return(result);
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1e5      	bne.n	800644a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0310 	and.w	r3, r3, #16
 8006488:	2b10      	cmp	r3, #16
 800648a:	d10a      	bne.n	80064a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064a6:	4619      	mov	r1, r3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff fdd5 	bl	8006058 <HAL_UARTEx_RxEventCallback>
 80064ae:	e002      	b.n	80064b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7fb fd19 	bl	8001ee8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e002      	b.n	80064c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e000      	b.n	80064c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80064be:	2302      	movs	r3, #2
  }
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3730      	adds	r7, #48	@ 0x30
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689a      	ldr	r2, [r3, #8]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	431a      	orrs	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006502:	f023 030c 	bic.w	r3, r3, #12
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6812      	ldr	r2, [r2, #0]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	430b      	orrs	r3, r1
 800650e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699a      	ldr	r2, [r3, #24]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a2c      	ldr	r2, [pc, #176]	@ (80065dc <UART_SetConfig+0x114>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d103      	bne.n	8006538 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006530:	f7fe f9ae 	bl	8004890 <HAL_RCC_GetPCLK2Freq>
 8006534:	60f8      	str	r0, [r7, #12]
 8006536:	e002      	b.n	800653e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006538:	f7fe f996 	bl	8004868 <HAL_RCC_GetPCLK1Freq>
 800653c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	009a      	lsls	r2, r3, #2
 8006548:	441a      	add	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	fbb2 f3f3 	udiv	r3, r2, r3
 8006554:	4a22      	ldr	r2, [pc, #136]	@ (80065e0 <UART_SetConfig+0x118>)
 8006556:	fba2 2303 	umull	r2, r3, r2, r3
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	0119      	lsls	r1, r3, #4
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	009a      	lsls	r2, r3, #2
 8006568:	441a      	add	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	fbb2 f2f3 	udiv	r2, r2, r3
 8006574:	4b1a      	ldr	r3, [pc, #104]	@ (80065e0 <UART_SetConfig+0x118>)
 8006576:	fba3 0302 	umull	r0, r3, r3, r2
 800657a:	095b      	lsrs	r3, r3, #5
 800657c:	2064      	movs	r0, #100	@ 0x64
 800657e:	fb00 f303 	mul.w	r3, r0, r3
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	3332      	adds	r3, #50	@ 0x32
 8006588:	4a15      	ldr	r2, [pc, #84]	@ (80065e0 <UART_SetConfig+0x118>)
 800658a:	fba2 2303 	umull	r2, r3, r2, r3
 800658e:	095b      	lsrs	r3, r3, #5
 8006590:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006594:	4419      	add	r1, r3
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4613      	mov	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	009a      	lsls	r2, r3, #2
 80065a0:	441a      	add	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80065ac:	4b0c      	ldr	r3, [pc, #48]	@ (80065e0 <UART_SetConfig+0x118>)
 80065ae:	fba3 0302 	umull	r0, r3, r3, r2
 80065b2:	095b      	lsrs	r3, r3, #5
 80065b4:	2064      	movs	r0, #100	@ 0x64
 80065b6:	fb00 f303 	mul.w	r3, r0, r3
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	011b      	lsls	r3, r3, #4
 80065be:	3332      	adds	r3, #50	@ 0x32
 80065c0:	4a07      	ldr	r2, [pc, #28]	@ (80065e0 <UART_SetConfig+0x118>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	095b      	lsrs	r3, r3, #5
 80065c8:	f003 020f 	and.w	r2, r3, #15
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	440a      	add	r2, r1
 80065d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80065d4:	bf00      	nop
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	40013800 	.word	0x40013800
 80065e0:	51eb851f 	.word	0x51eb851f

080065e4 <__itoa>:
 80065e4:	1e93      	subs	r3, r2, #2
 80065e6:	2b22      	cmp	r3, #34	@ 0x22
 80065e8:	b510      	push	{r4, lr}
 80065ea:	460c      	mov	r4, r1
 80065ec:	d904      	bls.n	80065f8 <__itoa+0x14>
 80065ee:	2300      	movs	r3, #0
 80065f0:	461c      	mov	r4, r3
 80065f2:	700b      	strb	r3, [r1, #0]
 80065f4:	4620      	mov	r0, r4
 80065f6:	bd10      	pop	{r4, pc}
 80065f8:	2a0a      	cmp	r2, #10
 80065fa:	d109      	bne.n	8006610 <__itoa+0x2c>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	da07      	bge.n	8006610 <__itoa+0x2c>
 8006600:	232d      	movs	r3, #45	@ 0x2d
 8006602:	700b      	strb	r3, [r1, #0]
 8006604:	2101      	movs	r1, #1
 8006606:	4240      	negs	r0, r0
 8006608:	4421      	add	r1, r4
 800660a:	f000 fe59 	bl	80072c0 <__utoa>
 800660e:	e7f1      	b.n	80065f4 <__itoa+0x10>
 8006610:	2100      	movs	r1, #0
 8006612:	e7f9      	b.n	8006608 <__itoa+0x24>

08006614 <itoa>:
 8006614:	f7ff bfe6 	b.w	80065e4 <__itoa>

08006618 <sulp>:
 8006618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800661c:	460f      	mov	r7, r1
 800661e:	4690      	mov	r8, r2
 8006620:	f001 fff0 	bl	8008604 <__ulp>
 8006624:	4604      	mov	r4, r0
 8006626:	460d      	mov	r5, r1
 8006628:	f1b8 0f00 	cmp.w	r8, #0
 800662c:	d011      	beq.n	8006652 <sulp+0x3a>
 800662e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006632:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006636:	2b00      	cmp	r3, #0
 8006638:	dd0b      	ble.n	8006652 <sulp+0x3a>
 800663a:	2400      	movs	r4, #0
 800663c:	051b      	lsls	r3, r3, #20
 800663e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006642:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006646:	4622      	mov	r2, r4
 8006648:	462b      	mov	r3, r5
 800664a:	f7f9 ff45 	bl	80004d8 <__aeabi_dmul>
 800664e:	4604      	mov	r4, r0
 8006650:	460d      	mov	r5, r1
 8006652:	4620      	mov	r0, r4
 8006654:	4629      	mov	r1, r5
 8006656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800665a:	0000      	movs	r0, r0
 800665c:	0000      	movs	r0, r0
	...

08006660 <_strtod_l>:
 8006660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006664:	b09f      	sub	sp, #124	@ 0x7c
 8006666:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006668:	2200      	movs	r2, #0
 800666a:	460c      	mov	r4, r1
 800666c:	921a      	str	r2, [sp, #104]	@ 0x68
 800666e:	f04f 0a00 	mov.w	sl, #0
 8006672:	f04f 0b00 	mov.w	fp, #0
 8006676:	460a      	mov	r2, r1
 8006678:	9005      	str	r0, [sp, #20]
 800667a:	9219      	str	r2, [sp, #100]	@ 0x64
 800667c:	7811      	ldrb	r1, [r2, #0]
 800667e:	292b      	cmp	r1, #43	@ 0x2b
 8006680:	d048      	beq.n	8006714 <_strtod_l+0xb4>
 8006682:	d836      	bhi.n	80066f2 <_strtod_l+0x92>
 8006684:	290d      	cmp	r1, #13
 8006686:	d830      	bhi.n	80066ea <_strtod_l+0x8a>
 8006688:	2908      	cmp	r1, #8
 800668a:	d830      	bhi.n	80066ee <_strtod_l+0x8e>
 800668c:	2900      	cmp	r1, #0
 800668e:	d039      	beq.n	8006704 <_strtod_l+0xa4>
 8006690:	2200      	movs	r2, #0
 8006692:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006694:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006696:	782a      	ldrb	r2, [r5, #0]
 8006698:	2a30      	cmp	r2, #48	@ 0x30
 800669a:	f040 80b1 	bne.w	8006800 <_strtod_l+0x1a0>
 800669e:	786a      	ldrb	r2, [r5, #1]
 80066a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80066a4:	2a58      	cmp	r2, #88	@ 0x58
 80066a6:	d16c      	bne.n	8006782 <_strtod_l+0x122>
 80066a8:	9302      	str	r3, [sp, #8]
 80066aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066ac:	4a8e      	ldr	r2, [pc, #568]	@ (80068e8 <_strtod_l+0x288>)
 80066ae:	9301      	str	r3, [sp, #4]
 80066b0:	ab1a      	add	r3, sp, #104	@ 0x68
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	9805      	ldr	r0, [sp, #20]
 80066b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80066b8:	a919      	add	r1, sp, #100	@ 0x64
 80066ba:	f001 f89f 	bl	80077fc <__gethex>
 80066be:	f010 060f 	ands.w	r6, r0, #15
 80066c2:	4604      	mov	r4, r0
 80066c4:	d005      	beq.n	80066d2 <_strtod_l+0x72>
 80066c6:	2e06      	cmp	r6, #6
 80066c8:	d126      	bne.n	8006718 <_strtod_l+0xb8>
 80066ca:	2300      	movs	r3, #0
 80066cc:	3501      	adds	r5, #1
 80066ce:	9519      	str	r5, [sp, #100]	@ 0x64
 80066d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f040 8584 	bne.w	80071e2 <_strtod_l+0xb82>
 80066da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066dc:	b1bb      	cbz	r3, 800670e <_strtod_l+0xae>
 80066de:	4650      	mov	r0, sl
 80066e0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80066e4:	b01f      	add	sp, #124	@ 0x7c
 80066e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ea:	2920      	cmp	r1, #32
 80066ec:	d1d0      	bne.n	8006690 <_strtod_l+0x30>
 80066ee:	3201      	adds	r2, #1
 80066f0:	e7c3      	b.n	800667a <_strtod_l+0x1a>
 80066f2:	292d      	cmp	r1, #45	@ 0x2d
 80066f4:	d1cc      	bne.n	8006690 <_strtod_l+0x30>
 80066f6:	2101      	movs	r1, #1
 80066f8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80066fa:	1c51      	adds	r1, r2, #1
 80066fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80066fe:	7852      	ldrb	r2, [r2, #1]
 8006700:	2a00      	cmp	r2, #0
 8006702:	d1c7      	bne.n	8006694 <_strtod_l+0x34>
 8006704:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006706:	9419      	str	r4, [sp, #100]	@ 0x64
 8006708:	2b00      	cmp	r3, #0
 800670a:	f040 8568 	bne.w	80071de <_strtod_l+0xb7e>
 800670e:	4650      	mov	r0, sl
 8006710:	4659      	mov	r1, fp
 8006712:	e7e7      	b.n	80066e4 <_strtod_l+0x84>
 8006714:	2100      	movs	r1, #0
 8006716:	e7ef      	b.n	80066f8 <_strtod_l+0x98>
 8006718:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800671a:	b13a      	cbz	r2, 800672c <_strtod_l+0xcc>
 800671c:	2135      	movs	r1, #53	@ 0x35
 800671e:	a81c      	add	r0, sp, #112	@ 0x70
 8006720:	f002 f860 	bl	80087e4 <__copybits>
 8006724:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006726:	9805      	ldr	r0, [sp, #20]
 8006728:	f001 fc3a 	bl	8007fa0 <_Bfree>
 800672c:	3e01      	subs	r6, #1
 800672e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006730:	2e04      	cmp	r6, #4
 8006732:	d806      	bhi.n	8006742 <_strtod_l+0xe2>
 8006734:	e8df f006 	tbb	[pc, r6]
 8006738:	201d0314 	.word	0x201d0314
 800673c:	14          	.byte	0x14
 800673d:	00          	.byte	0x00
 800673e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006742:	05e1      	lsls	r1, r4, #23
 8006744:	bf48      	it	mi
 8006746:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800674a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800674e:	0d1b      	lsrs	r3, r3, #20
 8006750:	051b      	lsls	r3, r3, #20
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1bd      	bne.n	80066d2 <_strtod_l+0x72>
 8006756:	f000 ff5b 	bl	8007610 <__errno>
 800675a:	2322      	movs	r3, #34	@ 0x22
 800675c:	6003      	str	r3, [r0, #0]
 800675e:	e7b8      	b.n	80066d2 <_strtod_l+0x72>
 8006760:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006764:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006768:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800676c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006770:	e7e7      	b.n	8006742 <_strtod_l+0xe2>
 8006772:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80068ec <_strtod_l+0x28c>
 8006776:	e7e4      	b.n	8006742 <_strtod_l+0xe2>
 8006778:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800677c:	f04f 3aff 	mov.w	sl, #4294967295
 8006780:	e7df      	b.n	8006742 <_strtod_l+0xe2>
 8006782:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	9219      	str	r2, [sp, #100]	@ 0x64
 8006788:	785b      	ldrb	r3, [r3, #1]
 800678a:	2b30      	cmp	r3, #48	@ 0x30
 800678c:	d0f9      	beq.n	8006782 <_strtod_l+0x122>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d09f      	beq.n	80066d2 <_strtod_l+0x72>
 8006792:	2301      	movs	r3, #1
 8006794:	9309      	str	r3, [sp, #36]	@ 0x24
 8006796:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006798:	220a      	movs	r2, #10
 800679a:	930c      	str	r3, [sp, #48]	@ 0x30
 800679c:	2300      	movs	r3, #0
 800679e:	461f      	mov	r7, r3
 80067a0:	9308      	str	r3, [sp, #32]
 80067a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80067a4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80067a6:	7805      	ldrb	r5, [r0, #0]
 80067a8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80067ac:	b2d9      	uxtb	r1, r3
 80067ae:	2909      	cmp	r1, #9
 80067b0:	d928      	bls.n	8006804 <_strtod_l+0x1a4>
 80067b2:	2201      	movs	r2, #1
 80067b4:	494e      	ldr	r1, [pc, #312]	@ (80068f0 <_strtod_l+0x290>)
 80067b6:	f000 fed2 	bl	800755e <strncmp>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d032      	beq.n	8006824 <_strtod_l+0x1c4>
 80067be:	2000      	movs	r0, #0
 80067c0:	462a      	mov	r2, r5
 80067c2:	4681      	mov	r9, r0
 80067c4:	463d      	mov	r5, r7
 80067c6:	4603      	mov	r3, r0
 80067c8:	2a65      	cmp	r2, #101	@ 0x65
 80067ca:	d001      	beq.n	80067d0 <_strtod_l+0x170>
 80067cc:	2a45      	cmp	r2, #69	@ 0x45
 80067ce:	d114      	bne.n	80067fa <_strtod_l+0x19a>
 80067d0:	b91d      	cbnz	r5, 80067da <_strtod_l+0x17a>
 80067d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067d4:	4302      	orrs	r2, r0
 80067d6:	d095      	beq.n	8006704 <_strtod_l+0xa4>
 80067d8:	2500      	movs	r5, #0
 80067da:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80067dc:	1c62      	adds	r2, r4, #1
 80067de:	9219      	str	r2, [sp, #100]	@ 0x64
 80067e0:	7862      	ldrb	r2, [r4, #1]
 80067e2:	2a2b      	cmp	r2, #43	@ 0x2b
 80067e4:	d077      	beq.n	80068d6 <_strtod_l+0x276>
 80067e6:	2a2d      	cmp	r2, #45	@ 0x2d
 80067e8:	d07b      	beq.n	80068e2 <_strtod_l+0x282>
 80067ea:	f04f 0c00 	mov.w	ip, #0
 80067ee:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80067f2:	2909      	cmp	r1, #9
 80067f4:	f240 8082 	bls.w	80068fc <_strtod_l+0x29c>
 80067f8:	9419      	str	r4, [sp, #100]	@ 0x64
 80067fa:	f04f 0800 	mov.w	r8, #0
 80067fe:	e0a2      	b.n	8006946 <_strtod_l+0x2e6>
 8006800:	2300      	movs	r3, #0
 8006802:	e7c7      	b.n	8006794 <_strtod_l+0x134>
 8006804:	2f08      	cmp	r7, #8
 8006806:	bfd5      	itete	le
 8006808:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800680a:	9908      	ldrgt	r1, [sp, #32]
 800680c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006810:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006814:	f100 0001 	add.w	r0, r0, #1
 8006818:	bfd4      	ite	le
 800681a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800681c:	9308      	strgt	r3, [sp, #32]
 800681e:	3701      	adds	r7, #1
 8006820:	9019      	str	r0, [sp, #100]	@ 0x64
 8006822:	e7bf      	b.n	80067a4 <_strtod_l+0x144>
 8006824:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	9219      	str	r2, [sp, #100]	@ 0x64
 800682a:	785a      	ldrb	r2, [r3, #1]
 800682c:	b37f      	cbz	r7, 800688e <_strtod_l+0x22e>
 800682e:	4681      	mov	r9, r0
 8006830:	463d      	mov	r5, r7
 8006832:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006836:	2b09      	cmp	r3, #9
 8006838:	d912      	bls.n	8006860 <_strtod_l+0x200>
 800683a:	2301      	movs	r3, #1
 800683c:	e7c4      	b.n	80067c8 <_strtod_l+0x168>
 800683e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006840:	3001      	adds	r0, #1
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	9219      	str	r2, [sp, #100]	@ 0x64
 8006846:	785a      	ldrb	r2, [r3, #1]
 8006848:	2a30      	cmp	r2, #48	@ 0x30
 800684a:	d0f8      	beq.n	800683e <_strtod_l+0x1de>
 800684c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006850:	2b08      	cmp	r3, #8
 8006852:	f200 84cb 	bhi.w	80071ec <_strtod_l+0xb8c>
 8006856:	4681      	mov	r9, r0
 8006858:	2000      	movs	r0, #0
 800685a:	4605      	mov	r5, r0
 800685c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800685e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006860:	3a30      	subs	r2, #48	@ 0x30
 8006862:	f100 0301 	add.w	r3, r0, #1
 8006866:	d02a      	beq.n	80068be <_strtod_l+0x25e>
 8006868:	4499      	add	r9, r3
 800686a:	210a      	movs	r1, #10
 800686c:	462b      	mov	r3, r5
 800686e:	eb00 0c05 	add.w	ip, r0, r5
 8006872:	4563      	cmp	r3, ip
 8006874:	d10d      	bne.n	8006892 <_strtod_l+0x232>
 8006876:	1c69      	adds	r1, r5, #1
 8006878:	4401      	add	r1, r0
 800687a:	4428      	add	r0, r5
 800687c:	2808      	cmp	r0, #8
 800687e:	dc16      	bgt.n	80068ae <_strtod_l+0x24e>
 8006880:	230a      	movs	r3, #10
 8006882:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006884:	fb03 2300 	mla	r3, r3, r0, r2
 8006888:	930a      	str	r3, [sp, #40]	@ 0x28
 800688a:	2300      	movs	r3, #0
 800688c:	e018      	b.n	80068c0 <_strtod_l+0x260>
 800688e:	4638      	mov	r0, r7
 8006890:	e7da      	b.n	8006848 <_strtod_l+0x1e8>
 8006892:	2b08      	cmp	r3, #8
 8006894:	f103 0301 	add.w	r3, r3, #1
 8006898:	dc03      	bgt.n	80068a2 <_strtod_l+0x242>
 800689a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800689c:	434e      	muls	r6, r1
 800689e:	960a      	str	r6, [sp, #40]	@ 0x28
 80068a0:	e7e7      	b.n	8006872 <_strtod_l+0x212>
 80068a2:	2b10      	cmp	r3, #16
 80068a4:	bfde      	ittt	le
 80068a6:	9e08      	ldrle	r6, [sp, #32]
 80068a8:	434e      	mulle	r6, r1
 80068aa:	9608      	strle	r6, [sp, #32]
 80068ac:	e7e1      	b.n	8006872 <_strtod_l+0x212>
 80068ae:	280f      	cmp	r0, #15
 80068b0:	dceb      	bgt.n	800688a <_strtod_l+0x22a>
 80068b2:	230a      	movs	r3, #10
 80068b4:	9808      	ldr	r0, [sp, #32]
 80068b6:	fb03 2300 	mla	r3, r3, r0, r2
 80068ba:	9308      	str	r3, [sp, #32]
 80068bc:	e7e5      	b.n	800688a <_strtod_l+0x22a>
 80068be:	4629      	mov	r1, r5
 80068c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80068c2:	460d      	mov	r5, r1
 80068c4:	1c50      	adds	r0, r2, #1
 80068c6:	9019      	str	r0, [sp, #100]	@ 0x64
 80068c8:	7852      	ldrb	r2, [r2, #1]
 80068ca:	4618      	mov	r0, r3
 80068cc:	e7b1      	b.n	8006832 <_strtod_l+0x1d2>
 80068ce:	f04f 0900 	mov.w	r9, #0
 80068d2:	2301      	movs	r3, #1
 80068d4:	e77d      	b.n	80067d2 <_strtod_l+0x172>
 80068d6:	f04f 0c00 	mov.w	ip, #0
 80068da:	1ca2      	adds	r2, r4, #2
 80068dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80068de:	78a2      	ldrb	r2, [r4, #2]
 80068e0:	e785      	b.n	80067ee <_strtod_l+0x18e>
 80068e2:	f04f 0c01 	mov.w	ip, #1
 80068e6:	e7f8      	b.n	80068da <_strtod_l+0x27a>
 80068e8:	0800938c 	.word	0x0800938c
 80068ec:	7ff00000 	.word	0x7ff00000
 80068f0:	0800936a 	.word	0x0800936a
 80068f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80068f6:	1c51      	adds	r1, r2, #1
 80068f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80068fa:	7852      	ldrb	r2, [r2, #1]
 80068fc:	2a30      	cmp	r2, #48	@ 0x30
 80068fe:	d0f9      	beq.n	80068f4 <_strtod_l+0x294>
 8006900:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006904:	2908      	cmp	r1, #8
 8006906:	f63f af78 	bhi.w	80067fa <_strtod_l+0x19a>
 800690a:	f04f 080a 	mov.w	r8, #10
 800690e:	3a30      	subs	r2, #48	@ 0x30
 8006910:	920e      	str	r2, [sp, #56]	@ 0x38
 8006912:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006914:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006916:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006918:	1c56      	adds	r6, r2, #1
 800691a:	9619      	str	r6, [sp, #100]	@ 0x64
 800691c:	7852      	ldrb	r2, [r2, #1]
 800691e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006922:	f1be 0f09 	cmp.w	lr, #9
 8006926:	d939      	bls.n	800699c <_strtod_l+0x33c>
 8006928:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800692a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800692e:	1a76      	subs	r6, r6, r1
 8006930:	2e08      	cmp	r6, #8
 8006932:	dc03      	bgt.n	800693c <_strtod_l+0x2dc>
 8006934:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006936:	4588      	cmp	r8, r1
 8006938:	bfa8      	it	ge
 800693a:	4688      	movge	r8, r1
 800693c:	f1bc 0f00 	cmp.w	ip, #0
 8006940:	d001      	beq.n	8006946 <_strtod_l+0x2e6>
 8006942:	f1c8 0800 	rsb	r8, r8, #0
 8006946:	2d00      	cmp	r5, #0
 8006948:	d14e      	bne.n	80069e8 <_strtod_l+0x388>
 800694a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800694c:	4308      	orrs	r0, r1
 800694e:	f47f aec0 	bne.w	80066d2 <_strtod_l+0x72>
 8006952:	2b00      	cmp	r3, #0
 8006954:	f47f aed6 	bne.w	8006704 <_strtod_l+0xa4>
 8006958:	2a69      	cmp	r2, #105	@ 0x69
 800695a:	d028      	beq.n	80069ae <_strtod_l+0x34e>
 800695c:	dc25      	bgt.n	80069aa <_strtod_l+0x34a>
 800695e:	2a49      	cmp	r2, #73	@ 0x49
 8006960:	d025      	beq.n	80069ae <_strtod_l+0x34e>
 8006962:	2a4e      	cmp	r2, #78	@ 0x4e
 8006964:	f47f aece 	bne.w	8006704 <_strtod_l+0xa4>
 8006968:	499a      	ldr	r1, [pc, #616]	@ (8006bd4 <_strtod_l+0x574>)
 800696a:	a819      	add	r0, sp, #100	@ 0x64
 800696c:	f001 f968 	bl	8007c40 <__match>
 8006970:	2800      	cmp	r0, #0
 8006972:	f43f aec7 	beq.w	8006704 <_strtod_l+0xa4>
 8006976:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b28      	cmp	r3, #40	@ 0x28
 800697c:	d12e      	bne.n	80069dc <_strtod_l+0x37c>
 800697e:	4996      	ldr	r1, [pc, #600]	@ (8006bd8 <_strtod_l+0x578>)
 8006980:	aa1c      	add	r2, sp, #112	@ 0x70
 8006982:	a819      	add	r0, sp, #100	@ 0x64
 8006984:	f001 f970 	bl	8007c68 <__hexnan>
 8006988:	2805      	cmp	r0, #5
 800698a:	d127      	bne.n	80069dc <_strtod_l+0x37c>
 800698c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800698e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006992:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006996:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800699a:	e69a      	b.n	80066d2 <_strtod_l+0x72>
 800699c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800699e:	fb08 2101 	mla	r1, r8, r1, r2
 80069a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80069a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80069a8:	e7b5      	b.n	8006916 <_strtod_l+0x2b6>
 80069aa:	2a6e      	cmp	r2, #110	@ 0x6e
 80069ac:	e7da      	b.n	8006964 <_strtod_l+0x304>
 80069ae:	498b      	ldr	r1, [pc, #556]	@ (8006bdc <_strtod_l+0x57c>)
 80069b0:	a819      	add	r0, sp, #100	@ 0x64
 80069b2:	f001 f945 	bl	8007c40 <__match>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	f43f aea4 	beq.w	8006704 <_strtod_l+0xa4>
 80069bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069be:	4988      	ldr	r1, [pc, #544]	@ (8006be0 <_strtod_l+0x580>)
 80069c0:	3b01      	subs	r3, #1
 80069c2:	a819      	add	r0, sp, #100	@ 0x64
 80069c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80069c6:	f001 f93b 	bl	8007c40 <__match>
 80069ca:	b910      	cbnz	r0, 80069d2 <_strtod_l+0x372>
 80069cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069ce:	3301      	adds	r3, #1
 80069d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80069d2:	f04f 0a00 	mov.w	sl, #0
 80069d6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006be4 <_strtod_l+0x584>
 80069da:	e67a      	b.n	80066d2 <_strtod_l+0x72>
 80069dc:	4882      	ldr	r0, [pc, #520]	@ (8006be8 <_strtod_l+0x588>)
 80069de:	f000 fe53 	bl	8007688 <nan>
 80069e2:	4682      	mov	sl, r0
 80069e4:	468b      	mov	fp, r1
 80069e6:	e674      	b.n	80066d2 <_strtod_l+0x72>
 80069e8:	eba8 0309 	sub.w	r3, r8, r9
 80069ec:	2f00      	cmp	r7, #0
 80069ee:	bf08      	it	eq
 80069f0:	462f      	moveq	r7, r5
 80069f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80069f4:	2d10      	cmp	r5, #16
 80069f6:	462c      	mov	r4, r5
 80069f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80069fa:	bfa8      	it	ge
 80069fc:	2410      	movge	r4, #16
 80069fe:	f7f9 fcf1 	bl	80003e4 <__aeabi_ui2d>
 8006a02:	2d09      	cmp	r5, #9
 8006a04:	4682      	mov	sl, r0
 8006a06:	468b      	mov	fp, r1
 8006a08:	dc11      	bgt.n	8006a2e <_strtod_l+0x3ce>
 8006a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f43f ae60 	beq.w	80066d2 <_strtod_l+0x72>
 8006a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a14:	dd76      	ble.n	8006b04 <_strtod_l+0x4a4>
 8006a16:	2b16      	cmp	r3, #22
 8006a18:	dc5d      	bgt.n	8006ad6 <_strtod_l+0x476>
 8006a1a:	4974      	ldr	r1, [pc, #464]	@ (8006bec <_strtod_l+0x58c>)
 8006a1c:	4652      	mov	r2, sl
 8006a1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a22:	465b      	mov	r3, fp
 8006a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a28:	f7f9 fd56 	bl	80004d8 <__aeabi_dmul>
 8006a2c:	e7d9      	b.n	80069e2 <_strtod_l+0x382>
 8006a2e:	4b6f      	ldr	r3, [pc, #444]	@ (8006bec <_strtod_l+0x58c>)
 8006a30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a34:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006a38:	f7f9 fd4e 	bl	80004d8 <__aeabi_dmul>
 8006a3c:	4682      	mov	sl, r0
 8006a3e:	9808      	ldr	r0, [sp, #32]
 8006a40:	468b      	mov	fp, r1
 8006a42:	f7f9 fccf 	bl	80003e4 <__aeabi_ui2d>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4650      	mov	r0, sl
 8006a4c:	4659      	mov	r1, fp
 8006a4e:	f7f9 fb8d 	bl	800016c <__adddf3>
 8006a52:	2d0f      	cmp	r5, #15
 8006a54:	4682      	mov	sl, r0
 8006a56:	468b      	mov	fp, r1
 8006a58:	ddd7      	ble.n	8006a0a <_strtod_l+0x3aa>
 8006a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a5c:	1b2c      	subs	r4, r5, r4
 8006a5e:	441c      	add	r4, r3
 8006a60:	2c00      	cmp	r4, #0
 8006a62:	f340 8096 	ble.w	8006b92 <_strtod_l+0x532>
 8006a66:	f014 030f 	ands.w	r3, r4, #15
 8006a6a:	d00a      	beq.n	8006a82 <_strtod_l+0x422>
 8006a6c:	495f      	ldr	r1, [pc, #380]	@ (8006bec <_strtod_l+0x58c>)
 8006a6e:	4652      	mov	r2, sl
 8006a70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a78:	465b      	mov	r3, fp
 8006a7a:	f7f9 fd2d 	bl	80004d8 <__aeabi_dmul>
 8006a7e:	4682      	mov	sl, r0
 8006a80:	468b      	mov	fp, r1
 8006a82:	f034 040f 	bics.w	r4, r4, #15
 8006a86:	d073      	beq.n	8006b70 <_strtod_l+0x510>
 8006a88:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006a8c:	dd48      	ble.n	8006b20 <_strtod_l+0x4c0>
 8006a8e:	2400      	movs	r4, #0
 8006a90:	46a0      	mov	r8, r4
 8006a92:	46a1      	mov	r9, r4
 8006a94:	940a      	str	r4, [sp, #40]	@ 0x28
 8006a96:	2322      	movs	r3, #34	@ 0x22
 8006a98:	f04f 0a00 	mov.w	sl, #0
 8006a9c:	9a05      	ldr	r2, [sp, #20]
 8006a9e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006be4 <_strtod_l+0x584>
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f43f ae13 	beq.w	80066d2 <_strtod_l+0x72>
 8006aac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006aae:	9805      	ldr	r0, [sp, #20]
 8006ab0:	f001 fa76 	bl	8007fa0 <_Bfree>
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	9805      	ldr	r0, [sp, #20]
 8006ab8:	f001 fa72 	bl	8007fa0 <_Bfree>
 8006abc:	4641      	mov	r1, r8
 8006abe:	9805      	ldr	r0, [sp, #20]
 8006ac0:	f001 fa6e 	bl	8007fa0 <_Bfree>
 8006ac4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ac6:	9805      	ldr	r0, [sp, #20]
 8006ac8:	f001 fa6a 	bl	8007fa0 <_Bfree>
 8006acc:	4621      	mov	r1, r4
 8006ace:	9805      	ldr	r0, [sp, #20]
 8006ad0:	f001 fa66 	bl	8007fa0 <_Bfree>
 8006ad4:	e5fd      	b.n	80066d2 <_strtod_l+0x72>
 8006ad6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ad8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006adc:	4293      	cmp	r3, r2
 8006ade:	dbbc      	blt.n	8006a5a <_strtod_l+0x3fa>
 8006ae0:	4c42      	ldr	r4, [pc, #264]	@ (8006bec <_strtod_l+0x58c>)
 8006ae2:	f1c5 050f 	rsb	r5, r5, #15
 8006ae6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006aea:	4652      	mov	r2, sl
 8006aec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006af0:	465b      	mov	r3, fp
 8006af2:	f7f9 fcf1 	bl	80004d8 <__aeabi_dmul>
 8006af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006af8:	1b5d      	subs	r5, r3, r5
 8006afa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006afe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b02:	e791      	b.n	8006a28 <_strtod_l+0x3c8>
 8006b04:	3316      	adds	r3, #22
 8006b06:	dba8      	blt.n	8006a5a <_strtod_l+0x3fa>
 8006b08:	4b38      	ldr	r3, [pc, #224]	@ (8006bec <_strtod_l+0x58c>)
 8006b0a:	eba9 0808 	sub.w	r8, r9, r8
 8006b0e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006b12:	4650      	mov	r0, sl
 8006b14:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006b18:	4659      	mov	r1, fp
 8006b1a:	f7f9 fe07 	bl	800072c <__aeabi_ddiv>
 8006b1e:	e760      	b.n	80069e2 <_strtod_l+0x382>
 8006b20:	4b33      	ldr	r3, [pc, #204]	@ (8006bf0 <_strtod_l+0x590>)
 8006b22:	4650      	mov	r0, sl
 8006b24:	9308      	str	r3, [sp, #32]
 8006b26:	2300      	movs	r3, #0
 8006b28:	4659      	mov	r1, fp
 8006b2a:	461e      	mov	r6, r3
 8006b2c:	1124      	asrs	r4, r4, #4
 8006b2e:	2c01      	cmp	r4, #1
 8006b30:	dc21      	bgt.n	8006b76 <_strtod_l+0x516>
 8006b32:	b10b      	cbz	r3, 8006b38 <_strtod_l+0x4d8>
 8006b34:	4682      	mov	sl, r0
 8006b36:	468b      	mov	fp, r1
 8006b38:	492d      	ldr	r1, [pc, #180]	@ (8006bf0 <_strtod_l+0x590>)
 8006b3a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006b3e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006b42:	4652      	mov	r2, sl
 8006b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b48:	465b      	mov	r3, fp
 8006b4a:	f7f9 fcc5 	bl	80004d8 <__aeabi_dmul>
 8006b4e:	4b25      	ldr	r3, [pc, #148]	@ (8006be4 <_strtod_l+0x584>)
 8006b50:	460a      	mov	r2, r1
 8006b52:	400b      	ands	r3, r1
 8006b54:	4927      	ldr	r1, [pc, #156]	@ (8006bf4 <_strtod_l+0x594>)
 8006b56:	4682      	mov	sl, r0
 8006b58:	428b      	cmp	r3, r1
 8006b5a:	d898      	bhi.n	8006a8e <_strtod_l+0x42e>
 8006b5c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006b60:	428b      	cmp	r3, r1
 8006b62:	bf86      	itte	hi
 8006b64:	f04f 3aff 	movhi.w	sl, #4294967295
 8006b68:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006bf8 <_strtod_l+0x598>
 8006b6c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006b70:	2300      	movs	r3, #0
 8006b72:	9308      	str	r3, [sp, #32]
 8006b74:	e07a      	b.n	8006c6c <_strtod_l+0x60c>
 8006b76:	07e2      	lsls	r2, r4, #31
 8006b78:	d505      	bpl.n	8006b86 <_strtod_l+0x526>
 8006b7a:	9b08      	ldr	r3, [sp, #32]
 8006b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b80:	f7f9 fcaa 	bl	80004d8 <__aeabi_dmul>
 8006b84:	2301      	movs	r3, #1
 8006b86:	9a08      	ldr	r2, [sp, #32]
 8006b88:	3601      	adds	r6, #1
 8006b8a:	3208      	adds	r2, #8
 8006b8c:	1064      	asrs	r4, r4, #1
 8006b8e:	9208      	str	r2, [sp, #32]
 8006b90:	e7cd      	b.n	8006b2e <_strtod_l+0x4ce>
 8006b92:	d0ed      	beq.n	8006b70 <_strtod_l+0x510>
 8006b94:	4264      	negs	r4, r4
 8006b96:	f014 020f 	ands.w	r2, r4, #15
 8006b9a:	d00a      	beq.n	8006bb2 <_strtod_l+0x552>
 8006b9c:	4b13      	ldr	r3, [pc, #76]	@ (8006bec <_strtod_l+0x58c>)
 8006b9e:	4650      	mov	r0, sl
 8006ba0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ba4:	4659      	mov	r1, fp
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	f7f9 fdbf 	bl	800072c <__aeabi_ddiv>
 8006bae:	4682      	mov	sl, r0
 8006bb0:	468b      	mov	fp, r1
 8006bb2:	1124      	asrs	r4, r4, #4
 8006bb4:	d0dc      	beq.n	8006b70 <_strtod_l+0x510>
 8006bb6:	2c1f      	cmp	r4, #31
 8006bb8:	dd20      	ble.n	8006bfc <_strtod_l+0x59c>
 8006bba:	2400      	movs	r4, #0
 8006bbc:	46a0      	mov	r8, r4
 8006bbe:	46a1      	mov	r9, r4
 8006bc0:	940a      	str	r4, [sp, #40]	@ 0x28
 8006bc2:	2322      	movs	r3, #34	@ 0x22
 8006bc4:	9a05      	ldr	r2, [sp, #20]
 8006bc6:	f04f 0a00 	mov.w	sl, #0
 8006bca:	f04f 0b00 	mov.w	fp, #0
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	e768      	b.n	8006aa4 <_strtod_l+0x444>
 8006bd2:	bf00      	nop
 8006bd4:	08009375 	.word	0x08009375
 8006bd8:	08009378 	.word	0x08009378
 8006bdc:	0800936c 	.word	0x0800936c
 8006be0:	0800936f 	.word	0x0800936f
 8006be4:	7ff00000 	.word	0x7ff00000
 8006be8:	08009714 	.word	0x08009714
 8006bec:	08009510 	.word	0x08009510
 8006bf0:	080094e8 	.word	0x080094e8
 8006bf4:	7ca00000 	.word	0x7ca00000
 8006bf8:	7fefffff 	.word	0x7fefffff
 8006bfc:	f014 0310 	ands.w	r3, r4, #16
 8006c00:	bf18      	it	ne
 8006c02:	236a      	movne	r3, #106	@ 0x6a
 8006c04:	4650      	mov	r0, sl
 8006c06:	9308      	str	r3, [sp, #32]
 8006c08:	4659      	mov	r1, fp
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	4ea9      	ldr	r6, [pc, #676]	@ (8006eb4 <_strtod_l+0x854>)
 8006c0e:	07e2      	lsls	r2, r4, #31
 8006c10:	d504      	bpl.n	8006c1c <_strtod_l+0x5bc>
 8006c12:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c16:	f7f9 fc5f 	bl	80004d8 <__aeabi_dmul>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	1064      	asrs	r4, r4, #1
 8006c1e:	f106 0608 	add.w	r6, r6, #8
 8006c22:	d1f4      	bne.n	8006c0e <_strtod_l+0x5ae>
 8006c24:	b10b      	cbz	r3, 8006c2a <_strtod_l+0x5ca>
 8006c26:	4682      	mov	sl, r0
 8006c28:	468b      	mov	fp, r1
 8006c2a:	9b08      	ldr	r3, [sp, #32]
 8006c2c:	b1b3      	cbz	r3, 8006c5c <_strtod_l+0x5fc>
 8006c2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006c32:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	4659      	mov	r1, fp
 8006c3a:	dd0f      	ble.n	8006c5c <_strtod_l+0x5fc>
 8006c3c:	2b1f      	cmp	r3, #31
 8006c3e:	dd57      	ble.n	8006cf0 <_strtod_l+0x690>
 8006c40:	2b34      	cmp	r3, #52	@ 0x34
 8006c42:	bfd8      	it	le
 8006c44:	f04f 33ff 	movle.w	r3, #4294967295
 8006c48:	f04f 0a00 	mov.w	sl, #0
 8006c4c:	bfcf      	iteee	gt
 8006c4e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006c52:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006c56:	4093      	lslle	r3, r2
 8006c58:	ea03 0b01 	andle.w	fp, r3, r1
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2300      	movs	r3, #0
 8006c60:	4650      	mov	r0, sl
 8006c62:	4659      	mov	r1, fp
 8006c64:	f7f9 fea0 	bl	80009a8 <__aeabi_dcmpeq>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d1a6      	bne.n	8006bba <_strtod_l+0x55a>
 8006c6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c6e:	463a      	mov	r2, r7
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006c74:	462b      	mov	r3, r5
 8006c76:	9805      	ldr	r0, [sp, #20]
 8006c78:	f001 f9fa 	bl	8008070 <__s2b>
 8006c7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	f43f af05 	beq.w	8006a8e <_strtod_l+0x42e>
 8006c84:	2400      	movs	r4, #0
 8006c86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c88:	eba9 0308 	sub.w	r3, r9, r8
 8006c8c:	2a00      	cmp	r2, #0
 8006c8e:	bfa8      	it	ge
 8006c90:	2300      	movge	r3, #0
 8006c92:	46a0      	mov	r8, r4
 8006c94:	9312      	str	r3, [sp, #72]	@ 0x48
 8006c96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006c9a:	9316      	str	r3, [sp, #88]	@ 0x58
 8006c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c9e:	9805      	ldr	r0, [sp, #20]
 8006ca0:	6859      	ldr	r1, [r3, #4]
 8006ca2:	f001 f93d 	bl	8007f20 <_Balloc>
 8006ca6:	4681      	mov	r9, r0
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	f43f aef4 	beq.w	8006a96 <_strtod_l+0x436>
 8006cae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cb0:	300c      	adds	r0, #12
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	f103 010c 	add.w	r1, r3, #12
 8006cb8:	3202      	adds	r2, #2
 8006cba:	0092      	lsls	r2, r2, #2
 8006cbc:	f000 fcd5 	bl	800766a <memcpy>
 8006cc0:	ab1c      	add	r3, sp, #112	@ 0x70
 8006cc2:	9301      	str	r3, [sp, #4]
 8006cc4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	4652      	mov	r2, sl
 8006cca:	465b      	mov	r3, fp
 8006ccc:	9805      	ldr	r0, [sp, #20]
 8006cce:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006cd2:	f001 fcff 	bl	80086d4 <__d2b>
 8006cd6:	901a      	str	r0, [sp, #104]	@ 0x68
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	f43f aedc 	beq.w	8006a96 <_strtod_l+0x436>
 8006cde:	2101      	movs	r1, #1
 8006ce0:	9805      	ldr	r0, [sp, #20]
 8006ce2:	f001 fa5b 	bl	800819c <__i2b>
 8006ce6:	4680      	mov	r8, r0
 8006ce8:	b948      	cbnz	r0, 8006cfe <_strtod_l+0x69e>
 8006cea:	f04f 0800 	mov.w	r8, #0
 8006cee:	e6d2      	b.n	8006a96 <_strtod_l+0x436>
 8006cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf8:	ea03 0a0a 	and.w	sl, r3, sl
 8006cfc:	e7ae      	b.n	8006c5c <_strtod_l+0x5fc>
 8006cfe:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006d00:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006d02:	2d00      	cmp	r5, #0
 8006d04:	bfab      	itete	ge
 8006d06:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006d08:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006d0a:	18ef      	addge	r7, r5, r3
 8006d0c:	1b5e      	sublt	r6, r3, r5
 8006d0e:	9b08      	ldr	r3, [sp, #32]
 8006d10:	bfa8      	it	ge
 8006d12:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006d14:	eba5 0503 	sub.w	r5, r5, r3
 8006d18:	4415      	add	r5, r2
 8006d1a:	4b67      	ldr	r3, [pc, #412]	@ (8006eb8 <_strtod_l+0x858>)
 8006d1c:	f105 35ff 	add.w	r5, r5, #4294967295
 8006d20:	bfb8      	it	lt
 8006d22:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006d24:	429d      	cmp	r5, r3
 8006d26:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006d2a:	da50      	bge.n	8006dce <_strtod_l+0x76e>
 8006d2c:	1b5b      	subs	r3, r3, r5
 8006d2e:	2b1f      	cmp	r3, #31
 8006d30:	f04f 0101 	mov.w	r1, #1
 8006d34:	eba2 0203 	sub.w	r2, r2, r3
 8006d38:	dc3d      	bgt.n	8006db6 <_strtod_l+0x756>
 8006d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d3e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d40:	2300      	movs	r3, #0
 8006d42:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d44:	18bd      	adds	r5, r7, r2
 8006d46:	9b08      	ldr	r3, [sp, #32]
 8006d48:	42af      	cmp	r7, r5
 8006d4a:	4416      	add	r6, r2
 8006d4c:	441e      	add	r6, r3
 8006d4e:	463b      	mov	r3, r7
 8006d50:	bfa8      	it	ge
 8006d52:	462b      	movge	r3, r5
 8006d54:	42b3      	cmp	r3, r6
 8006d56:	bfa8      	it	ge
 8006d58:	4633      	movge	r3, r6
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	bfc2      	ittt	gt
 8006d5e:	1aed      	subgt	r5, r5, r3
 8006d60:	1af6      	subgt	r6, r6, r3
 8006d62:	1aff      	subgt	r7, r7, r3
 8006d64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	dd16      	ble.n	8006d98 <_strtod_l+0x738>
 8006d6a:	4641      	mov	r1, r8
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	9805      	ldr	r0, [sp, #20]
 8006d70:	f001 fad2 	bl	8008318 <__pow5mult>
 8006d74:	4680      	mov	r8, r0
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d0b7      	beq.n	8006cea <_strtod_l+0x68a>
 8006d7a:	4601      	mov	r1, r0
 8006d7c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006d7e:	9805      	ldr	r0, [sp, #20]
 8006d80:	f001 fa22 	bl	80081c8 <__multiply>
 8006d84:	900e      	str	r0, [sp, #56]	@ 0x38
 8006d86:	2800      	cmp	r0, #0
 8006d88:	f43f ae85 	beq.w	8006a96 <_strtod_l+0x436>
 8006d8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d8e:	9805      	ldr	r0, [sp, #20]
 8006d90:	f001 f906 	bl	8007fa0 <_Bfree>
 8006d94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d96:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d98:	2d00      	cmp	r5, #0
 8006d9a:	dc1d      	bgt.n	8006dd8 <_strtod_l+0x778>
 8006d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	dd23      	ble.n	8006dea <_strtod_l+0x78a>
 8006da2:	4649      	mov	r1, r9
 8006da4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006da6:	9805      	ldr	r0, [sp, #20]
 8006da8:	f001 fab6 	bl	8008318 <__pow5mult>
 8006dac:	4681      	mov	r9, r0
 8006dae:	b9e0      	cbnz	r0, 8006dea <_strtod_l+0x78a>
 8006db0:	f04f 0900 	mov.w	r9, #0
 8006db4:	e66f      	b.n	8006a96 <_strtod_l+0x436>
 8006db6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006dba:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006dbe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006dc2:	35e2      	adds	r5, #226	@ 0xe2
 8006dc4:	fa01 f305 	lsl.w	r3, r1, r5
 8006dc8:	9310      	str	r3, [sp, #64]	@ 0x40
 8006dca:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006dcc:	e7ba      	b.n	8006d44 <_strtod_l+0x6e4>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006dd6:	e7b5      	b.n	8006d44 <_strtod_l+0x6e4>
 8006dd8:	462a      	mov	r2, r5
 8006dda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ddc:	9805      	ldr	r0, [sp, #20]
 8006dde:	f001 faf5 	bl	80083cc <__lshift>
 8006de2:	901a      	str	r0, [sp, #104]	@ 0x68
 8006de4:	2800      	cmp	r0, #0
 8006de6:	d1d9      	bne.n	8006d9c <_strtod_l+0x73c>
 8006de8:	e655      	b.n	8006a96 <_strtod_l+0x436>
 8006dea:	2e00      	cmp	r6, #0
 8006dec:	dd07      	ble.n	8006dfe <_strtod_l+0x79e>
 8006dee:	4649      	mov	r1, r9
 8006df0:	4632      	mov	r2, r6
 8006df2:	9805      	ldr	r0, [sp, #20]
 8006df4:	f001 faea 	bl	80083cc <__lshift>
 8006df8:	4681      	mov	r9, r0
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d0d8      	beq.n	8006db0 <_strtod_l+0x750>
 8006dfe:	2f00      	cmp	r7, #0
 8006e00:	dd08      	ble.n	8006e14 <_strtod_l+0x7b4>
 8006e02:	4641      	mov	r1, r8
 8006e04:	463a      	mov	r2, r7
 8006e06:	9805      	ldr	r0, [sp, #20]
 8006e08:	f001 fae0 	bl	80083cc <__lshift>
 8006e0c:	4680      	mov	r8, r0
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	f43f ae41 	beq.w	8006a96 <_strtod_l+0x436>
 8006e14:	464a      	mov	r2, r9
 8006e16:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e18:	9805      	ldr	r0, [sp, #20]
 8006e1a:	f001 fb5f 	bl	80084dc <__mdiff>
 8006e1e:	4604      	mov	r4, r0
 8006e20:	2800      	cmp	r0, #0
 8006e22:	f43f ae38 	beq.w	8006a96 <_strtod_l+0x436>
 8006e26:	68c3      	ldr	r3, [r0, #12]
 8006e28:	4641      	mov	r1, r8
 8006e2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60c3      	str	r3, [r0, #12]
 8006e30:	f001 fb38 	bl	80084a4 <__mcmp>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	da45      	bge.n	8006ec4 <_strtod_l+0x864>
 8006e38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e3a:	ea53 030a 	orrs.w	r3, r3, sl
 8006e3e:	d16b      	bne.n	8006f18 <_strtod_l+0x8b8>
 8006e40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d167      	bne.n	8006f18 <_strtod_l+0x8b8>
 8006e48:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e4c:	0d1b      	lsrs	r3, r3, #20
 8006e4e:	051b      	lsls	r3, r3, #20
 8006e50:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006e54:	d960      	bls.n	8006f18 <_strtod_l+0x8b8>
 8006e56:	6963      	ldr	r3, [r4, #20]
 8006e58:	b913      	cbnz	r3, 8006e60 <_strtod_l+0x800>
 8006e5a:	6923      	ldr	r3, [r4, #16]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	dd5b      	ble.n	8006f18 <_strtod_l+0x8b8>
 8006e60:	4621      	mov	r1, r4
 8006e62:	2201      	movs	r2, #1
 8006e64:	9805      	ldr	r0, [sp, #20]
 8006e66:	f001 fab1 	bl	80083cc <__lshift>
 8006e6a:	4641      	mov	r1, r8
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	f001 fb19 	bl	80084a4 <__mcmp>
 8006e72:	2800      	cmp	r0, #0
 8006e74:	dd50      	ble.n	8006f18 <_strtod_l+0x8b8>
 8006e76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e7a:	9a08      	ldr	r2, [sp, #32]
 8006e7c:	0d1b      	lsrs	r3, r3, #20
 8006e7e:	051b      	lsls	r3, r3, #20
 8006e80:	2a00      	cmp	r2, #0
 8006e82:	d06a      	beq.n	8006f5a <_strtod_l+0x8fa>
 8006e84:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006e88:	d867      	bhi.n	8006f5a <_strtod_l+0x8fa>
 8006e8a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006e8e:	f67f ae98 	bls.w	8006bc2 <_strtod_l+0x562>
 8006e92:	4650      	mov	r0, sl
 8006e94:	4659      	mov	r1, fp
 8006e96:	4b09      	ldr	r3, [pc, #36]	@ (8006ebc <_strtod_l+0x85c>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f7f9 fb1d 	bl	80004d8 <__aeabi_dmul>
 8006e9e:	4b08      	ldr	r3, [pc, #32]	@ (8006ec0 <_strtod_l+0x860>)
 8006ea0:	4682      	mov	sl, r0
 8006ea2:	400b      	ands	r3, r1
 8006ea4:	468b      	mov	fp, r1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f47f ae00 	bne.w	8006aac <_strtod_l+0x44c>
 8006eac:	2322      	movs	r3, #34	@ 0x22
 8006eae:	9a05      	ldr	r2, [sp, #20]
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	e5fb      	b.n	8006aac <_strtod_l+0x44c>
 8006eb4:	080093a0 	.word	0x080093a0
 8006eb8:	fffffc02 	.word	0xfffffc02
 8006ebc:	39500000 	.word	0x39500000
 8006ec0:	7ff00000 	.word	0x7ff00000
 8006ec4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006ec8:	d165      	bne.n	8006f96 <_strtod_l+0x936>
 8006eca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006ecc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ed0:	b35a      	cbz	r2, 8006f2a <_strtod_l+0x8ca>
 8006ed2:	4a99      	ldr	r2, [pc, #612]	@ (8007138 <_strtod_l+0xad8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d12b      	bne.n	8006f30 <_strtod_l+0x8d0>
 8006ed8:	9b08      	ldr	r3, [sp, #32]
 8006eda:	4651      	mov	r1, sl
 8006edc:	b303      	cbz	r3, 8006f20 <_strtod_l+0x8c0>
 8006ede:	465a      	mov	r2, fp
 8006ee0:	4b96      	ldr	r3, [pc, #600]	@ (800713c <_strtod_l+0xadc>)
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8006eec:	d81b      	bhi.n	8006f26 <_strtod_l+0x8c6>
 8006eee:	0d1b      	lsrs	r3, r3, #20
 8006ef0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef8:	4299      	cmp	r1, r3
 8006efa:	d119      	bne.n	8006f30 <_strtod_l+0x8d0>
 8006efc:	4b90      	ldr	r3, [pc, #576]	@ (8007140 <_strtod_l+0xae0>)
 8006efe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d102      	bne.n	8006f0a <_strtod_l+0x8aa>
 8006f04:	3101      	adds	r1, #1
 8006f06:	f43f adc6 	beq.w	8006a96 <_strtod_l+0x436>
 8006f0a:	f04f 0a00 	mov.w	sl, #0
 8006f0e:	4b8b      	ldr	r3, [pc, #556]	@ (800713c <_strtod_l+0xadc>)
 8006f10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f12:	401a      	ands	r2, r3
 8006f14:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006f18:	9b08      	ldr	r3, [sp, #32]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1b9      	bne.n	8006e92 <_strtod_l+0x832>
 8006f1e:	e5c5      	b.n	8006aac <_strtod_l+0x44c>
 8006f20:	f04f 33ff 	mov.w	r3, #4294967295
 8006f24:	e7e8      	b.n	8006ef8 <_strtod_l+0x898>
 8006f26:	4613      	mov	r3, r2
 8006f28:	e7e6      	b.n	8006ef8 <_strtod_l+0x898>
 8006f2a:	ea53 030a 	orrs.w	r3, r3, sl
 8006f2e:	d0a2      	beq.n	8006e76 <_strtod_l+0x816>
 8006f30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f32:	b1db      	cbz	r3, 8006f6c <_strtod_l+0x90c>
 8006f34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f36:	4213      	tst	r3, r2
 8006f38:	d0ee      	beq.n	8006f18 <_strtod_l+0x8b8>
 8006f3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f3c:	4650      	mov	r0, sl
 8006f3e:	4659      	mov	r1, fp
 8006f40:	9a08      	ldr	r2, [sp, #32]
 8006f42:	b1bb      	cbz	r3, 8006f74 <_strtod_l+0x914>
 8006f44:	f7ff fb68 	bl	8006618 <sulp>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f50:	f7f9 f90c 	bl	800016c <__adddf3>
 8006f54:	4682      	mov	sl, r0
 8006f56:	468b      	mov	fp, r1
 8006f58:	e7de      	b.n	8006f18 <_strtod_l+0x8b8>
 8006f5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006f5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006f62:	f04f 3aff 	mov.w	sl, #4294967295
 8006f66:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006f6a:	e7d5      	b.n	8006f18 <_strtod_l+0x8b8>
 8006f6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f6e:	ea13 0f0a 	tst.w	r3, sl
 8006f72:	e7e1      	b.n	8006f38 <_strtod_l+0x8d8>
 8006f74:	f7ff fb50 	bl	8006618 <sulp>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f80:	f7f9 f8f2 	bl	8000168 <__aeabi_dsub>
 8006f84:	2200      	movs	r2, #0
 8006f86:	2300      	movs	r3, #0
 8006f88:	4682      	mov	sl, r0
 8006f8a:	468b      	mov	fp, r1
 8006f8c:	f7f9 fd0c 	bl	80009a8 <__aeabi_dcmpeq>
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d0c1      	beq.n	8006f18 <_strtod_l+0x8b8>
 8006f94:	e615      	b.n	8006bc2 <_strtod_l+0x562>
 8006f96:	4641      	mov	r1, r8
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f001 fbf3 	bl	8008784 <__ratio>
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006fa4:	4606      	mov	r6, r0
 8006fa6:	460f      	mov	r7, r1
 8006fa8:	f7f9 fd12 	bl	80009d0 <__aeabi_dcmple>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	d06d      	beq.n	800708c <_strtod_l+0xa2c>
 8006fb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d178      	bne.n	80070a8 <_strtod_l+0xa48>
 8006fb6:	f1ba 0f00 	cmp.w	sl, #0
 8006fba:	d156      	bne.n	800706a <_strtod_l+0xa0a>
 8006fbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d158      	bne.n	8007078 <_strtod_l+0xa18>
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	4630      	mov	r0, r6
 8006fca:	4639      	mov	r1, r7
 8006fcc:	4b5d      	ldr	r3, [pc, #372]	@ (8007144 <_strtod_l+0xae4>)
 8006fce:	f7f9 fcf5 	bl	80009bc <__aeabi_dcmplt>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d157      	bne.n	8007086 <_strtod_l+0xa26>
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	4639      	mov	r1, r7
 8006fda:	2200      	movs	r2, #0
 8006fdc:	4b5a      	ldr	r3, [pc, #360]	@ (8007148 <_strtod_l+0xae8>)
 8006fde:	f7f9 fa7b 	bl	80004d8 <__aeabi_dmul>
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	460f      	mov	r7, r1
 8006fe6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006fea:	9606      	str	r6, [sp, #24]
 8006fec:	9307      	str	r3, [sp, #28]
 8006fee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ff2:	4d52      	ldr	r5, [pc, #328]	@ (800713c <_strtod_l+0xadc>)
 8006ff4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006ff8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ffa:	401d      	ands	r5, r3
 8006ffc:	4b53      	ldr	r3, [pc, #332]	@ (800714c <_strtod_l+0xaec>)
 8006ffe:	429d      	cmp	r5, r3
 8007000:	f040 80aa 	bne.w	8007158 <_strtod_l+0xaf8>
 8007004:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007006:	4650      	mov	r0, sl
 8007008:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800700c:	4659      	mov	r1, fp
 800700e:	f001 faf9 	bl	8008604 <__ulp>
 8007012:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007016:	f7f9 fa5f 	bl	80004d8 <__aeabi_dmul>
 800701a:	4652      	mov	r2, sl
 800701c:	465b      	mov	r3, fp
 800701e:	f7f9 f8a5 	bl	800016c <__adddf3>
 8007022:	460b      	mov	r3, r1
 8007024:	4945      	ldr	r1, [pc, #276]	@ (800713c <_strtod_l+0xadc>)
 8007026:	4a4a      	ldr	r2, [pc, #296]	@ (8007150 <_strtod_l+0xaf0>)
 8007028:	4019      	ands	r1, r3
 800702a:	4291      	cmp	r1, r2
 800702c:	4682      	mov	sl, r0
 800702e:	d942      	bls.n	80070b6 <_strtod_l+0xa56>
 8007030:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007032:	4b43      	ldr	r3, [pc, #268]	@ (8007140 <_strtod_l+0xae0>)
 8007034:	429a      	cmp	r2, r3
 8007036:	d103      	bne.n	8007040 <_strtod_l+0x9e0>
 8007038:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800703a:	3301      	adds	r3, #1
 800703c:	f43f ad2b 	beq.w	8006a96 <_strtod_l+0x436>
 8007040:	f04f 3aff 	mov.w	sl, #4294967295
 8007044:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007140 <_strtod_l+0xae0>
 8007048:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800704a:	9805      	ldr	r0, [sp, #20]
 800704c:	f000 ffa8 	bl	8007fa0 <_Bfree>
 8007050:	4649      	mov	r1, r9
 8007052:	9805      	ldr	r0, [sp, #20]
 8007054:	f000 ffa4 	bl	8007fa0 <_Bfree>
 8007058:	4641      	mov	r1, r8
 800705a:	9805      	ldr	r0, [sp, #20]
 800705c:	f000 ffa0 	bl	8007fa0 <_Bfree>
 8007060:	4621      	mov	r1, r4
 8007062:	9805      	ldr	r0, [sp, #20]
 8007064:	f000 ff9c 	bl	8007fa0 <_Bfree>
 8007068:	e618      	b.n	8006c9c <_strtod_l+0x63c>
 800706a:	f1ba 0f01 	cmp.w	sl, #1
 800706e:	d103      	bne.n	8007078 <_strtod_l+0xa18>
 8007070:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007072:	2b00      	cmp	r3, #0
 8007074:	f43f ada5 	beq.w	8006bc2 <_strtod_l+0x562>
 8007078:	2200      	movs	r2, #0
 800707a:	4b36      	ldr	r3, [pc, #216]	@ (8007154 <_strtod_l+0xaf4>)
 800707c:	2600      	movs	r6, #0
 800707e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007082:	4f30      	ldr	r7, [pc, #192]	@ (8007144 <_strtod_l+0xae4>)
 8007084:	e7b3      	b.n	8006fee <_strtod_l+0x98e>
 8007086:	2600      	movs	r6, #0
 8007088:	4f2f      	ldr	r7, [pc, #188]	@ (8007148 <_strtod_l+0xae8>)
 800708a:	e7ac      	b.n	8006fe6 <_strtod_l+0x986>
 800708c:	4630      	mov	r0, r6
 800708e:	4639      	mov	r1, r7
 8007090:	4b2d      	ldr	r3, [pc, #180]	@ (8007148 <_strtod_l+0xae8>)
 8007092:	2200      	movs	r2, #0
 8007094:	f7f9 fa20 	bl	80004d8 <__aeabi_dmul>
 8007098:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800709a:	4606      	mov	r6, r0
 800709c:	460f      	mov	r7, r1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0a1      	beq.n	8006fe6 <_strtod_l+0x986>
 80070a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80070a6:	e7a2      	b.n	8006fee <_strtod_l+0x98e>
 80070a8:	2200      	movs	r2, #0
 80070aa:	4b26      	ldr	r3, [pc, #152]	@ (8007144 <_strtod_l+0xae4>)
 80070ac:	4616      	mov	r6, r2
 80070ae:	461f      	mov	r7, r3
 80070b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070b4:	e79b      	b.n	8006fee <_strtod_l+0x98e>
 80070b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80070ba:	9b08      	ldr	r3, [sp, #32]
 80070bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1c1      	bne.n	8007048 <_strtod_l+0x9e8>
 80070c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070c8:	0d1b      	lsrs	r3, r3, #20
 80070ca:	051b      	lsls	r3, r3, #20
 80070cc:	429d      	cmp	r5, r3
 80070ce:	d1bb      	bne.n	8007048 <_strtod_l+0x9e8>
 80070d0:	4630      	mov	r0, r6
 80070d2:	4639      	mov	r1, r7
 80070d4:	f7fa f850 	bl	8001178 <__aeabi_d2lz>
 80070d8:	f7f9 f9d0 	bl	800047c <__aeabi_l2d>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	4630      	mov	r0, r6
 80070e2:	4639      	mov	r1, r7
 80070e4:	f7f9 f840 	bl	8000168 <__aeabi_dsub>
 80070e8:	460b      	mov	r3, r1
 80070ea:	4602      	mov	r2, r0
 80070ec:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80070f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80070f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070f6:	ea46 060a 	orr.w	r6, r6, sl
 80070fa:	431e      	orrs	r6, r3
 80070fc:	d069      	beq.n	80071d2 <_strtod_l+0xb72>
 80070fe:	a30a      	add	r3, pc, #40	@ (adr r3, 8007128 <_strtod_l+0xac8>)
 8007100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007104:	f7f9 fc5a 	bl	80009bc <__aeabi_dcmplt>
 8007108:	2800      	cmp	r0, #0
 800710a:	f47f accf 	bne.w	8006aac <_strtod_l+0x44c>
 800710e:	a308      	add	r3, pc, #32	@ (adr r3, 8007130 <_strtod_l+0xad0>)
 8007110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007114:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007118:	f7f9 fc6e 	bl	80009f8 <__aeabi_dcmpgt>
 800711c:	2800      	cmp	r0, #0
 800711e:	d093      	beq.n	8007048 <_strtod_l+0x9e8>
 8007120:	e4c4      	b.n	8006aac <_strtod_l+0x44c>
 8007122:	bf00      	nop
 8007124:	f3af 8000 	nop.w
 8007128:	94a03595 	.word	0x94a03595
 800712c:	3fdfffff 	.word	0x3fdfffff
 8007130:	35afe535 	.word	0x35afe535
 8007134:	3fe00000 	.word	0x3fe00000
 8007138:	000fffff 	.word	0x000fffff
 800713c:	7ff00000 	.word	0x7ff00000
 8007140:	7fefffff 	.word	0x7fefffff
 8007144:	3ff00000 	.word	0x3ff00000
 8007148:	3fe00000 	.word	0x3fe00000
 800714c:	7fe00000 	.word	0x7fe00000
 8007150:	7c9fffff 	.word	0x7c9fffff
 8007154:	bff00000 	.word	0xbff00000
 8007158:	9b08      	ldr	r3, [sp, #32]
 800715a:	b323      	cbz	r3, 80071a6 <_strtod_l+0xb46>
 800715c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007160:	d821      	bhi.n	80071a6 <_strtod_l+0xb46>
 8007162:	a327      	add	r3, pc, #156	@ (adr r3, 8007200 <_strtod_l+0xba0>)
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	4630      	mov	r0, r6
 800716a:	4639      	mov	r1, r7
 800716c:	f7f9 fc30 	bl	80009d0 <__aeabi_dcmple>
 8007170:	b1a0      	cbz	r0, 800719c <_strtod_l+0xb3c>
 8007172:	4639      	mov	r1, r7
 8007174:	4630      	mov	r0, r6
 8007176:	f7f9 fc5f 	bl	8000a38 <__aeabi_d2uiz>
 800717a:	2801      	cmp	r0, #1
 800717c:	bf38      	it	cc
 800717e:	2001      	movcc	r0, #1
 8007180:	f7f9 f930 	bl	80003e4 <__aeabi_ui2d>
 8007184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007186:	4606      	mov	r6, r0
 8007188:	460f      	mov	r7, r1
 800718a:	b9fb      	cbnz	r3, 80071cc <_strtod_l+0xb6c>
 800718c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007190:	9014      	str	r0, [sp, #80]	@ 0x50
 8007192:	9315      	str	r3, [sp, #84]	@ 0x54
 8007194:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007198:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800719c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800719e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80071a2:	1b5b      	subs	r3, r3, r5
 80071a4:	9311      	str	r3, [sp, #68]	@ 0x44
 80071a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071aa:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80071ae:	f001 fa29 	bl	8008604 <__ulp>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	4650      	mov	r0, sl
 80071b8:	4659      	mov	r1, fp
 80071ba:	f7f9 f98d 	bl	80004d8 <__aeabi_dmul>
 80071be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80071c2:	f7f8 ffd3 	bl	800016c <__adddf3>
 80071c6:	4682      	mov	sl, r0
 80071c8:	468b      	mov	fp, r1
 80071ca:	e776      	b.n	80070ba <_strtod_l+0xa5a>
 80071cc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80071d0:	e7e0      	b.n	8007194 <_strtod_l+0xb34>
 80071d2:	a30d      	add	r3, pc, #52	@ (adr r3, 8007208 <_strtod_l+0xba8>)
 80071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d8:	f7f9 fbf0 	bl	80009bc <__aeabi_dcmplt>
 80071dc:	e79e      	b.n	800711c <_strtod_l+0xabc>
 80071de:	2300      	movs	r3, #0
 80071e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071e4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	f7ff ba77 	b.w	80066da <_strtod_l+0x7a>
 80071ec:	2a65      	cmp	r2, #101	@ 0x65
 80071ee:	f43f ab6e 	beq.w	80068ce <_strtod_l+0x26e>
 80071f2:	2a45      	cmp	r2, #69	@ 0x45
 80071f4:	f43f ab6b 	beq.w	80068ce <_strtod_l+0x26e>
 80071f8:	2301      	movs	r3, #1
 80071fa:	f7ff bba6 	b.w	800694a <_strtod_l+0x2ea>
 80071fe:	bf00      	nop
 8007200:	ffc00000 	.word	0xffc00000
 8007204:	41dfffff 	.word	0x41dfffff
 8007208:	94a03595 	.word	0x94a03595
 800720c:	3fcfffff 	.word	0x3fcfffff

08007210 <strtof>:
 8007210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007214:	4d24      	ldr	r5, [pc, #144]	@ (80072a8 <strtof+0x98>)
 8007216:	460a      	mov	r2, r1
 8007218:	4b24      	ldr	r3, [pc, #144]	@ (80072ac <strtof+0x9c>)
 800721a:	4601      	mov	r1, r0
 800721c:	6828      	ldr	r0, [r5, #0]
 800721e:	f7ff fa1f 	bl	8006660 <_strtod_l>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4606      	mov	r6, r0
 8007228:	460f      	mov	r7, r1
 800722a:	f7f9 fbef 	bl	8000a0c <__aeabi_dcmpun>
 800722e:	b168      	cbz	r0, 800724c <strtof+0x3c>
 8007230:	2f00      	cmp	r7, #0
 8007232:	481f      	ldr	r0, [pc, #124]	@ (80072b0 <strtof+0xa0>)
 8007234:	da06      	bge.n	8007244 <strtof+0x34>
 8007236:	f000 fa2d 	bl	8007694 <nanf>
 800723a:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800723e:	4620      	mov	r0, r4
 8007240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007244:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007248:	f000 ba24 	b.w	8007694 <nanf>
 800724c:	4639      	mov	r1, r7
 800724e:	4630      	mov	r0, r6
 8007250:	f7f9 fc12 	bl	8000a78 <__aeabi_d2f>
 8007254:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8007258:	4604      	mov	r4, r0
 800725a:	4916      	ldr	r1, [pc, #88]	@ (80072b4 <strtof+0xa4>)
 800725c:	4640      	mov	r0, r8
 800725e:	f7f9 ff2f 	bl	80010c0 <__aeabi_fcmpun>
 8007262:	b9b0      	cbnz	r0, 8007292 <strtof+0x82>
 8007264:	4640      	mov	r0, r8
 8007266:	4913      	ldr	r1, [pc, #76]	@ (80072b4 <strtof+0xa4>)
 8007268:	f7f9 ff0c 	bl	8001084 <__aeabi_fcmple>
 800726c:	b988      	cbnz	r0, 8007292 <strtof+0x82>
 800726e:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 8007272:	f04f 32ff 	mov.w	r2, #4294967295
 8007276:	4630      	mov	r0, r6
 8007278:	4649      	mov	r1, r9
 800727a:	4b0f      	ldr	r3, [pc, #60]	@ (80072b8 <strtof+0xa8>)
 800727c:	f7f9 fbc6 	bl	8000a0c <__aeabi_dcmpun>
 8007280:	b970      	cbnz	r0, 80072a0 <strtof+0x90>
 8007282:	f04f 32ff 	mov.w	r2, #4294967295
 8007286:	4630      	mov	r0, r6
 8007288:	4649      	mov	r1, r9
 800728a:	4b0b      	ldr	r3, [pc, #44]	@ (80072b8 <strtof+0xa8>)
 800728c:	f7f9 fba0 	bl	80009d0 <__aeabi_dcmple>
 8007290:	b930      	cbnz	r0, 80072a0 <strtof+0x90>
 8007292:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8007296:	d1d2      	bne.n	800723e <strtof+0x2e>
 8007298:	4b08      	ldr	r3, [pc, #32]	@ (80072bc <strtof+0xac>)
 800729a:	403b      	ands	r3, r7
 800729c:	2b00      	cmp	r3, #0
 800729e:	d0ce      	beq.n	800723e <strtof+0x2e>
 80072a0:	2222      	movs	r2, #34	@ 0x22
 80072a2:	682b      	ldr	r3, [r5, #0]
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	e7ca      	b.n	800723e <strtof+0x2e>
 80072a8:	20000184 	.word	0x20000184
 80072ac:	20000018 	.word	0x20000018
 80072b0:	08009714 	.word	0x08009714
 80072b4:	7f7fffff 	.word	0x7f7fffff
 80072b8:	7fefffff 	.word	0x7fefffff
 80072bc:	7ff00000 	.word	0x7ff00000

080072c0 <__utoa>:
 80072c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072c2:	b08b      	sub	sp, #44	@ 0x2c
 80072c4:	4605      	mov	r5, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	466e      	mov	r6, sp
 80072ca:	4c1d      	ldr	r4, [pc, #116]	@ (8007340 <__utoa+0x80>)
 80072cc:	f104 0c20 	add.w	ip, r4, #32
 80072d0:	4637      	mov	r7, r6
 80072d2:	6820      	ldr	r0, [r4, #0]
 80072d4:	6861      	ldr	r1, [r4, #4]
 80072d6:	3408      	adds	r4, #8
 80072d8:	c703      	stmia	r7!, {r0, r1}
 80072da:	4564      	cmp	r4, ip
 80072dc:	463e      	mov	r6, r7
 80072de:	d1f7      	bne.n	80072d0 <__utoa+0x10>
 80072e0:	7921      	ldrb	r1, [r4, #4]
 80072e2:	6820      	ldr	r0, [r4, #0]
 80072e4:	7139      	strb	r1, [r7, #4]
 80072e6:	1e91      	subs	r1, r2, #2
 80072e8:	2922      	cmp	r1, #34	@ 0x22
 80072ea:	6038      	str	r0, [r7, #0]
 80072ec:	f04f 0100 	mov.w	r1, #0
 80072f0:	d904      	bls.n	80072fc <__utoa+0x3c>
 80072f2:	7019      	strb	r1, [r3, #0]
 80072f4:	460b      	mov	r3, r1
 80072f6:	4618      	mov	r0, r3
 80072f8:	b00b      	add	sp, #44	@ 0x2c
 80072fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072fc:	1e58      	subs	r0, r3, #1
 80072fe:	4684      	mov	ip, r0
 8007300:	fbb5 f7f2 	udiv	r7, r5, r2
 8007304:	fb02 5617 	mls	r6, r2, r7, r5
 8007308:	3628      	adds	r6, #40	@ 0x28
 800730a:	446e      	add	r6, sp
 800730c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007310:	460c      	mov	r4, r1
 8007312:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007316:	462e      	mov	r6, r5
 8007318:	42b2      	cmp	r2, r6
 800731a:	463d      	mov	r5, r7
 800731c:	f101 0101 	add.w	r1, r1, #1
 8007320:	d9ee      	bls.n	8007300 <__utoa+0x40>
 8007322:	2200      	movs	r2, #0
 8007324:	545a      	strb	r2, [r3, r1]
 8007326:	1919      	adds	r1, r3, r4
 8007328:	1aa5      	subs	r5, r4, r2
 800732a:	42aa      	cmp	r2, r5
 800732c:	dae3      	bge.n	80072f6 <__utoa+0x36>
 800732e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007332:	780e      	ldrb	r6, [r1, #0]
 8007334:	3201      	adds	r2, #1
 8007336:	7006      	strb	r6, [r0, #0]
 8007338:	f801 5901 	strb.w	r5, [r1], #-1
 800733c:	e7f4      	b.n	8007328 <__utoa+0x68>
 800733e:	bf00      	nop
 8007340:	080093c8 	.word	0x080093c8

08007344 <std>:
 8007344:	2300      	movs	r3, #0
 8007346:	b510      	push	{r4, lr}
 8007348:	4604      	mov	r4, r0
 800734a:	e9c0 3300 	strd	r3, r3, [r0]
 800734e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007352:	6083      	str	r3, [r0, #8]
 8007354:	8181      	strh	r1, [r0, #12]
 8007356:	6643      	str	r3, [r0, #100]	@ 0x64
 8007358:	81c2      	strh	r2, [r0, #14]
 800735a:	6183      	str	r3, [r0, #24]
 800735c:	4619      	mov	r1, r3
 800735e:	2208      	movs	r2, #8
 8007360:	305c      	adds	r0, #92	@ 0x5c
 8007362:	f000 f8f4 	bl	800754e <memset>
 8007366:	4b0d      	ldr	r3, [pc, #52]	@ (800739c <std+0x58>)
 8007368:	6224      	str	r4, [r4, #32]
 800736a:	6263      	str	r3, [r4, #36]	@ 0x24
 800736c:	4b0c      	ldr	r3, [pc, #48]	@ (80073a0 <std+0x5c>)
 800736e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007370:	4b0c      	ldr	r3, [pc, #48]	@ (80073a4 <std+0x60>)
 8007372:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007374:	4b0c      	ldr	r3, [pc, #48]	@ (80073a8 <std+0x64>)
 8007376:	6323      	str	r3, [r4, #48]	@ 0x30
 8007378:	4b0c      	ldr	r3, [pc, #48]	@ (80073ac <std+0x68>)
 800737a:	429c      	cmp	r4, r3
 800737c:	d006      	beq.n	800738c <std+0x48>
 800737e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007382:	4294      	cmp	r4, r2
 8007384:	d002      	beq.n	800738c <std+0x48>
 8007386:	33d0      	adds	r3, #208	@ 0xd0
 8007388:	429c      	cmp	r4, r3
 800738a:	d105      	bne.n	8007398 <std+0x54>
 800738c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007394:	f000 b966 	b.w	8007664 <__retarget_lock_init_recursive>
 8007398:	bd10      	pop	{r4, pc}
 800739a:	bf00      	nop
 800739c:	080074c9 	.word	0x080074c9
 80073a0:	080074eb 	.word	0x080074eb
 80073a4:	08007523 	.word	0x08007523
 80073a8:	08007547 	.word	0x08007547
 80073ac:	200003e0 	.word	0x200003e0

080073b0 <stdio_exit_handler>:
 80073b0:	4a02      	ldr	r2, [pc, #8]	@ (80073bc <stdio_exit_handler+0xc>)
 80073b2:	4903      	ldr	r1, [pc, #12]	@ (80073c0 <stdio_exit_handler+0x10>)
 80073b4:	4803      	ldr	r0, [pc, #12]	@ (80073c4 <stdio_exit_handler+0x14>)
 80073b6:	f000 b869 	b.w	800748c <_fwalk_sglue>
 80073ba:	bf00      	nop
 80073bc:	2000000c 	.word	0x2000000c
 80073c0:	08008989 	.word	0x08008989
 80073c4:	20000188 	.word	0x20000188

080073c8 <cleanup_stdio>:
 80073c8:	6841      	ldr	r1, [r0, #4]
 80073ca:	4b0c      	ldr	r3, [pc, #48]	@ (80073fc <cleanup_stdio+0x34>)
 80073cc:	b510      	push	{r4, lr}
 80073ce:	4299      	cmp	r1, r3
 80073d0:	4604      	mov	r4, r0
 80073d2:	d001      	beq.n	80073d8 <cleanup_stdio+0x10>
 80073d4:	f001 fad8 	bl	8008988 <_fflush_r>
 80073d8:	68a1      	ldr	r1, [r4, #8]
 80073da:	4b09      	ldr	r3, [pc, #36]	@ (8007400 <cleanup_stdio+0x38>)
 80073dc:	4299      	cmp	r1, r3
 80073de:	d002      	beq.n	80073e6 <cleanup_stdio+0x1e>
 80073e0:	4620      	mov	r0, r4
 80073e2:	f001 fad1 	bl	8008988 <_fflush_r>
 80073e6:	68e1      	ldr	r1, [r4, #12]
 80073e8:	4b06      	ldr	r3, [pc, #24]	@ (8007404 <cleanup_stdio+0x3c>)
 80073ea:	4299      	cmp	r1, r3
 80073ec:	d004      	beq.n	80073f8 <cleanup_stdio+0x30>
 80073ee:	4620      	mov	r0, r4
 80073f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f4:	f001 bac8 	b.w	8008988 <_fflush_r>
 80073f8:	bd10      	pop	{r4, pc}
 80073fa:	bf00      	nop
 80073fc:	200003e0 	.word	0x200003e0
 8007400:	20000448 	.word	0x20000448
 8007404:	200004b0 	.word	0x200004b0

08007408 <global_stdio_init.part.0>:
 8007408:	b510      	push	{r4, lr}
 800740a:	4b0b      	ldr	r3, [pc, #44]	@ (8007438 <global_stdio_init.part.0+0x30>)
 800740c:	4c0b      	ldr	r4, [pc, #44]	@ (800743c <global_stdio_init.part.0+0x34>)
 800740e:	4a0c      	ldr	r2, [pc, #48]	@ (8007440 <global_stdio_init.part.0+0x38>)
 8007410:	4620      	mov	r0, r4
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	2104      	movs	r1, #4
 8007416:	2200      	movs	r2, #0
 8007418:	f7ff ff94 	bl	8007344 <std>
 800741c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007420:	2201      	movs	r2, #1
 8007422:	2109      	movs	r1, #9
 8007424:	f7ff ff8e 	bl	8007344 <std>
 8007428:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800742c:	2202      	movs	r2, #2
 800742e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007432:	2112      	movs	r1, #18
 8007434:	f7ff bf86 	b.w	8007344 <std>
 8007438:	20000518 	.word	0x20000518
 800743c:	200003e0 	.word	0x200003e0
 8007440:	080073b1 	.word	0x080073b1

08007444 <__sfp_lock_acquire>:
 8007444:	4801      	ldr	r0, [pc, #4]	@ (800744c <__sfp_lock_acquire+0x8>)
 8007446:	f000 b90e 	b.w	8007666 <__retarget_lock_acquire_recursive>
 800744a:	bf00      	nop
 800744c:	20000521 	.word	0x20000521

08007450 <__sfp_lock_release>:
 8007450:	4801      	ldr	r0, [pc, #4]	@ (8007458 <__sfp_lock_release+0x8>)
 8007452:	f000 b909 	b.w	8007668 <__retarget_lock_release_recursive>
 8007456:	bf00      	nop
 8007458:	20000521 	.word	0x20000521

0800745c <__sinit>:
 800745c:	b510      	push	{r4, lr}
 800745e:	4604      	mov	r4, r0
 8007460:	f7ff fff0 	bl	8007444 <__sfp_lock_acquire>
 8007464:	6a23      	ldr	r3, [r4, #32]
 8007466:	b11b      	cbz	r3, 8007470 <__sinit+0x14>
 8007468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800746c:	f7ff bff0 	b.w	8007450 <__sfp_lock_release>
 8007470:	4b04      	ldr	r3, [pc, #16]	@ (8007484 <__sinit+0x28>)
 8007472:	6223      	str	r3, [r4, #32]
 8007474:	4b04      	ldr	r3, [pc, #16]	@ (8007488 <__sinit+0x2c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1f5      	bne.n	8007468 <__sinit+0xc>
 800747c:	f7ff ffc4 	bl	8007408 <global_stdio_init.part.0>
 8007480:	e7f2      	b.n	8007468 <__sinit+0xc>
 8007482:	bf00      	nop
 8007484:	080073c9 	.word	0x080073c9
 8007488:	20000518 	.word	0x20000518

0800748c <_fwalk_sglue>:
 800748c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007490:	4607      	mov	r7, r0
 8007492:	4688      	mov	r8, r1
 8007494:	4614      	mov	r4, r2
 8007496:	2600      	movs	r6, #0
 8007498:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800749c:	f1b9 0901 	subs.w	r9, r9, #1
 80074a0:	d505      	bpl.n	80074ae <_fwalk_sglue+0x22>
 80074a2:	6824      	ldr	r4, [r4, #0]
 80074a4:	2c00      	cmp	r4, #0
 80074a6:	d1f7      	bne.n	8007498 <_fwalk_sglue+0xc>
 80074a8:	4630      	mov	r0, r6
 80074aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ae:	89ab      	ldrh	r3, [r5, #12]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d907      	bls.n	80074c4 <_fwalk_sglue+0x38>
 80074b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074b8:	3301      	adds	r3, #1
 80074ba:	d003      	beq.n	80074c4 <_fwalk_sglue+0x38>
 80074bc:	4629      	mov	r1, r5
 80074be:	4638      	mov	r0, r7
 80074c0:	47c0      	blx	r8
 80074c2:	4306      	orrs	r6, r0
 80074c4:	3568      	adds	r5, #104	@ 0x68
 80074c6:	e7e9      	b.n	800749c <_fwalk_sglue+0x10>

080074c8 <__sread>:
 80074c8:	b510      	push	{r4, lr}
 80074ca:	460c      	mov	r4, r1
 80074cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d0:	f000 f87a 	bl	80075c8 <_read_r>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	bfab      	itete	ge
 80074d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074da:	89a3      	ldrhlt	r3, [r4, #12]
 80074dc:	181b      	addge	r3, r3, r0
 80074de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074e2:	bfac      	ite	ge
 80074e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074e6:	81a3      	strhlt	r3, [r4, #12]
 80074e8:	bd10      	pop	{r4, pc}

080074ea <__swrite>:
 80074ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ee:	461f      	mov	r7, r3
 80074f0:	898b      	ldrh	r3, [r1, #12]
 80074f2:	4605      	mov	r5, r0
 80074f4:	05db      	lsls	r3, r3, #23
 80074f6:	460c      	mov	r4, r1
 80074f8:	4616      	mov	r6, r2
 80074fa:	d505      	bpl.n	8007508 <__swrite+0x1e>
 80074fc:	2302      	movs	r3, #2
 80074fe:	2200      	movs	r2, #0
 8007500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007504:	f000 f84e 	bl	80075a4 <_lseek_r>
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	4632      	mov	r2, r6
 800750c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007510:	81a3      	strh	r3, [r4, #12]
 8007512:	4628      	mov	r0, r5
 8007514:	463b      	mov	r3, r7
 8007516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800751a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800751e:	f000 b865 	b.w	80075ec <_write_r>

08007522 <__sseek>:
 8007522:	b510      	push	{r4, lr}
 8007524:	460c      	mov	r4, r1
 8007526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752a:	f000 f83b 	bl	80075a4 <_lseek_r>
 800752e:	1c43      	adds	r3, r0, #1
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	bf15      	itete	ne
 8007534:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007536:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800753a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800753e:	81a3      	strheq	r3, [r4, #12]
 8007540:	bf18      	it	ne
 8007542:	81a3      	strhne	r3, [r4, #12]
 8007544:	bd10      	pop	{r4, pc}

08007546 <__sclose>:
 8007546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800754a:	f000 b81b 	b.w	8007584 <_close_r>

0800754e <memset>:
 800754e:	4603      	mov	r3, r0
 8007550:	4402      	add	r2, r0
 8007552:	4293      	cmp	r3, r2
 8007554:	d100      	bne.n	8007558 <memset+0xa>
 8007556:	4770      	bx	lr
 8007558:	f803 1b01 	strb.w	r1, [r3], #1
 800755c:	e7f9      	b.n	8007552 <memset+0x4>

0800755e <strncmp>:
 800755e:	b510      	push	{r4, lr}
 8007560:	b16a      	cbz	r2, 800757e <strncmp+0x20>
 8007562:	3901      	subs	r1, #1
 8007564:	1884      	adds	r4, r0, r2
 8007566:	f810 2b01 	ldrb.w	r2, [r0], #1
 800756a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800756e:	429a      	cmp	r2, r3
 8007570:	d103      	bne.n	800757a <strncmp+0x1c>
 8007572:	42a0      	cmp	r0, r4
 8007574:	d001      	beq.n	800757a <strncmp+0x1c>
 8007576:	2a00      	cmp	r2, #0
 8007578:	d1f5      	bne.n	8007566 <strncmp+0x8>
 800757a:	1ad0      	subs	r0, r2, r3
 800757c:	bd10      	pop	{r4, pc}
 800757e:	4610      	mov	r0, r2
 8007580:	e7fc      	b.n	800757c <strncmp+0x1e>
	...

08007584 <_close_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	2300      	movs	r3, #0
 8007588:	4d05      	ldr	r5, [pc, #20]	@ (80075a0 <_close_r+0x1c>)
 800758a:	4604      	mov	r4, r0
 800758c:	4608      	mov	r0, r1
 800758e:	602b      	str	r3, [r5, #0]
 8007590:	f7fa fedd 	bl	800234e <_close>
 8007594:	1c43      	adds	r3, r0, #1
 8007596:	d102      	bne.n	800759e <_close_r+0x1a>
 8007598:	682b      	ldr	r3, [r5, #0]
 800759a:	b103      	cbz	r3, 800759e <_close_r+0x1a>
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	bd38      	pop	{r3, r4, r5, pc}
 80075a0:	2000051c 	.word	0x2000051c

080075a4 <_lseek_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	4604      	mov	r4, r0
 80075a8:	4608      	mov	r0, r1
 80075aa:	4611      	mov	r1, r2
 80075ac:	2200      	movs	r2, #0
 80075ae:	4d05      	ldr	r5, [pc, #20]	@ (80075c4 <_lseek_r+0x20>)
 80075b0:	602a      	str	r2, [r5, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	f7fa feef 	bl	8002396 <_lseek>
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	d102      	bne.n	80075c2 <_lseek_r+0x1e>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	b103      	cbz	r3, 80075c2 <_lseek_r+0x1e>
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	2000051c 	.word	0x2000051c

080075c8 <_read_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4604      	mov	r4, r0
 80075cc:	4608      	mov	r0, r1
 80075ce:	4611      	mov	r1, r2
 80075d0:	2200      	movs	r2, #0
 80075d2:	4d05      	ldr	r5, [pc, #20]	@ (80075e8 <_read_r+0x20>)
 80075d4:	602a      	str	r2, [r5, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	f7fa fe80 	bl	80022dc <_read>
 80075dc:	1c43      	adds	r3, r0, #1
 80075de:	d102      	bne.n	80075e6 <_read_r+0x1e>
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	b103      	cbz	r3, 80075e6 <_read_r+0x1e>
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	2000051c 	.word	0x2000051c

080075ec <_write_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4604      	mov	r4, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	4611      	mov	r1, r2
 80075f4:	2200      	movs	r2, #0
 80075f6:	4d05      	ldr	r5, [pc, #20]	@ (800760c <_write_r+0x20>)
 80075f8:	602a      	str	r2, [r5, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	f7fa fe8b 	bl	8002316 <_write>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_write_r+0x1e>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b103      	cbz	r3, 800760a <_write_r+0x1e>
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	2000051c 	.word	0x2000051c

08007610 <__errno>:
 8007610:	4b01      	ldr	r3, [pc, #4]	@ (8007618 <__errno+0x8>)
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	20000184 	.word	0x20000184

0800761c <__libc_init_array>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	2600      	movs	r6, #0
 8007620:	4d0c      	ldr	r5, [pc, #48]	@ (8007654 <__libc_init_array+0x38>)
 8007622:	4c0d      	ldr	r4, [pc, #52]	@ (8007658 <__libc_init_array+0x3c>)
 8007624:	1b64      	subs	r4, r4, r5
 8007626:	10a4      	asrs	r4, r4, #2
 8007628:	42a6      	cmp	r6, r4
 800762a:	d109      	bne.n	8007640 <__libc_init_array+0x24>
 800762c:	f001 fe72 	bl	8009314 <_init>
 8007630:	2600      	movs	r6, #0
 8007632:	4d0a      	ldr	r5, [pc, #40]	@ (800765c <__libc_init_array+0x40>)
 8007634:	4c0a      	ldr	r4, [pc, #40]	@ (8007660 <__libc_init_array+0x44>)
 8007636:	1b64      	subs	r4, r4, r5
 8007638:	10a4      	asrs	r4, r4, #2
 800763a:	42a6      	cmp	r6, r4
 800763c:	d105      	bne.n	800764a <__libc_init_array+0x2e>
 800763e:	bd70      	pop	{r4, r5, r6, pc}
 8007640:	f855 3b04 	ldr.w	r3, [r5], #4
 8007644:	4798      	blx	r3
 8007646:	3601      	adds	r6, #1
 8007648:	e7ee      	b.n	8007628 <__libc_init_array+0xc>
 800764a:	f855 3b04 	ldr.w	r3, [r5], #4
 800764e:	4798      	blx	r3
 8007650:	3601      	adds	r6, #1
 8007652:	e7f2      	b.n	800763a <__libc_init_array+0x1e>
 8007654:	08009750 	.word	0x08009750
 8007658:	08009750 	.word	0x08009750
 800765c:	08009750 	.word	0x08009750
 8007660:	08009754 	.word	0x08009754

08007664 <__retarget_lock_init_recursive>:
 8007664:	4770      	bx	lr

08007666 <__retarget_lock_acquire_recursive>:
 8007666:	4770      	bx	lr

08007668 <__retarget_lock_release_recursive>:
 8007668:	4770      	bx	lr

0800766a <memcpy>:
 800766a:	440a      	add	r2, r1
 800766c:	4291      	cmp	r1, r2
 800766e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007672:	d100      	bne.n	8007676 <memcpy+0xc>
 8007674:	4770      	bx	lr
 8007676:	b510      	push	{r4, lr}
 8007678:	f811 4b01 	ldrb.w	r4, [r1], #1
 800767c:	4291      	cmp	r1, r2
 800767e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007682:	d1f9      	bne.n	8007678 <memcpy+0xe>
 8007684:	bd10      	pop	{r4, pc}
	...

08007688 <nan>:
 8007688:	2000      	movs	r0, #0
 800768a:	4901      	ldr	r1, [pc, #4]	@ (8007690 <nan+0x8>)
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	7ff80000 	.word	0x7ff80000

08007694 <nanf>:
 8007694:	4800      	ldr	r0, [pc, #0]	@ (8007698 <nanf+0x4>)
 8007696:	4770      	bx	lr
 8007698:	7fc00000 	.word	0x7fc00000

0800769c <_free_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4605      	mov	r5, r0
 80076a0:	2900      	cmp	r1, #0
 80076a2:	d040      	beq.n	8007726 <_free_r+0x8a>
 80076a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076a8:	1f0c      	subs	r4, r1, #4
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	bfb8      	it	lt
 80076ae:	18e4      	addlt	r4, r4, r3
 80076b0:	f000 fc2a 	bl	8007f08 <__malloc_lock>
 80076b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007728 <_free_r+0x8c>)
 80076b6:	6813      	ldr	r3, [r2, #0]
 80076b8:	b933      	cbnz	r3, 80076c8 <_free_r+0x2c>
 80076ba:	6063      	str	r3, [r4, #4]
 80076bc:	6014      	str	r4, [r2, #0]
 80076be:	4628      	mov	r0, r5
 80076c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076c4:	f000 bc26 	b.w	8007f14 <__malloc_unlock>
 80076c8:	42a3      	cmp	r3, r4
 80076ca:	d908      	bls.n	80076de <_free_r+0x42>
 80076cc:	6820      	ldr	r0, [r4, #0]
 80076ce:	1821      	adds	r1, r4, r0
 80076d0:	428b      	cmp	r3, r1
 80076d2:	bf01      	itttt	eq
 80076d4:	6819      	ldreq	r1, [r3, #0]
 80076d6:	685b      	ldreq	r3, [r3, #4]
 80076d8:	1809      	addeq	r1, r1, r0
 80076da:	6021      	streq	r1, [r4, #0]
 80076dc:	e7ed      	b.n	80076ba <_free_r+0x1e>
 80076de:	461a      	mov	r2, r3
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	b10b      	cbz	r3, 80076e8 <_free_r+0x4c>
 80076e4:	42a3      	cmp	r3, r4
 80076e6:	d9fa      	bls.n	80076de <_free_r+0x42>
 80076e8:	6811      	ldr	r1, [r2, #0]
 80076ea:	1850      	adds	r0, r2, r1
 80076ec:	42a0      	cmp	r0, r4
 80076ee:	d10b      	bne.n	8007708 <_free_r+0x6c>
 80076f0:	6820      	ldr	r0, [r4, #0]
 80076f2:	4401      	add	r1, r0
 80076f4:	1850      	adds	r0, r2, r1
 80076f6:	4283      	cmp	r3, r0
 80076f8:	6011      	str	r1, [r2, #0]
 80076fa:	d1e0      	bne.n	80076be <_free_r+0x22>
 80076fc:	6818      	ldr	r0, [r3, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	4408      	add	r0, r1
 8007702:	6010      	str	r0, [r2, #0]
 8007704:	6053      	str	r3, [r2, #4]
 8007706:	e7da      	b.n	80076be <_free_r+0x22>
 8007708:	d902      	bls.n	8007710 <_free_r+0x74>
 800770a:	230c      	movs	r3, #12
 800770c:	602b      	str	r3, [r5, #0]
 800770e:	e7d6      	b.n	80076be <_free_r+0x22>
 8007710:	6820      	ldr	r0, [r4, #0]
 8007712:	1821      	adds	r1, r4, r0
 8007714:	428b      	cmp	r3, r1
 8007716:	bf01      	itttt	eq
 8007718:	6819      	ldreq	r1, [r3, #0]
 800771a:	685b      	ldreq	r3, [r3, #4]
 800771c:	1809      	addeq	r1, r1, r0
 800771e:	6021      	streq	r1, [r4, #0]
 8007720:	6063      	str	r3, [r4, #4]
 8007722:	6054      	str	r4, [r2, #4]
 8007724:	e7cb      	b.n	80076be <_free_r+0x22>
 8007726:	bd38      	pop	{r3, r4, r5, pc}
 8007728:	20000528 	.word	0x20000528

0800772c <rshift>:
 800772c:	6903      	ldr	r3, [r0, #16]
 800772e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007732:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007736:	f100 0414 	add.w	r4, r0, #20
 800773a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800773e:	dd46      	ble.n	80077ce <rshift+0xa2>
 8007740:	f011 011f 	ands.w	r1, r1, #31
 8007744:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007748:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800774c:	d10c      	bne.n	8007768 <rshift+0x3c>
 800774e:	4629      	mov	r1, r5
 8007750:	f100 0710 	add.w	r7, r0, #16
 8007754:	42b1      	cmp	r1, r6
 8007756:	d335      	bcc.n	80077c4 <rshift+0x98>
 8007758:	1a9b      	subs	r3, r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	1eea      	subs	r2, r5, #3
 800775e:	4296      	cmp	r6, r2
 8007760:	bf38      	it	cc
 8007762:	2300      	movcc	r3, #0
 8007764:	4423      	add	r3, r4
 8007766:	e015      	b.n	8007794 <rshift+0x68>
 8007768:	46a1      	mov	r9, r4
 800776a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800776e:	f1c1 0820 	rsb	r8, r1, #32
 8007772:	40cf      	lsrs	r7, r1
 8007774:	f105 0e04 	add.w	lr, r5, #4
 8007778:	4576      	cmp	r6, lr
 800777a:	46f4      	mov	ip, lr
 800777c:	d816      	bhi.n	80077ac <rshift+0x80>
 800777e:	1a9a      	subs	r2, r3, r2
 8007780:	0092      	lsls	r2, r2, #2
 8007782:	3a04      	subs	r2, #4
 8007784:	3501      	adds	r5, #1
 8007786:	42ae      	cmp	r6, r5
 8007788:	bf38      	it	cc
 800778a:	2200      	movcc	r2, #0
 800778c:	18a3      	adds	r3, r4, r2
 800778e:	50a7      	str	r7, [r4, r2]
 8007790:	b107      	cbz	r7, 8007794 <rshift+0x68>
 8007792:	3304      	adds	r3, #4
 8007794:	42a3      	cmp	r3, r4
 8007796:	eba3 0204 	sub.w	r2, r3, r4
 800779a:	bf08      	it	eq
 800779c:	2300      	moveq	r3, #0
 800779e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80077a2:	6102      	str	r2, [r0, #16]
 80077a4:	bf08      	it	eq
 80077a6:	6143      	streq	r3, [r0, #20]
 80077a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077ac:	f8dc c000 	ldr.w	ip, [ip]
 80077b0:	fa0c fc08 	lsl.w	ip, ip, r8
 80077b4:	ea4c 0707 	orr.w	r7, ip, r7
 80077b8:	f849 7b04 	str.w	r7, [r9], #4
 80077bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80077c0:	40cf      	lsrs	r7, r1
 80077c2:	e7d9      	b.n	8007778 <rshift+0x4c>
 80077c4:	f851 cb04 	ldr.w	ip, [r1], #4
 80077c8:	f847 cf04 	str.w	ip, [r7, #4]!
 80077cc:	e7c2      	b.n	8007754 <rshift+0x28>
 80077ce:	4623      	mov	r3, r4
 80077d0:	e7e0      	b.n	8007794 <rshift+0x68>

080077d2 <__hexdig_fun>:
 80077d2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80077d6:	2b09      	cmp	r3, #9
 80077d8:	d802      	bhi.n	80077e0 <__hexdig_fun+0xe>
 80077da:	3820      	subs	r0, #32
 80077dc:	b2c0      	uxtb	r0, r0
 80077de:	4770      	bx	lr
 80077e0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80077e4:	2b05      	cmp	r3, #5
 80077e6:	d801      	bhi.n	80077ec <__hexdig_fun+0x1a>
 80077e8:	3847      	subs	r0, #71	@ 0x47
 80077ea:	e7f7      	b.n	80077dc <__hexdig_fun+0xa>
 80077ec:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80077f0:	2b05      	cmp	r3, #5
 80077f2:	d801      	bhi.n	80077f8 <__hexdig_fun+0x26>
 80077f4:	3827      	subs	r0, #39	@ 0x27
 80077f6:	e7f1      	b.n	80077dc <__hexdig_fun+0xa>
 80077f8:	2000      	movs	r0, #0
 80077fa:	4770      	bx	lr

080077fc <__gethex>:
 80077fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007800:	468a      	mov	sl, r1
 8007802:	4690      	mov	r8, r2
 8007804:	b085      	sub	sp, #20
 8007806:	9302      	str	r3, [sp, #8]
 8007808:	680b      	ldr	r3, [r1, #0]
 800780a:	9001      	str	r0, [sp, #4]
 800780c:	1c9c      	adds	r4, r3, #2
 800780e:	46a1      	mov	r9, r4
 8007810:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007814:	2830      	cmp	r0, #48	@ 0x30
 8007816:	d0fa      	beq.n	800780e <__gethex+0x12>
 8007818:	eba9 0303 	sub.w	r3, r9, r3
 800781c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007820:	f7ff ffd7 	bl	80077d2 <__hexdig_fun>
 8007824:	4605      	mov	r5, r0
 8007826:	2800      	cmp	r0, #0
 8007828:	d168      	bne.n	80078fc <__gethex+0x100>
 800782a:	2201      	movs	r2, #1
 800782c:	4648      	mov	r0, r9
 800782e:	499f      	ldr	r1, [pc, #636]	@ (8007aac <__gethex+0x2b0>)
 8007830:	f7ff fe95 	bl	800755e <strncmp>
 8007834:	4607      	mov	r7, r0
 8007836:	2800      	cmp	r0, #0
 8007838:	d167      	bne.n	800790a <__gethex+0x10e>
 800783a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800783e:	4626      	mov	r6, r4
 8007840:	f7ff ffc7 	bl	80077d2 <__hexdig_fun>
 8007844:	2800      	cmp	r0, #0
 8007846:	d062      	beq.n	800790e <__gethex+0x112>
 8007848:	4623      	mov	r3, r4
 800784a:	7818      	ldrb	r0, [r3, #0]
 800784c:	4699      	mov	r9, r3
 800784e:	2830      	cmp	r0, #48	@ 0x30
 8007850:	f103 0301 	add.w	r3, r3, #1
 8007854:	d0f9      	beq.n	800784a <__gethex+0x4e>
 8007856:	f7ff ffbc 	bl	80077d2 <__hexdig_fun>
 800785a:	fab0 f580 	clz	r5, r0
 800785e:	f04f 0b01 	mov.w	fp, #1
 8007862:	096d      	lsrs	r5, r5, #5
 8007864:	464a      	mov	r2, r9
 8007866:	4616      	mov	r6, r2
 8007868:	7830      	ldrb	r0, [r6, #0]
 800786a:	3201      	adds	r2, #1
 800786c:	f7ff ffb1 	bl	80077d2 <__hexdig_fun>
 8007870:	2800      	cmp	r0, #0
 8007872:	d1f8      	bne.n	8007866 <__gethex+0x6a>
 8007874:	2201      	movs	r2, #1
 8007876:	4630      	mov	r0, r6
 8007878:	498c      	ldr	r1, [pc, #560]	@ (8007aac <__gethex+0x2b0>)
 800787a:	f7ff fe70 	bl	800755e <strncmp>
 800787e:	2800      	cmp	r0, #0
 8007880:	d13f      	bne.n	8007902 <__gethex+0x106>
 8007882:	b944      	cbnz	r4, 8007896 <__gethex+0x9a>
 8007884:	1c74      	adds	r4, r6, #1
 8007886:	4622      	mov	r2, r4
 8007888:	4616      	mov	r6, r2
 800788a:	7830      	ldrb	r0, [r6, #0]
 800788c:	3201      	adds	r2, #1
 800788e:	f7ff ffa0 	bl	80077d2 <__hexdig_fun>
 8007892:	2800      	cmp	r0, #0
 8007894:	d1f8      	bne.n	8007888 <__gethex+0x8c>
 8007896:	1ba4      	subs	r4, r4, r6
 8007898:	00a7      	lsls	r7, r4, #2
 800789a:	7833      	ldrb	r3, [r6, #0]
 800789c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80078a0:	2b50      	cmp	r3, #80	@ 0x50
 80078a2:	d13e      	bne.n	8007922 <__gethex+0x126>
 80078a4:	7873      	ldrb	r3, [r6, #1]
 80078a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80078a8:	d033      	beq.n	8007912 <__gethex+0x116>
 80078aa:	2b2d      	cmp	r3, #45	@ 0x2d
 80078ac:	d034      	beq.n	8007918 <__gethex+0x11c>
 80078ae:	2400      	movs	r4, #0
 80078b0:	1c71      	adds	r1, r6, #1
 80078b2:	7808      	ldrb	r0, [r1, #0]
 80078b4:	f7ff ff8d 	bl	80077d2 <__hexdig_fun>
 80078b8:	1e43      	subs	r3, r0, #1
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b18      	cmp	r3, #24
 80078be:	d830      	bhi.n	8007922 <__gethex+0x126>
 80078c0:	f1a0 0210 	sub.w	r2, r0, #16
 80078c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80078c8:	f7ff ff83 	bl	80077d2 <__hexdig_fun>
 80078cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80078d0:	fa5f fc8c 	uxtb.w	ip, ip
 80078d4:	f1bc 0f18 	cmp.w	ip, #24
 80078d8:	f04f 030a 	mov.w	r3, #10
 80078dc:	d91e      	bls.n	800791c <__gethex+0x120>
 80078de:	b104      	cbz	r4, 80078e2 <__gethex+0xe6>
 80078e0:	4252      	negs	r2, r2
 80078e2:	4417      	add	r7, r2
 80078e4:	f8ca 1000 	str.w	r1, [sl]
 80078e8:	b1ed      	cbz	r5, 8007926 <__gethex+0x12a>
 80078ea:	f1bb 0f00 	cmp.w	fp, #0
 80078ee:	bf0c      	ite	eq
 80078f0:	2506      	moveq	r5, #6
 80078f2:	2500      	movne	r5, #0
 80078f4:	4628      	mov	r0, r5
 80078f6:	b005      	add	sp, #20
 80078f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fc:	2500      	movs	r5, #0
 80078fe:	462c      	mov	r4, r5
 8007900:	e7b0      	b.n	8007864 <__gethex+0x68>
 8007902:	2c00      	cmp	r4, #0
 8007904:	d1c7      	bne.n	8007896 <__gethex+0x9a>
 8007906:	4627      	mov	r7, r4
 8007908:	e7c7      	b.n	800789a <__gethex+0x9e>
 800790a:	464e      	mov	r6, r9
 800790c:	462f      	mov	r7, r5
 800790e:	2501      	movs	r5, #1
 8007910:	e7c3      	b.n	800789a <__gethex+0x9e>
 8007912:	2400      	movs	r4, #0
 8007914:	1cb1      	adds	r1, r6, #2
 8007916:	e7cc      	b.n	80078b2 <__gethex+0xb6>
 8007918:	2401      	movs	r4, #1
 800791a:	e7fb      	b.n	8007914 <__gethex+0x118>
 800791c:	fb03 0002 	mla	r0, r3, r2, r0
 8007920:	e7ce      	b.n	80078c0 <__gethex+0xc4>
 8007922:	4631      	mov	r1, r6
 8007924:	e7de      	b.n	80078e4 <__gethex+0xe8>
 8007926:	4629      	mov	r1, r5
 8007928:	eba6 0309 	sub.w	r3, r6, r9
 800792c:	3b01      	subs	r3, #1
 800792e:	2b07      	cmp	r3, #7
 8007930:	dc0a      	bgt.n	8007948 <__gethex+0x14c>
 8007932:	9801      	ldr	r0, [sp, #4]
 8007934:	f000 faf4 	bl	8007f20 <_Balloc>
 8007938:	4604      	mov	r4, r0
 800793a:	b940      	cbnz	r0, 800794e <__gethex+0x152>
 800793c:	4602      	mov	r2, r0
 800793e:	21e4      	movs	r1, #228	@ 0xe4
 8007940:	4b5b      	ldr	r3, [pc, #364]	@ (8007ab0 <__gethex+0x2b4>)
 8007942:	485c      	ldr	r0, [pc, #368]	@ (8007ab4 <__gethex+0x2b8>)
 8007944:	f001 f858 	bl	80089f8 <__assert_func>
 8007948:	3101      	adds	r1, #1
 800794a:	105b      	asrs	r3, r3, #1
 800794c:	e7ef      	b.n	800792e <__gethex+0x132>
 800794e:	2300      	movs	r3, #0
 8007950:	f100 0a14 	add.w	sl, r0, #20
 8007954:	4655      	mov	r5, sl
 8007956:	469b      	mov	fp, r3
 8007958:	45b1      	cmp	r9, r6
 800795a:	d337      	bcc.n	80079cc <__gethex+0x1d0>
 800795c:	f845 bb04 	str.w	fp, [r5], #4
 8007960:	eba5 050a 	sub.w	r5, r5, sl
 8007964:	10ad      	asrs	r5, r5, #2
 8007966:	6125      	str	r5, [r4, #16]
 8007968:	4658      	mov	r0, fp
 800796a:	f000 fbcb 	bl	8008104 <__hi0bits>
 800796e:	016d      	lsls	r5, r5, #5
 8007970:	f8d8 6000 	ldr.w	r6, [r8]
 8007974:	1a2d      	subs	r5, r5, r0
 8007976:	42b5      	cmp	r5, r6
 8007978:	dd54      	ble.n	8007a24 <__gethex+0x228>
 800797a:	1bad      	subs	r5, r5, r6
 800797c:	4629      	mov	r1, r5
 800797e:	4620      	mov	r0, r4
 8007980:	f000 ff53 	bl	800882a <__any_on>
 8007984:	4681      	mov	r9, r0
 8007986:	b178      	cbz	r0, 80079a8 <__gethex+0x1ac>
 8007988:	f04f 0901 	mov.w	r9, #1
 800798c:	1e6b      	subs	r3, r5, #1
 800798e:	1159      	asrs	r1, r3, #5
 8007990:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007994:	f003 021f 	and.w	r2, r3, #31
 8007998:	fa09 f202 	lsl.w	r2, r9, r2
 800799c:	420a      	tst	r2, r1
 800799e:	d003      	beq.n	80079a8 <__gethex+0x1ac>
 80079a0:	454b      	cmp	r3, r9
 80079a2:	dc36      	bgt.n	8007a12 <__gethex+0x216>
 80079a4:	f04f 0902 	mov.w	r9, #2
 80079a8:	4629      	mov	r1, r5
 80079aa:	4620      	mov	r0, r4
 80079ac:	f7ff febe 	bl	800772c <rshift>
 80079b0:	442f      	add	r7, r5
 80079b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079b6:	42bb      	cmp	r3, r7
 80079b8:	da42      	bge.n	8007a40 <__gethex+0x244>
 80079ba:	4621      	mov	r1, r4
 80079bc:	9801      	ldr	r0, [sp, #4]
 80079be:	f000 faef 	bl	8007fa0 <_Bfree>
 80079c2:	2300      	movs	r3, #0
 80079c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079c6:	25a3      	movs	r5, #163	@ 0xa3
 80079c8:	6013      	str	r3, [r2, #0]
 80079ca:	e793      	b.n	80078f4 <__gethex+0xf8>
 80079cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80079d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80079d2:	d012      	beq.n	80079fa <__gethex+0x1fe>
 80079d4:	2b20      	cmp	r3, #32
 80079d6:	d104      	bne.n	80079e2 <__gethex+0x1e6>
 80079d8:	f845 bb04 	str.w	fp, [r5], #4
 80079dc:	f04f 0b00 	mov.w	fp, #0
 80079e0:	465b      	mov	r3, fp
 80079e2:	7830      	ldrb	r0, [r6, #0]
 80079e4:	9303      	str	r3, [sp, #12]
 80079e6:	f7ff fef4 	bl	80077d2 <__hexdig_fun>
 80079ea:	9b03      	ldr	r3, [sp, #12]
 80079ec:	f000 000f 	and.w	r0, r0, #15
 80079f0:	4098      	lsls	r0, r3
 80079f2:	ea4b 0b00 	orr.w	fp, fp, r0
 80079f6:	3304      	adds	r3, #4
 80079f8:	e7ae      	b.n	8007958 <__gethex+0x15c>
 80079fa:	45b1      	cmp	r9, r6
 80079fc:	d8ea      	bhi.n	80079d4 <__gethex+0x1d8>
 80079fe:	2201      	movs	r2, #1
 8007a00:	4630      	mov	r0, r6
 8007a02:	492a      	ldr	r1, [pc, #168]	@ (8007aac <__gethex+0x2b0>)
 8007a04:	9303      	str	r3, [sp, #12]
 8007a06:	f7ff fdaa 	bl	800755e <strncmp>
 8007a0a:	9b03      	ldr	r3, [sp, #12]
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	d1e1      	bne.n	80079d4 <__gethex+0x1d8>
 8007a10:	e7a2      	b.n	8007958 <__gethex+0x15c>
 8007a12:	4620      	mov	r0, r4
 8007a14:	1ea9      	subs	r1, r5, #2
 8007a16:	f000 ff08 	bl	800882a <__any_on>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d0c2      	beq.n	80079a4 <__gethex+0x1a8>
 8007a1e:	f04f 0903 	mov.w	r9, #3
 8007a22:	e7c1      	b.n	80079a8 <__gethex+0x1ac>
 8007a24:	da09      	bge.n	8007a3a <__gethex+0x23e>
 8007a26:	1b75      	subs	r5, r6, r5
 8007a28:	4621      	mov	r1, r4
 8007a2a:	462a      	mov	r2, r5
 8007a2c:	9801      	ldr	r0, [sp, #4]
 8007a2e:	f000 fccd 	bl	80083cc <__lshift>
 8007a32:	4604      	mov	r4, r0
 8007a34:	1b7f      	subs	r7, r7, r5
 8007a36:	f100 0a14 	add.w	sl, r0, #20
 8007a3a:	f04f 0900 	mov.w	r9, #0
 8007a3e:	e7b8      	b.n	80079b2 <__gethex+0x1b6>
 8007a40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007a44:	42bd      	cmp	r5, r7
 8007a46:	dd6f      	ble.n	8007b28 <__gethex+0x32c>
 8007a48:	1bed      	subs	r5, r5, r7
 8007a4a:	42ae      	cmp	r6, r5
 8007a4c:	dc34      	bgt.n	8007ab8 <__gethex+0x2bc>
 8007a4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d022      	beq.n	8007a9c <__gethex+0x2a0>
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d024      	beq.n	8007aa4 <__gethex+0x2a8>
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d115      	bne.n	8007a8a <__gethex+0x28e>
 8007a5e:	42ae      	cmp	r6, r5
 8007a60:	d113      	bne.n	8007a8a <__gethex+0x28e>
 8007a62:	2e01      	cmp	r6, #1
 8007a64:	d10b      	bne.n	8007a7e <__gethex+0x282>
 8007a66:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007a6a:	9a02      	ldr	r2, [sp, #8]
 8007a6c:	2562      	movs	r5, #98	@ 0x62
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	2301      	movs	r3, #1
 8007a72:	6123      	str	r3, [r4, #16]
 8007a74:	f8ca 3000 	str.w	r3, [sl]
 8007a78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a7a:	601c      	str	r4, [r3, #0]
 8007a7c:	e73a      	b.n	80078f4 <__gethex+0xf8>
 8007a7e:	4620      	mov	r0, r4
 8007a80:	1e71      	subs	r1, r6, #1
 8007a82:	f000 fed2 	bl	800882a <__any_on>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d1ed      	bne.n	8007a66 <__gethex+0x26a>
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	9801      	ldr	r0, [sp, #4]
 8007a8e:	f000 fa87 	bl	8007fa0 <_Bfree>
 8007a92:	2300      	movs	r3, #0
 8007a94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a96:	2550      	movs	r5, #80	@ 0x50
 8007a98:	6013      	str	r3, [r2, #0]
 8007a9a:	e72b      	b.n	80078f4 <__gethex+0xf8>
 8007a9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1f3      	bne.n	8007a8a <__gethex+0x28e>
 8007aa2:	e7e0      	b.n	8007a66 <__gethex+0x26a>
 8007aa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1dd      	bne.n	8007a66 <__gethex+0x26a>
 8007aaa:	e7ee      	b.n	8007a8a <__gethex+0x28e>
 8007aac:	0800936a 	.word	0x0800936a
 8007ab0:	080093f5 	.word	0x080093f5
 8007ab4:	08009406 	.word	0x08009406
 8007ab8:	1e6f      	subs	r7, r5, #1
 8007aba:	f1b9 0f00 	cmp.w	r9, #0
 8007abe:	d130      	bne.n	8007b22 <__gethex+0x326>
 8007ac0:	b127      	cbz	r7, 8007acc <__gethex+0x2d0>
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f000 feb0 	bl	800882a <__any_on>
 8007aca:	4681      	mov	r9, r0
 8007acc:	2301      	movs	r3, #1
 8007ace:	4629      	mov	r1, r5
 8007ad0:	1b76      	subs	r6, r6, r5
 8007ad2:	2502      	movs	r5, #2
 8007ad4:	117a      	asrs	r2, r7, #5
 8007ad6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007ada:	f007 071f 	and.w	r7, r7, #31
 8007ade:	40bb      	lsls	r3, r7
 8007ae0:	4213      	tst	r3, r2
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	bf18      	it	ne
 8007ae6:	f049 0902 	orrne.w	r9, r9, #2
 8007aea:	f7ff fe1f 	bl	800772c <rshift>
 8007aee:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007af2:	f1b9 0f00 	cmp.w	r9, #0
 8007af6:	d047      	beq.n	8007b88 <__gethex+0x38c>
 8007af8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d015      	beq.n	8007b2c <__gethex+0x330>
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d017      	beq.n	8007b34 <__gethex+0x338>
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d109      	bne.n	8007b1c <__gethex+0x320>
 8007b08:	f019 0f02 	tst.w	r9, #2
 8007b0c:	d006      	beq.n	8007b1c <__gethex+0x320>
 8007b0e:	f8da 3000 	ldr.w	r3, [sl]
 8007b12:	ea49 0903 	orr.w	r9, r9, r3
 8007b16:	f019 0f01 	tst.w	r9, #1
 8007b1a:	d10e      	bne.n	8007b3a <__gethex+0x33e>
 8007b1c:	f045 0510 	orr.w	r5, r5, #16
 8007b20:	e032      	b.n	8007b88 <__gethex+0x38c>
 8007b22:	f04f 0901 	mov.w	r9, #1
 8007b26:	e7d1      	b.n	8007acc <__gethex+0x2d0>
 8007b28:	2501      	movs	r5, #1
 8007b2a:	e7e2      	b.n	8007af2 <__gethex+0x2f6>
 8007b2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b2e:	f1c3 0301 	rsb	r3, r3, #1
 8007b32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0f0      	beq.n	8007b1c <__gethex+0x320>
 8007b3a:	f04f 0c00 	mov.w	ip, #0
 8007b3e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007b42:	f104 0314 	add.w	r3, r4, #20
 8007b46:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007b4a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b54:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007b58:	d01b      	beq.n	8007b92 <__gethex+0x396>
 8007b5a:	3201      	adds	r2, #1
 8007b5c:	6002      	str	r2, [r0, #0]
 8007b5e:	2d02      	cmp	r5, #2
 8007b60:	f104 0314 	add.w	r3, r4, #20
 8007b64:	d13c      	bne.n	8007be0 <__gethex+0x3e4>
 8007b66:	f8d8 2000 	ldr.w	r2, [r8]
 8007b6a:	3a01      	subs	r2, #1
 8007b6c:	42b2      	cmp	r2, r6
 8007b6e:	d109      	bne.n	8007b84 <__gethex+0x388>
 8007b70:	2201      	movs	r2, #1
 8007b72:	1171      	asrs	r1, r6, #5
 8007b74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b78:	f006 061f 	and.w	r6, r6, #31
 8007b7c:	fa02 f606 	lsl.w	r6, r2, r6
 8007b80:	421e      	tst	r6, r3
 8007b82:	d13a      	bne.n	8007bfa <__gethex+0x3fe>
 8007b84:	f045 0520 	orr.w	r5, r5, #32
 8007b88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b8a:	601c      	str	r4, [r3, #0]
 8007b8c:	9b02      	ldr	r3, [sp, #8]
 8007b8e:	601f      	str	r7, [r3, #0]
 8007b90:	e6b0      	b.n	80078f4 <__gethex+0xf8>
 8007b92:	4299      	cmp	r1, r3
 8007b94:	f843 cc04 	str.w	ip, [r3, #-4]
 8007b98:	d8d9      	bhi.n	8007b4e <__gethex+0x352>
 8007b9a:	68a3      	ldr	r3, [r4, #8]
 8007b9c:	459b      	cmp	fp, r3
 8007b9e:	db17      	blt.n	8007bd0 <__gethex+0x3d4>
 8007ba0:	6861      	ldr	r1, [r4, #4]
 8007ba2:	9801      	ldr	r0, [sp, #4]
 8007ba4:	3101      	adds	r1, #1
 8007ba6:	f000 f9bb 	bl	8007f20 <_Balloc>
 8007baa:	4681      	mov	r9, r0
 8007bac:	b918      	cbnz	r0, 8007bb6 <__gethex+0x3ba>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	2184      	movs	r1, #132	@ 0x84
 8007bb2:	4b19      	ldr	r3, [pc, #100]	@ (8007c18 <__gethex+0x41c>)
 8007bb4:	e6c5      	b.n	8007942 <__gethex+0x146>
 8007bb6:	6922      	ldr	r2, [r4, #16]
 8007bb8:	f104 010c 	add.w	r1, r4, #12
 8007bbc:	3202      	adds	r2, #2
 8007bbe:	0092      	lsls	r2, r2, #2
 8007bc0:	300c      	adds	r0, #12
 8007bc2:	f7ff fd52 	bl	800766a <memcpy>
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	9801      	ldr	r0, [sp, #4]
 8007bca:	f000 f9e9 	bl	8007fa0 <_Bfree>
 8007bce:	464c      	mov	r4, r9
 8007bd0:	6923      	ldr	r3, [r4, #16]
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	6122      	str	r2, [r4, #16]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007bdc:	615a      	str	r2, [r3, #20]
 8007bde:	e7be      	b.n	8007b5e <__gethex+0x362>
 8007be0:	6922      	ldr	r2, [r4, #16]
 8007be2:	455a      	cmp	r2, fp
 8007be4:	dd0b      	ble.n	8007bfe <__gethex+0x402>
 8007be6:	2101      	movs	r1, #1
 8007be8:	4620      	mov	r0, r4
 8007bea:	f7ff fd9f 	bl	800772c <rshift>
 8007bee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007bf2:	3701      	adds	r7, #1
 8007bf4:	42bb      	cmp	r3, r7
 8007bf6:	f6ff aee0 	blt.w	80079ba <__gethex+0x1be>
 8007bfa:	2501      	movs	r5, #1
 8007bfc:	e7c2      	b.n	8007b84 <__gethex+0x388>
 8007bfe:	f016 061f 	ands.w	r6, r6, #31
 8007c02:	d0fa      	beq.n	8007bfa <__gethex+0x3fe>
 8007c04:	4453      	add	r3, sl
 8007c06:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007c0a:	f000 fa7b 	bl	8008104 <__hi0bits>
 8007c0e:	f1c6 0620 	rsb	r6, r6, #32
 8007c12:	42b0      	cmp	r0, r6
 8007c14:	dbe7      	blt.n	8007be6 <__gethex+0x3ea>
 8007c16:	e7f0      	b.n	8007bfa <__gethex+0x3fe>
 8007c18:	080093f5 	.word	0x080093f5

08007c1c <L_shift>:
 8007c1c:	f1c2 0208 	rsb	r2, r2, #8
 8007c20:	0092      	lsls	r2, r2, #2
 8007c22:	b570      	push	{r4, r5, r6, lr}
 8007c24:	f1c2 0620 	rsb	r6, r2, #32
 8007c28:	6843      	ldr	r3, [r0, #4]
 8007c2a:	6804      	ldr	r4, [r0, #0]
 8007c2c:	fa03 f506 	lsl.w	r5, r3, r6
 8007c30:	432c      	orrs	r4, r5
 8007c32:	40d3      	lsrs	r3, r2
 8007c34:	6004      	str	r4, [r0, #0]
 8007c36:	f840 3f04 	str.w	r3, [r0, #4]!
 8007c3a:	4288      	cmp	r0, r1
 8007c3c:	d3f4      	bcc.n	8007c28 <L_shift+0xc>
 8007c3e:	bd70      	pop	{r4, r5, r6, pc}

08007c40 <__match>:
 8007c40:	b530      	push	{r4, r5, lr}
 8007c42:	6803      	ldr	r3, [r0, #0]
 8007c44:	3301      	adds	r3, #1
 8007c46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c4a:	b914      	cbnz	r4, 8007c52 <__match+0x12>
 8007c4c:	6003      	str	r3, [r0, #0]
 8007c4e:	2001      	movs	r0, #1
 8007c50:	bd30      	pop	{r4, r5, pc}
 8007c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007c5a:	2d19      	cmp	r5, #25
 8007c5c:	bf98      	it	ls
 8007c5e:	3220      	addls	r2, #32
 8007c60:	42a2      	cmp	r2, r4
 8007c62:	d0f0      	beq.n	8007c46 <__match+0x6>
 8007c64:	2000      	movs	r0, #0
 8007c66:	e7f3      	b.n	8007c50 <__match+0x10>

08007c68 <__hexnan>:
 8007c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6c:	2500      	movs	r5, #0
 8007c6e:	680b      	ldr	r3, [r1, #0]
 8007c70:	4682      	mov	sl, r0
 8007c72:	115e      	asrs	r6, r3, #5
 8007c74:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007c78:	f013 031f 	ands.w	r3, r3, #31
 8007c7c:	bf18      	it	ne
 8007c7e:	3604      	addne	r6, #4
 8007c80:	1f37      	subs	r7, r6, #4
 8007c82:	4690      	mov	r8, r2
 8007c84:	46b9      	mov	r9, r7
 8007c86:	463c      	mov	r4, r7
 8007c88:	46ab      	mov	fp, r5
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	6801      	ldr	r1, [r0, #0]
 8007c8e:	9301      	str	r3, [sp, #4]
 8007c90:	f846 5c04 	str.w	r5, [r6, #-4]
 8007c94:	9502      	str	r5, [sp, #8]
 8007c96:	784a      	ldrb	r2, [r1, #1]
 8007c98:	1c4b      	adds	r3, r1, #1
 8007c9a:	9303      	str	r3, [sp, #12]
 8007c9c:	b342      	cbz	r2, 8007cf0 <__hexnan+0x88>
 8007c9e:	4610      	mov	r0, r2
 8007ca0:	9105      	str	r1, [sp, #20]
 8007ca2:	9204      	str	r2, [sp, #16]
 8007ca4:	f7ff fd95 	bl	80077d2 <__hexdig_fun>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d151      	bne.n	8007d50 <__hexnan+0xe8>
 8007cac:	9a04      	ldr	r2, [sp, #16]
 8007cae:	9905      	ldr	r1, [sp, #20]
 8007cb0:	2a20      	cmp	r2, #32
 8007cb2:	d818      	bhi.n	8007ce6 <__hexnan+0x7e>
 8007cb4:	9b02      	ldr	r3, [sp, #8]
 8007cb6:	459b      	cmp	fp, r3
 8007cb8:	dd13      	ble.n	8007ce2 <__hexnan+0x7a>
 8007cba:	454c      	cmp	r4, r9
 8007cbc:	d206      	bcs.n	8007ccc <__hexnan+0x64>
 8007cbe:	2d07      	cmp	r5, #7
 8007cc0:	dc04      	bgt.n	8007ccc <__hexnan+0x64>
 8007cc2:	462a      	mov	r2, r5
 8007cc4:	4649      	mov	r1, r9
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f7ff ffa8 	bl	8007c1c <L_shift>
 8007ccc:	4544      	cmp	r4, r8
 8007cce:	d952      	bls.n	8007d76 <__hexnan+0x10e>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f1a4 0904 	sub.w	r9, r4, #4
 8007cd6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007cda:	461d      	mov	r5, r3
 8007cdc:	464c      	mov	r4, r9
 8007cde:	f8cd b008 	str.w	fp, [sp, #8]
 8007ce2:	9903      	ldr	r1, [sp, #12]
 8007ce4:	e7d7      	b.n	8007c96 <__hexnan+0x2e>
 8007ce6:	2a29      	cmp	r2, #41	@ 0x29
 8007ce8:	d157      	bne.n	8007d9a <__hexnan+0x132>
 8007cea:	3102      	adds	r1, #2
 8007cec:	f8ca 1000 	str.w	r1, [sl]
 8007cf0:	f1bb 0f00 	cmp.w	fp, #0
 8007cf4:	d051      	beq.n	8007d9a <__hexnan+0x132>
 8007cf6:	454c      	cmp	r4, r9
 8007cf8:	d206      	bcs.n	8007d08 <__hexnan+0xa0>
 8007cfa:	2d07      	cmp	r5, #7
 8007cfc:	dc04      	bgt.n	8007d08 <__hexnan+0xa0>
 8007cfe:	462a      	mov	r2, r5
 8007d00:	4649      	mov	r1, r9
 8007d02:	4620      	mov	r0, r4
 8007d04:	f7ff ff8a 	bl	8007c1c <L_shift>
 8007d08:	4544      	cmp	r4, r8
 8007d0a:	d936      	bls.n	8007d7a <__hexnan+0x112>
 8007d0c:	4623      	mov	r3, r4
 8007d0e:	f1a8 0204 	sub.w	r2, r8, #4
 8007d12:	f853 1b04 	ldr.w	r1, [r3], #4
 8007d16:	429f      	cmp	r7, r3
 8007d18:	f842 1f04 	str.w	r1, [r2, #4]!
 8007d1c:	d2f9      	bcs.n	8007d12 <__hexnan+0xaa>
 8007d1e:	1b3b      	subs	r3, r7, r4
 8007d20:	f023 0303 	bic.w	r3, r3, #3
 8007d24:	3304      	adds	r3, #4
 8007d26:	3401      	adds	r4, #1
 8007d28:	3e03      	subs	r6, #3
 8007d2a:	42b4      	cmp	r4, r6
 8007d2c:	bf88      	it	hi
 8007d2e:	2304      	movhi	r3, #4
 8007d30:	2200      	movs	r2, #0
 8007d32:	4443      	add	r3, r8
 8007d34:	f843 2b04 	str.w	r2, [r3], #4
 8007d38:	429f      	cmp	r7, r3
 8007d3a:	d2fb      	bcs.n	8007d34 <__hexnan+0xcc>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	b91b      	cbnz	r3, 8007d48 <__hexnan+0xe0>
 8007d40:	4547      	cmp	r7, r8
 8007d42:	d128      	bne.n	8007d96 <__hexnan+0x12e>
 8007d44:	2301      	movs	r3, #1
 8007d46:	603b      	str	r3, [r7, #0]
 8007d48:	2005      	movs	r0, #5
 8007d4a:	b007      	add	sp, #28
 8007d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d50:	3501      	adds	r5, #1
 8007d52:	2d08      	cmp	r5, #8
 8007d54:	f10b 0b01 	add.w	fp, fp, #1
 8007d58:	dd06      	ble.n	8007d68 <__hexnan+0x100>
 8007d5a:	4544      	cmp	r4, r8
 8007d5c:	d9c1      	bls.n	8007ce2 <__hexnan+0x7a>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	2501      	movs	r5, #1
 8007d62:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d66:	3c04      	subs	r4, #4
 8007d68:	6822      	ldr	r2, [r4, #0]
 8007d6a:	f000 000f 	and.w	r0, r0, #15
 8007d6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007d72:	6020      	str	r0, [r4, #0]
 8007d74:	e7b5      	b.n	8007ce2 <__hexnan+0x7a>
 8007d76:	2508      	movs	r5, #8
 8007d78:	e7b3      	b.n	8007ce2 <__hexnan+0x7a>
 8007d7a:	9b01      	ldr	r3, [sp, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d0dd      	beq.n	8007d3c <__hexnan+0xd4>
 8007d80:	f04f 32ff 	mov.w	r2, #4294967295
 8007d84:	f1c3 0320 	rsb	r3, r3, #32
 8007d88:	40da      	lsrs	r2, r3
 8007d8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	f846 3c04 	str.w	r3, [r6, #-4]
 8007d94:	e7d2      	b.n	8007d3c <__hexnan+0xd4>
 8007d96:	3f04      	subs	r7, #4
 8007d98:	e7d0      	b.n	8007d3c <__hexnan+0xd4>
 8007d9a:	2004      	movs	r0, #4
 8007d9c:	e7d5      	b.n	8007d4a <__hexnan+0xe2>
	...

08007da0 <sbrk_aligned>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	4e0f      	ldr	r6, [pc, #60]	@ (8007de0 <sbrk_aligned+0x40>)
 8007da4:	460c      	mov	r4, r1
 8007da6:	6831      	ldr	r1, [r6, #0]
 8007da8:	4605      	mov	r5, r0
 8007daa:	b911      	cbnz	r1, 8007db2 <sbrk_aligned+0x12>
 8007dac:	f000 fe14 	bl	80089d8 <_sbrk_r>
 8007db0:	6030      	str	r0, [r6, #0]
 8007db2:	4621      	mov	r1, r4
 8007db4:	4628      	mov	r0, r5
 8007db6:	f000 fe0f 	bl	80089d8 <_sbrk_r>
 8007dba:	1c43      	adds	r3, r0, #1
 8007dbc:	d103      	bne.n	8007dc6 <sbrk_aligned+0x26>
 8007dbe:	f04f 34ff 	mov.w	r4, #4294967295
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	bd70      	pop	{r4, r5, r6, pc}
 8007dc6:	1cc4      	adds	r4, r0, #3
 8007dc8:	f024 0403 	bic.w	r4, r4, #3
 8007dcc:	42a0      	cmp	r0, r4
 8007dce:	d0f8      	beq.n	8007dc2 <sbrk_aligned+0x22>
 8007dd0:	1a21      	subs	r1, r4, r0
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f000 fe00 	bl	80089d8 <_sbrk_r>
 8007dd8:	3001      	adds	r0, #1
 8007dda:	d1f2      	bne.n	8007dc2 <sbrk_aligned+0x22>
 8007ddc:	e7ef      	b.n	8007dbe <sbrk_aligned+0x1e>
 8007dde:	bf00      	nop
 8007de0:	20000524 	.word	0x20000524

08007de4 <_malloc_r>:
 8007de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de8:	1ccd      	adds	r5, r1, #3
 8007dea:	f025 0503 	bic.w	r5, r5, #3
 8007dee:	3508      	adds	r5, #8
 8007df0:	2d0c      	cmp	r5, #12
 8007df2:	bf38      	it	cc
 8007df4:	250c      	movcc	r5, #12
 8007df6:	2d00      	cmp	r5, #0
 8007df8:	4606      	mov	r6, r0
 8007dfa:	db01      	blt.n	8007e00 <_malloc_r+0x1c>
 8007dfc:	42a9      	cmp	r1, r5
 8007dfe:	d904      	bls.n	8007e0a <_malloc_r+0x26>
 8007e00:	230c      	movs	r3, #12
 8007e02:	6033      	str	r3, [r6, #0]
 8007e04:	2000      	movs	r0, #0
 8007e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ee0 <_malloc_r+0xfc>
 8007e0e:	f000 f87b 	bl	8007f08 <__malloc_lock>
 8007e12:	f8d8 3000 	ldr.w	r3, [r8]
 8007e16:	461c      	mov	r4, r3
 8007e18:	bb44      	cbnz	r4, 8007e6c <_malloc_r+0x88>
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f7ff ffbf 	bl	8007da0 <sbrk_aligned>
 8007e22:	1c43      	adds	r3, r0, #1
 8007e24:	4604      	mov	r4, r0
 8007e26:	d158      	bne.n	8007eda <_malloc_r+0xf6>
 8007e28:	f8d8 4000 	ldr.w	r4, [r8]
 8007e2c:	4627      	mov	r7, r4
 8007e2e:	2f00      	cmp	r7, #0
 8007e30:	d143      	bne.n	8007eba <_malloc_r+0xd6>
 8007e32:	2c00      	cmp	r4, #0
 8007e34:	d04b      	beq.n	8007ece <_malloc_r+0xea>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	4639      	mov	r1, r7
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	eb04 0903 	add.w	r9, r4, r3
 8007e40:	f000 fdca 	bl	80089d8 <_sbrk_r>
 8007e44:	4581      	cmp	r9, r0
 8007e46:	d142      	bne.n	8007ece <_malloc_r+0xea>
 8007e48:	6821      	ldr	r1, [r4, #0]
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	1a6d      	subs	r5, r5, r1
 8007e4e:	4629      	mov	r1, r5
 8007e50:	f7ff ffa6 	bl	8007da0 <sbrk_aligned>
 8007e54:	3001      	adds	r0, #1
 8007e56:	d03a      	beq.n	8007ece <_malloc_r+0xea>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	442b      	add	r3, r5
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	bb62      	cbnz	r2, 8007ec0 <_malloc_r+0xdc>
 8007e66:	f8c8 7000 	str.w	r7, [r8]
 8007e6a:	e00f      	b.n	8007e8c <_malloc_r+0xa8>
 8007e6c:	6822      	ldr	r2, [r4, #0]
 8007e6e:	1b52      	subs	r2, r2, r5
 8007e70:	d420      	bmi.n	8007eb4 <_malloc_r+0xd0>
 8007e72:	2a0b      	cmp	r2, #11
 8007e74:	d917      	bls.n	8007ea6 <_malloc_r+0xc2>
 8007e76:	1961      	adds	r1, r4, r5
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	6025      	str	r5, [r4, #0]
 8007e7c:	bf18      	it	ne
 8007e7e:	6059      	strne	r1, [r3, #4]
 8007e80:	6863      	ldr	r3, [r4, #4]
 8007e82:	bf08      	it	eq
 8007e84:	f8c8 1000 	streq.w	r1, [r8]
 8007e88:	5162      	str	r2, [r4, r5]
 8007e8a:	604b      	str	r3, [r1, #4]
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f000 f841 	bl	8007f14 <__malloc_unlock>
 8007e92:	f104 000b 	add.w	r0, r4, #11
 8007e96:	1d23      	adds	r3, r4, #4
 8007e98:	f020 0007 	bic.w	r0, r0, #7
 8007e9c:	1ac2      	subs	r2, r0, r3
 8007e9e:	bf1c      	itt	ne
 8007ea0:	1a1b      	subne	r3, r3, r0
 8007ea2:	50a3      	strne	r3, [r4, r2]
 8007ea4:	e7af      	b.n	8007e06 <_malloc_r+0x22>
 8007ea6:	6862      	ldr	r2, [r4, #4]
 8007ea8:	42a3      	cmp	r3, r4
 8007eaa:	bf0c      	ite	eq
 8007eac:	f8c8 2000 	streq.w	r2, [r8]
 8007eb0:	605a      	strne	r2, [r3, #4]
 8007eb2:	e7eb      	b.n	8007e8c <_malloc_r+0xa8>
 8007eb4:	4623      	mov	r3, r4
 8007eb6:	6864      	ldr	r4, [r4, #4]
 8007eb8:	e7ae      	b.n	8007e18 <_malloc_r+0x34>
 8007eba:	463c      	mov	r4, r7
 8007ebc:	687f      	ldr	r7, [r7, #4]
 8007ebe:	e7b6      	b.n	8007e2e <_malloc_r+0x4a>
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	42a3      	cmp	r3, r4
 8007ec6:	d1fb      	bne.n	8007ec0 <_malloc_r+0xdc>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	6053      	str	r3, [r2, #4]
 8007ecc:	e7de      	b.n	8007e8c <_malloc_r+0xa8>
 8007ece:	230c      	movs	r3, #12
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	6033      	str	r3, [r6, #0]
 8007ed4:	f000 f81e 	bl	8007f14 <__malloc_unlock>
 8007ed8:	e794      	b.n	8007e04 <_malloc_r+0x20>
 8007eda:	6005      	str	r5, [r0, #0]
 8007edc:	e7d6      	b.n	8007e8c <_malloc_r+0xa8>
 8007ede:	bf00      	nop
 8007ee0:	20000528 	.word	0x20000528

08007ee4 <__ascii_mbtowc>:
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	b901      	cbnz	r1, 8007eea <__ascii_mbtowc+0x6>
 8007ee8:	a901      	add	r1, sp, #4
 8007eea:	b142      	cbz	r2, 8007efe <__ascii_mbtowc+0x1a>
 8007eec:	b14b      	cbz	r3, 8007f02 <__ascii_mbtowc+0x1e>
 8007eee:	7813      	ldrb	r3, [r2, #0]
 8007ef0:	600b      	str	r3, [r1, #0]
 8007ef2:	7812      	ldrb	r2, [r2, #0]
 8007ef4:	1e10      	subs	r0, r2, #0
 8007ef6:	bf18      	it	ne
 8007ef8:	2001      	movne	r0, #1
 8007efa:	b002      	add	sp, #8
 8007efc:	4770      	bx	lr
 8007efe:	4610      	mov	r0, r2
 8007f00:	e7fb      	b.n	8007efa <__ascii_mbtowc+0x16>
 8007f02:	f06f 0001 	mvn.w	r0, #1
 8007f06:	e7f8      	b.n	8007efa <__ascii_mbtowc+0x16>

08007f08 <__malloc_lock>:
 8007f08:	4801      	ldr	r0, [pc, #4]	@ (8007f10 <__malloc_lock+0x8>)
 8007f0a:	f7ff bbac 	b.w	8007666 <__retarget_lock_acquire_recursive>
 8007f0e:	bf00      	nop
 8007f10:	20000520 	.word	0x20000520

08007f14 <__malloc_unlock>:
 8007f14:	4801      	ldr	r0, [pc, #4]	@ (8007f1c <__malloc_unlock+0x8>)
 8007f16:	f7ff bba7 	b.w	8007668 <__retarget_lock_release_recursive>
 8007f1a:	bf00      	nop
 8007f1c:	20000520 	.word	0x20000520

08007f20 <_Balloc>:
 8007f20:	b570      	push	{r4, r5, r6, lr}
 8007f22:	69c6      	ldr	r6, [r0, #28]
 8007f24:	4604      	mov	r4, r0
 8007f26:	460d      	mov	r5, r1
 8007f28:	b976      	cbnz	r6, 8007f48 <_Balloc+0x28>
 8007f2a:	2010      	movs	r0, #16
 8007f2c:	f000 fd96 	bl	8008a5c <malloc>
 8007f30:	4602      	mov	r2, r0
 8007f32:	61e0      	str	r0, [r4, #28]
 8007f34:	b920      	cbnz	r0, 8007f40 <_Balloc+0x20>
 8007f36:	216b      	movs	r1, #107	@ 0x6b
 8007f38:	4b17      	ldr	r3, [pc, #92]	@ (8007f98 <_Balloc+0x78>)
 8007f3a:	4818      	ldr	r0, [pc, #96]	@ (8007f9c <_Balloc+0x7c>)
 8007f3c:	f000 fd5c 	bl	80089f8 <__assert_func>
 8007f40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f44:	6006      	str	r6, [r0, #0]
 8007f46:	60c6      	str	r6, [r0, #12]
 8007f48:	69e6      	ldr	r6, [r4, #28]
 8007f4a:	68f3      	ldr	r3, [r6, #12]
 8007f4c:	b183      	cbz	r3, 8007f70 <_Balloc+0x50>
 8007f4e:	69e3      	ldr	r3, [r4, #28]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f56:	b9b8      	cbnz	r0, 8007f88 <_Balloc+0x68>
 8007f58:	2101      	movs	r1, #1
 8007f5a:	fa01 f605 	lsl.w	r6, r1, r5
 8007f5e:	1d72      	adds	r2, r6, #5
 8007f60:	4620      	mov	r0, r4
 8007f62:	0092      	lsls	r2, r2, #2
 8007f64:	f000 fd66 	bl	8008a34 <_calloc_r>
 8007f68:	b160      	cbz	r0, 8007f84 <_Balloc+0x64>
 8007f6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f6e:	e00e      	b.n	8007f8e <_Balloc+0x6e>
 8007f70:	2221      	movs	r2, #33	@ 0x21
 8007f72:	2104      	movs	r1, #4
 8007f74:	4620      	mov	r0, r4
 8007f76:	f000 fd5d 	bl	8008a34 <_calloc_r>
 8007f7a:	69e3      	ldr	r3, [r4, #28]
 8007f7c:	60f0      	str	r0, [r6, #12]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d1e4      	bne.n	8007f4e <_Balloc+0x2e>
 8007f84:	2000      	movs	r0, #0
 8007f86:	bd70      	pop	{r4, r5, r6, pc}
 8007f88:	6802      	ldr	r2, [r0, #0]
 8007f8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f94:	e7f7      	b.n	8007f86 <_Balloc+0x66>
 8007f96:	bf00      	nop
 8007f98:	08009466 	.word	0x08009466
 8007f9c:	0800947d 	.word	0x0800947d

08007fa0 <_Bfree>:
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	69c6      	ldr	r6, [r0, #28]
 8007fa4:	4605      	mov	r5, r0
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	b976      	cbnz	r6, 8007fc8 <_Bfree+0x28>
 8007faa:	2010      	movs	r0, #16
 8007fac:	f000 fd56 	bl	8008a5c <malloc>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	61e8      	str	r0, [r5, #28]
 8007fb4:	b920      	cbnz	r0, 8007fc0 <_Bfree+0x20>
 8007fb6:	218f      	movs	r1, #143	@ 0x8f
 8007fb8:	4b08      	ldr	r3, [pc, #32]	@ (8007fdc <_Bfree+0x3c>)
 8007fba:	4809      	ldr	r0, [pc, #36]	@ (8007fe0 <_Bfree+0x40>)
 8007fbc:	f000 fd1c 	bl	80089f8 <__assert_func>
 8007fc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fc4:	6006      	str	r6, [r0, #0]
 8007fc6:	60c6      	str	r6, [r0, #12]
 8007fc8:	b13c      	cbz	r4, 8007fda <_Bfree+0x3a>
 8007fca:	69eb      	ldr	r3, [r5, #28]
 8007fcc:	6862      	ldr	r2, [r4, #4]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fd4:	6021      	str	r1, [r4, #0]
 8007fd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fda:	bd70      	pop	{r4, r5, r6, pc}
 8007fdc:	08009466 	.word	0x08009466
 8007fe0:	0800947d 	.word	0x0800947d

08007fe4 <__multadd>:
 8007fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe8:	4607      	mov	r7, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	461e      	mov	r6, r3
 8007fee:	2000      	movs	r0, #0
 8007ff0:	690d      	ldr	r5, [r1, #16]
 8007ff2:	f101 0c14 	add.w	ip, r1, #20
 8007ff6:	f8dc 3000 	ldr.w	r3, [ip]
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	b299      	uxth	r1, r3
 8007ffe:	fb02 6101 	mla	r1, r2, r1, r6
 8008002:	0c1e      	lsrs	r6, r3, #16
 8008004:	0c0b      	lsrs	r3, r1, #16
 8008006:	fb02 3306 	mla	r3, r2, r6, r3
 800800a:	b289      	uxth	r1, r1
 800800c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008010:	4285      	cmp	r5, r0
 8008012:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008016:	f84c 1b04 	str.w	r1, [ip], #4
 800801a:	dcec      	bgt.n	8007ff6 <__multadd+0x12>
 800801c:	b30e      	cbz	r6, 8008062 <__multadd+0x7e>
 800801e:	68a3      	ldr	r3, [r4, #8]
 8008020:	42ab      	cmp	r3, r5
 8008022:	dc19      	bgt.n	8008058 <__multadd+0x74>
 8008024:	6861      	ldr	r1, [r4, #4]
 8008026:	4638      	mov	r0, r7
 8008028:	3101      	adds	r1, #1
 800802a:	f7ff ff79 	bl	8007f20 <_Balloc>
 800802e:	4680      	mov	r8, r0
 8008030:	b928      	cbnz	r0, 800803e <__multadd+0x5a>
 8008032:	4602      	mov	r2, r0
 8008034:	21ba      	movs	r1, #186	@ 0xba
 8008036:	4b0c      	ldr	r3, [pc, #48]	@ (8008068 <__multadd+0x84>)
 8008038:	480c      	ldr	r0, [pc, #48]	@ (800806c <__multadd+0x88>)
 800803a:	f000 fcdd 	bl	80089f8 <__assert_func>
 800803e:	6922      	ldr	r2, [r4, #16]
 8008040:	f104 010c 	add.w	r1, r4, #12
 8008044:	3202      	adds	r2, #2
 8008046:	0092      	lsls	r2, r2, #2
 8008048:	300c      	adds	r0, #12
 800804a:	f7ff fb0e 	bl	800766a <memcpy>
 800804e:	4621      	mov	r1, r4
 8008050:	4638      	mov	r0, r7
 8008052:	f7ff ffa5 	bl	8007fa0 <_Bfree>
 8008056:	4644      	mov	r4, r8
 8008058:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800805c:	3501      	adds	r5, #1
 800805e:	615e      	str	r6, [r3, #20]
 8008060:	6125      	str	r5, [r4, #16]
 8008062:	4620      	mov	r0, r4
 8008064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008068:	080093f5 	.word	0x080093f5
 800806c:	0800947d 	.word	0x0800947d

08008070 <__s2b>:
 8008070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008074:	4615      	mov	r5, r2
 8008076:	2209      	movs	r2, #9
 8008078:	461f      	mov	r7, r3
 800807a:	3308      	adds	r3, #8
 800807c:	460c      	mov	r4, r1
 800807e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008082:	4606      	mov	r6, r0
 8008084:	2201      	movs	r2, #1
 8008086:	2100      	movs	r1, #0
 8008088:	429a      	cmp	r2, r3
 800808a:	db09      	blt.n	80080a0 <__s2b+0x30>
 800808c:	4630      	mov	r0, r6
 800808e:	f7ff ff47 	bl	8007f20 <_Balloc>
 8008092:	b940      	cbnz	r0, 80080a6 <__s2b+0x36>
 8008094:	4602      	mov	r2, r0
 8008096:	21d3      	movs	r1, #211	@ 0xd3
 8008098:	4b18      	ldr	r3, [pc, #96]	@ (80080fc <__s2b+0x8c>)
 800809a:	4819      	ldr	r0, [pc, #100]	@ (8008100 <__s2b+0x90>)
 800809c:	f000 fcac 	bl	80089f8 <__assert_func>
 80080a0:	0052      	lsls	r2, r2, #1
 80080a2:	3101      	adds	r1, #1
 80080a4:	e7f0      	b.n	8008088 <__s2b+0x18>
 80080a6:	9b08      	ldr	r3, [sp, #32]
 80080a8:	2d09      	cmp	r5, #9
 80080aa:	6143      	str	r3, [r0, #20]
 80080ac:	f04f 0301 	mov.w	r3, #1
 80080b0:	6103      	str	r3, [r0, #16]
 80080b2:	dd16      	ble.n	80080e2 <__s2b+0x72>
 80080b4:	f104 0909 	add.w	r9, r4, #9
 80080b8:	46c8      	mov	r8, r9
 80080ba:	442c      	add	r4, r5
 80080bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80080c0:	4601      	mov	r1, r0
 80080c2:	220a      	movs	r2, #10
 80080c4:	4630      	mov	r0, r6
 80080c6:	3b30      	subs	r3, #48	@ 0x30
 80080c8:	f7ff ff8c 	bl	8007fe4 <__multadd>
 80080cc:	45a0      	cmp	r8, r4
 80080ce:	d1f5      	bne.n	80080bc <__s2b+0x4c>
 80080d0:	f1a5 0408 	sub.w	r4, r5, #8
 80080d4:	444c      	add	r4, r9
 80080d6:	1b2d      	subs	r5, r5, r4
 80080d8:	1963      	adds	r3, r4, r5
 80080da:	42bb      	cmp	r3, r7
 80080dc:	db04      	blt.n	80080e8 <__s2b+0x78>
 80080de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080e2:	2509      	movs	r5, #9
 80080e4:	340a      	adds	r4, #10
 80080e6:	e7f6      	b.n	80080d6 <__s2b+0x66>
 80080e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80080ec:	4601      	mov	r1, r0
 80080ee:	220a      	movs	r2, #10
 80080f0:	4630      	mov	r0, r6
 80080f2:	3b30      	subs	r3, #48	@ 0x30
 80080f4:	f7ff ff76 	bl	8007fe4 <__multadd>
 80080f8:	e7ee      	b.n	80080d8 <__s2b+0x68>
 80080fa:	bf00      	nop
 80080fc:	080093f5 	.word	0x080093f5
 8008100:	0800947d 	.word	0x0800947d

08008104 <__hi0bits>:
 8008104:	4603      	mov	r3, r0
 8008106:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800810a:	bf3a      	itte	cc
 800810c:	0403      	lslcc	r3, r0, #16
 800810e:	2010      	movcc	r0, #16
 8008110:	2000      	movcs	r0, #0
 8008112:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008116:	bf3c      	itt	cc
 8008118:	021b      	lslcc	r3, r3, #8
 800811a:	3008      	addcc	r0, #8
 800811c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008120:	bf3c      	itt	cc
 8008122:	011b      	lslcc	r3, r3, #4
 8008124:	3004      	addcc	r0, #4
 8008126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800812a:	bf3c      	itt	cc
 800812c:	009b      	lslcc	r3, r3, #2
 800812e:	3002      	addcc	r0, #2
 8008130:	2b00      	cmp	r3, #0
 8008132:	db05      	blt.n	8008140 <__hi0bits+0x3c>
 8008134:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008138:	f100 0001 	add.w	r0, r0, #1
 800813c:	bf08      	it	eq
 800813e:	2020      	moveq	r0, #32
 8008140:	4770      	bx	lr

08008142 <__lo0bits>:
 8008142:	6803      	ldr	r3, [r0, #0]
 8008144:	4602      	mov	r2, r0
 8008146:	f013 0007 	ands.w	r0, r3, #7
 800814a:	d00b      	beq.n	8008164 <__lo0bits+0x22>
 800814c:	07d9      	lsls	r1, r3, #31
 800814e:	d421      	bmi.n	8008194 <__lo0bits+0x52>
 8008150:	0798      	lsls	r0, r3, #30
 8008152:	bf49      	itett	mi
 8008154:	085b      	lsrmi	r3, r3, #1
 8008156:	089b      	lsrpl	r3, r3, #2
 8008158:	2001      	movmi	r0, #1
 800815a:	6013      	strmi	r3, [r2, #0]
 800815c:	bf5c      	itt	pl
 800815e:	2002      	movpl	r0, #2
 8008160:	6013      	strpl	r3, [r2, #0]
 8008162:	4770      	bx	lr
 8008164:	b299      	uxth	r1, r3
 8008166:	b909      	cbnz	r1, 800816c <__lo0bits+0x2a>
 8008168:	2010      	movs	r0, #16
 800816a:	0c1b      	lsrs	r3, r3, #16
 800816c:	b2d9      	uxtb	r1, r3
 800816e:	b909      	cbnz	r1, 8008174 <__lo0bits+0x32>
 8008170:	3008      	adds	r0, #8
 8008172:	0a1b      	lsrs	r3, r3, #8
 8008174:	0719      	lsls	r1, r3, #28
 8008176:	bf04      	itt	eq
 8008178:	091b      	lsreq	r3, r3, #4
 800817a:	3004      	addeq	r0, #4
 800817c:	0799      	lsls	r1, r3, #30
 800817e:	bf04      	itt	eq
 8008180:	089b      	lsreq	r3, r3, #2
 8008182:	3002      	addeq	r0, #2
 8008184:	07d9      	lsls	r1, r3, #31
 8008186:	d403      	bmi.n	8008190 <__lo0bits+0x4e>
 8008188:	085b      	lsrs	r3, r3, #1
 800818a:	f100 0001 	add.w	r0, r0, #1
 800818e:	d003      	beq.n	8008198 <__lo0bits+0x56>
 8008190:	6013      	str	r3, [r2, #0]
 8008192:	4770      	bx	lr
 8008194:	2000      	movs	r0, #0
 8008196:	4770      	bx	lr
 8008198:	2020      	movs	r0, #32
 800819a:	4770      	bx	lr

0800819c <__i2b>:
 800819c:	b510      	push	{r4, lr}
 800819e:	460c      	mov	r4, r1
 80081a0:	2101      	movs	r1, #1
 80081a2:	f7ff febd 	bl	8007f20 <_Balloc>
 80081a6:	4602      	mov	r2, r0
 80081a8:	b928      	cbnz	r0, 80081b6 <__i2b+0x1a>
 80081aa:	f240 1145 	movw	r1, #325	@ 0x145
 80081ae:	4b04      	ldr	r3, [pc, #16]	@ (80081c0 <__i2b+0x24>)
 80081b0:	4804      	ldr	r0, [pc, #16]	@ (80081c4 <__i2b+0x28>)
 80081b2:	f000 fc21 	bl	80089f8 <__assert_func>
 80081b6:	2301      	movs	r3, #1
 80081b8:	6144      	str	r4, [r0, #20]
 80081ba:	6103      	str	r3, [r0, #16]
 80081bc:	bd10      	pop	{r4, pc}
 80081be:	bf00      	nop
 80081c0:	080093f5 	.word	0x080093f5
 80081c4:	0800947d 	.word	0x0800947d

080081c8 <__multiply>:
 80081c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	4614      	mov	r4, r2
 80081ce:	690a      	ldr	r2, [r1, #16]
 80081d0:	6923      	ldr	r3, [r4, #16]
 80081d2:	460f      	mov	r7, r1
 80081d4:	429a      	cmp	r2, r3
 80081d6:	bfa2      	ittt	ge
 80081d8:	4623      	movge	r3, r4
 80081da:	460c      	movge	r4, r1
 80081dc:	461f      	movge	r7, r3
 80081de:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80081e2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80081e6:	68a3      	ldr	r3, [r4, #8]
 80081e8:	6861      	ldr	r1, [r4, #4]
 80081ea:	eb0a 0609 	add.w	r6, sl, r9
 80081ee:	42b3      	cmp	r3, r6
 80081f0:	b085      	sub	sp, #20
 80081f2:	bfb8      	it	lt
 80081f4:	3101      	addlt	r1, #1
 80081f6:	f7ff fe93 	bl	8007f20 <_Balloc>
 80081fa:	b930      	cbnz	r0, 800820a <__multiply+0x42>
 80081fc:	4602      	mov	r2, r0
 80081fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008202:	4b43      	ldr	r3, [pc, #268]	@ (8008310 <__multiply+0x148>)
 8008204:	4843      	ldr	r0, [pc, #268]	@ (8008314 <__multiply+0x14c>)
 8008206:	f000 fbf7 	bl	80089f8 <__assert_func>
 800820a:	f100 0514 	add.w	r5, r0, #20
 800820e:	462b      	mov	r3, r5
 8008210:	2200      	movs	r2, #0
 8008212:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008216:	4543      	cmp	r3, r8
 8008218:	d321      	bcc.n	800825e <__multiply+0x96>
 800821a:	f107 0114 	add.w	r1, r7, #20
 800821e:	f104 0214 	add.w	r2, r4, #20
 8008222:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008226:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800822a:	9302      	str	r3, [sp, #8]
 800822c:	1b13      	subs	r3, r2, r4
 800822e:	3b15      	subs	r3, #21
 8008230:	f023 0303 	bic.w	r3, r3, #3
 8008234:	3304      	adds	r3, #4
 8008236:	f104 0715 	add.w	r7, r4, #21
 800823a:	42ba      	cmp	r2, r7
 800823c:	bf38      	it	cc
 800823e:	2304      	movcc	r3, #4
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	9b02      	ldr	r3, [sp, #8]
 8008244:	9103      	str	r1, [sp, #12]
 8008246:	428b      	cmp	r3, r1
 8008248:	d80c      	bhi.n	8008264 <__multiply+0x9c>
 800824a:	2e00      	cmp	r6, #0
 800824c:	dd03      	ble.n	8008256 <__multiply+0x8e>
 800824e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008252:	2b00      	cmp	r3, #0
 8008254:	d05a      	beq.n	800830c <__multiply+0x144>
 8008256:	6106      	str	r6, [r0, #16]
 8008258:	b005      	add	sp, #20
 800825a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825e:	f843 2b04 	str.w	r2, [r3], #4
 8008262:	e7d8      	b.n	8008216 <__multiply+0x4e>
 8008264:	f8b1 a000 	ldrh.w	sl, [r1]
 8008268:	f1ba 0f00 	cmp.w	sl, #0
 800826c:	d023      	beq.n	80082b6 <__multiply+0xee>
 800826e:	46a9      	mov	r9, r5
 8008270:	f04f 0c00 	mov.w	ip, #0
 8008274:	f104 0e14 	add.w	lr, r4, #20
 8008278:	f85e 7b04 	ldr.w	r7, [lr], #4
 800827c:	f8d9 3000 	ldr.w	r3, [r9]
 8008280:	fa1f fb87 	uxth.w	fp, r7
 8008284:	b29b      	uxth	r3, r3
 8008286:	fb0a 330b 	mla	r3, sl, fp, r3
 800828a:	4463      	add	r3, ip
 800828c:	f8d9 c000 	ldr.w	ip, [r9]
 8008290:	0c3f      	lsrs	r7, r7, #16
 8008292:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008296:	fb0a c707 	mla	r7, sl, r7, ip
 800829a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800829e:	b29b      	uxth	r3, r3
 80082a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80082a4:	4572      	cmp	r2, lr
 80082a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80082aa:	f849 3b04 	str.w	r3, [r9], #4
 80082ae:	d8e3      	bhi.n	8008278 <__multiply+0xb0>
 80082b0:	9b01      	ldr	r3, [sp, #4]
 80082b2:	f845 c003 	str.w	ip, [r5, r3]
 80082b6:	9b03      	ldr	r3, [sp, #12]
 80082b8:	3104      	adds	r1, #4
 80082ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082be:	f1b9 0f00 	cmp.w	r9, #0
 80082c2:	d021      	beq.n	8008308 <__multiply+0x140>
 80082c4:	46ae      	mov	lr, r5
 80082c6:	f04f 0a00 	mov.w	sl, #0
 80082ca:	682b      	ldr	r3, [r5, #0]
 80082cc:	f104 0c14 	add.w	ip, r4, #20
 80082d0:	f8bc b000 	ldrh.w	fp, [ip]
 80082d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80082d8:	b29b      	uxth	r3, r3
 80082da:	fb09 770b 	mla	r7, r9, fp, r7
 80082de:	4457      	add	r7, sl
 80082e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80082e4:	f84e 3b04 	str.w	r3, [lr], #4
 80082e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082f0:	f8be 3000 	ldrh.w	r3, [lr]
 80082f4:	4562      	cmp	r2, ip
 80082f6:	fb09 330a 	mla	r3, r9, sl, r3
 80082fa:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80082fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008302:	d8e5      	bhi.n	80082d0 <__multiply+0x108>
 8008304:	9f01      	ldr	r7, [sp, #4]
 8008306:	51eb      	str	r3, [r5, r7]
 8008308:	3504      	adds	r5, #4
 800830a:	e79a      	b.n	8008242 <__multiply+0x7a>
 800830c:	3e01      	subs	r6, #1
 800830e:	e79c      	b.n	800824a <__multiply+0x82>
 8008310:	080093f5 	.word	0x080093f5
 8008314:	0800947d 	.word	0x0800947d

08008318 <__pow5mult>:
 8008318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800831c:	4615      	mov	r5, r2
 800831e:	f012 0203 	ands.w	r2, r2, #3
 8008322:	4607      	mov	r7, r0
 8008324:	460e      	mov	r6, r1
 8008326:	d007      	beq.n	8008338 <__pow5mult+0x20>
 8008328:	4c25      	ldr	r4, [pc, #148]	@ (80083c0 <__pow5mult+0xa8>)
 800832a:	3a01      	subs	r2, #1
 800832c:	2300      	movs	r3, #0
 800832e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008332:	f7ff fe57 	bl	8007fe4 <__multadd>
 8008336:	4606      	mov	r6, r0
 8008338:	10ad      	asrs	r5, r5, #2
 800833a:	d03d      	beq.n	80083b8 <__pow5mult+0xa0>
 800833c:	69fc      	ldr	r4, [r7, #28]
 800833e:	b97c      	cbnz	r4, 8008360 <__pow5mult+0x48>
 8008340:	2010      	movs	r0, #16
 8008342:	f000 fb8b 	bl	8008a5c <malloc>
 8008346:	4602      	mov	r2, r0
 8008348:	61f8      	str	r0, [r7, #28]
 800834a:	b928      	cbnz	r0, 8008358 <__pow5mult+0x40>
 800834c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008350:	4b1c      	ldr	r3, [pc, #112]	@ (80083c4 <__pow5mult+0xac>)
 8008352:	481d      	ldr	r0, [pc, #116]	@ (80083c8 <__pow5mult+0xb0>)
 8008354:	f000 fb50 	bl	80089f8 <__assert_func>
 8008358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800835c:	6004      	str	r4, [r0, #0]
 800835e:	60c4      	str	r4, [r0, #12]
 8008360:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008368:	b94c      	cbnz	r4, 800837e <__pow5mult+0x66>
 800836a:	f240 2171 	movw	r1, #625	@ 0x271
 800836e:	4638      	mov	r0, r7
 8008370:	f7ff ff14 	bl	800819c <__i2b>
 8008374:	2300      	movs	r3, #0
 8008376:	4604      	mov	r4, r0
 8008378:	f8c8 0008 	str.w	r0, [r8, #8]
 800837c:	6003      	str	r3, [r0, #0]
 800837e:	f04f 0900 	mov.w	r9, #0
 8008382:	07eb      	lsls	r3, r5, #31
 8008384:	d50a      	bpl.n	800839c <__pow5mult+0x84>
 8008386:	4631      	mov	r1, r6
 8008388:	4622      	mov	r2, r4
 800838a:	4638      	mov	r0, r7
 800838c:	f7ff ff1c 	bl	80081c8 <__multiply>
 8008390:	4680      	mov	r8, r0
 8008392:	4631      	mov	r1, r6
 8008394:	4638      	mov	r0, r7
 8008396:	f7ff fe03 	bl	8007fa0 <_Bfree>
 800839a:	4646      	mov	r6, r8
 800839c:	106d      	asrs	r5, r5, #1
 800839e:	d00b      	beq.n	80083b8 <__pow5mult+0xa0>
 80083a0:	6820      	ldr	r0, [r4, #0]
 80083a2:	b938      	cbnz	r0, 80083b4 <__pow5mult+0x9c>
 80083a4:	4622      	mov	r2, r4
 80083a6:	4621      	mov	r1, r4
 80083a8:	4638      	mov	r0, r7
 80083aa:	f7ff ff0d 	bl	80081c8 <__multiply>
 80083ae:	6020      	str	r0, [r4, #0]
 80083b0:	f8c0 9000 	str.w	r9, [r0]
 80083b4:	4604      	mov	r4, r0
 80083b6:	e7e4      	b.n	8008382 <__pow5mult+0x6a>
 80083b8:	4630      	mov	r0, r6
 80083ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083be:	bf00      	nop
 80083c0:	080094d8 	.word	0x080094d8
 80083c4:	08009466 	.word	0x08009466
 80083c8:	0800947d 	.word	0x0800947d

080083cc <__lshift>:
 80083cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d0:	460c      	mov	r4, r1
 80083d2:	4607      	mov	r7, r0
 80083d4:	4691      	mov	r9, r2
 80083d6:	6923      	ldr	r3, [r4, #16]
 80083d8:	6849      	ldr	r1, [r1, #4]
 80083da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083de:	68a3      	ldr	r3, [r4, #8]
 80083e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083e4:	f108 0601 	add.w	r6, r8, #1
 80083e8:	42b3      	cmp	r3, r6
 80083ea:	db0b      	blt.n	8008404 <__lshift+0x38>
 80083ec:	4638      	mov	r0, r7
 80083ee:	f7ff fd97 	bl	8007f20 <_Balloc>
 80083f2:	4605      	mov	r5, r0
 80083f4:	b948      	cbnz	r0, 800840a <__lshift+0x3e>
 80083f6:	4602      	mov	r2, r0
 80083f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80083fc:	4b27      	ldr	r3, [pc, #156]	@ (800849c <__lshift+0xd0>)
 80083fe:	4828      	ldr	r0, [pc, #160]	@ (80084a0 <__lshift+0xd4>)
 8008400:	f000 fafa 	bl	80089f8 <__assert_func>
 8008404:	3101      	adds	r1, #1
 8008406:	005b      	lsls	r3, r3, #1
 8008408:	e7ee      	b.n	80083e8 <__lshift+0x1c>
 800840a:	2300      	movs	r3, #0
 800840c:	f100 0114 	add.w	r1, r0, #20
 8008410:	f100 0210 	add.w	r2, r0, #16
 8008414:	4618      	mov	r0, r3
 8008416:	4553      	cmp	r3, sl
 8008418:	db33      	blt.n	8008482 <__lshift+0xb6>
 800841a:	6920      	ldr	r0, [r4, #16]
 800841c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008420:	f104 0314 	add.w	r3, r4, #20
 8008424:	f019 091f 	ands.w	r9, r9, #31
 8008428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800842c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008430:	d02b      	beq.n	800848a <__lshift+0xbe>
 8008432:	468a      	mov	sl, r1
 8008434:	2200      	movs	r2, #0
 8008436:	f1c9 0e20 	rsb	lr, r9, #32
 800843a:	6818      	ldr	r0, [r3, #0]
 800843c:	fa00 f009 	lsl.w	r0, r0, r9
 8008440:	4310      	orrs	r0, r2
 8008442:	f84a 0b04 	str.w	r0, [sl], #4
 8008446:	f853 2b04 	ldr.w	r2, [r3], #4
 800844a:	459c      	cmp	ip, r3
 800844c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008450:	d8f3      	bhi.n	800843a <__lshift+0x6e>
 8008452:	ebac 0304 	sub.w	r3, ip, r4
 8008456:	3b15      	subs	r3, #21
 8008458:	f023 0303 	bic.w	r3, r3, #3
 800845c:	3304      	adds	r3, #4
 800845e:	f104 0015 	add.w	r0, r4, #21
 8008462:	4584      	cmp	ip, r0
 8008464:	bf38      	it	cc
 8008466:	2304      	movcc	r3, #4
 8008468:	50ca      	str	r2, [r1, r3]
 800846a:	b10a      	cbz	r2, 8008470 <__lshift+0xa4>
 800846c:	f108 0602 	add.w	r6, r8, #2
 8008470:	3e01      	subs	r6, #1
 8008472:	4638      	mov	r0, r7
 8008474:	4621      	mov	r1, r4
 8008476:	612e      	str	r6, [r5, #16]
 8008478:	f7ff fd92 	bl	8007fa0 <_Bfree>
 800847c:	4628      	mov	r0, r5
 800847e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008482:	f842 0f04 	str.w	r0, [r2, #4]!
 8008486:	3301      	adds	r3, #1
 8008488:	e7c5      	b.n	8008416 <__lshift+0x4a>
 800848a:	3904      	subs	r1, #4
 800848c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008490:	459c      	cmp	ip, r3
 8008492:	f841 2f04 	str.w	r2, [r1, #4]!
 8008496:	d8f9      	bhi.n	800848c <__lshift+0xc0>
 8008498:	e7ea      	b.n	8008470 <__lshift+0xa4>
 800849a:	bf00      	nop
 800849c:	080093f5 	.word	0x080093f5
 80084a0:	0800947d 	.word	0x0800947d

080084a4 <__mcmp>:
 80084a4:	4603      	mov	r3, r0
 80084a6:	690a      	ldr	r2, [r1, #16]
 80084a8:	6900      	ldr	r0, [r0, #16]
 80084aa:	b530      	push	{r4, r5, lr}
 80084ac:	1a80      	subs	r0, r0, r2
 80084ae:	d10e      	bne.n	80084ce <__mcmp+0x2a>
 80084b0:	3314      	adds	r3, #20
 80084b2:	3114      	adds	r1, #20
 80084b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084c4:	4295      	cmp	r5, r2
 80084c6:	d003      	beq.n	80084d0 <__mcmp+0x2c>
 80084c8:	d205      	bcs.n	80084d6 <__mcmp+0x32>
 80084ca:	f04f 30ff 	mov.w	r0, #4294967295
 80084ce:	bd30      	pop	{r4, r5, pc}
 80084d0:	42a3      	cmp	r3, r4
 80084d2:	d3f3      	bcc.n	80084bc <__mcmp+0x18>
 80084d4:	e7fb      	b.n	80084ce <__mcmp+0x2a>
 80084d6:	2001      	movs	r0, #1
 80084d8:	e7f9      	b.n	80084ce <__mcmp+0x2a>
	...

080084dc <__mdiff>:
 80084dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	4689      	mov	r9, r1
 80084e2:	4606      	mov	r6, r0
 80084e4:	4611      	mov	r1, r2
 80084e6:	4648      	mov	r0, r9
 80084e8:	4614      	mov	r4, r2
 80084ea:	f7ff ffdb 	bl	80084a4 <__mcmp>
 80084ee:	1e05      	subs	r5, r0, #0
 80084f0:	d112      	bne.n	8008518 <__mdiff+0x3c>
 80084f2:	4629      	mov	r1, r5
 80084f4:	4630      	mov	r0, r6
 80084f6:	f7ff fd13 	bl	8007f20 <_Balloc>
 80084fa:	4602      	mov	r2, r0
 80084fc:	b928      	cbnz	r0, 800850a <__mdiff+0x2e>
 80084fe:	f240 2137 	movw	r1, #567	@ 0x237
 8008502:	4b3e      	ldr	r3, [pc, #248]	@ (80085fc <__mdiff+0x120>)
 8008504:	483e      	ldr	r0, [pc, #248]	@ (8008600 <__mdiff+0x124>)
 8008506:	f000 fa77 	bl	80089f8 <__assert_func>
 800850a:	2301      	movs	r3, #1
 800850c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008510:	4610      	mov	r0, r2
 8008512:	b003      	add	sp, #12
 8008514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008518:	bfbc      	itt	lt
 800851a:	464b      	movlt	r3, r9
 800851c:	46a1      	movlt	r9, r4
 800851e:	4630      	mov	r0, r6
 8008520:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008524:	bfba      	itte	lt
 8008526:	461c      	movlt	r4, r3
 8008528:	2501      	movlt	r5, #1
 800852a:	2500      	movge	r5, #0
 800852c:	f7ff fcf8 	bl	8007f20 <_Balloc>
 8008530:	4602      	mov	r2, r0
 8008532:	b918      	cbnz	r0, 800853c <__mdiff+0x60>
 8008534:	f240 2145 	movw	r1, #581	@ 0x245
 8008538:	4b30      	ldr	r3, [pc, #192]	@ (80085fc <__mdiff+0x120>)
 800853a:	e7e3      	b.n	8008504 <__mdiff+0x28>
 800853c:	f100 0b14 	add.w	fp, r0, #20
 8008540:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008544:	f109 0310 	add.w	r3, r9, #16
 8008548:	60c5      	str	r5, [r0, #12]
 800854a:	f04f 0c00 	mov.w	ip, #0
 800854e:	f109 0514 	add.w	r5, r9, #20
 8008552:	46d9      	mov	r9, fp
 8008554:	6926      	ldr	r6, [r4, #16]
 8008556:	f104 0e14 	add.w	lr, r4, #20
 800855a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800855e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008562:	9301      	str	r3, [sp, #4]
 8008564:	9b01      	ldr	r3, [sp, #4]
 8008566:	f85e 0b04 	ldr.w	r0, [lr], #4
 800856a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800856e:	b281      	uxth	r1, r0
 8008570:	9301      	str	r3, [sp, #4]
 8008572:	fa1f f38a 	uxth.w	r3, sl
 8008576:	1a5b      	subs	r3, r3, r1
 8008578:	0c00      	lsrs	r0, r0, #16
 800857a:	4463      	add	r3, ip
 800857c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008580:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008584:	b29b      	uxth	r3, r3
 8008586:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800858a:	4576      	cmp	r6, lr
 800858c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008590:	f849 3b04 	str.w	r3, [r9], #4
 8008594:	d8e6      	bhi.n	8008564 <__mdiff+0x88>
 8008596:	1b33      	subs	r3, r6, r4
 8008598:	3b15      	subs	r3, #21
 800859a:	f023 0303 	bic.w	r3, r3, #3
 800859e:	3415      	adds	r4, #21
 80085a0:	3304      	adds	r3, #4
 80085a2:	42a6      	cmp	r6, r4
 80085a4:	bf38      	it	cc
 80085a6:	2304      	movcc	r3, #4
 80085a8:	441d      	add	r5, r3
 80085aa:	445b      	add	r3, fp
 80085ac:	461e      	mov	r6, r3
 80085ae:	462c      	mov	r4, r5
 80085b0:	4544      	cmp	r4, r8
 80085b2:	d30e      	bcc.n	80085d2 <__mdiff+0xf6>
 80085b4:	f108 0103 	add.w	r1, r8, #3
 80085b8:	1b49      	subs	r1, r1, r5
 80085ba:	f021 0103 	bic.w	r1, r1, #3
 80085be:	3d03      	subs	r5, #3
 80085c0:	45a8      	cmp	r8, r5
 80085c2:	bf38      	it	cc
 80085c4:	2100      	movcc	r1, #0
 80085c6:	440b      	add	r3, r1
 80085c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085cc:	b199      	cbz	r1, 80085f6 <__mdiff+0x11a>
 80085ce:	6117      	str	r7, [r2, #16]
 80085d0:	e79e      	b.n	8008510 <__mdiff+0x34>
 80085d2:	46e6      	mov	lr, ip
 80085d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80085d8:	fa1f fc81 	uxth.w	ip, r1
 80085dc:	44f4      	add	ip, lr
 80085de:	0c08      	lsrs	r0, r1, #16
 80085e0:	4471      	add	r1, lr
 80085e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80085e6:	b289      	uxth	r1, r1
 80085e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085f0:	f846 1b04 	str.w	r1, [r6], #4
 80085f4:	e7dc      	b.n	80085b0 <__mdiff+0xd4>
 80085f6:	3f01      	subs	r7, #1
 80085f8:	e7e6      	b.n	80085c8 <__mdiff+0xec>
 80085fa:	bf00      	nop
 80085fc:	080093f5 	.word	0x080093f5
 8008600:	0800947d 	.word	0x0800947d

08008604 <__ulp>:
 8008604:	4b0e      	ldr	r3, [pc, #56]	@ (8008640 <__ulp+0x3c>)
 8008606:	400b      	ands	r3, r1
 8008608:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800860c:	2b00      	cmp	r3, #0
 800860e:	dc08      	bgt.n	8008622 <__ulp+0x1e>
 8008610:	425b      	negs	r3, r3
 8008612:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008616:	ea4f 5223 	mov.w	r2, r3, asr #20
 800861a:	da04      	bge.n	8008626 <__ulp+0x22>
 800861c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008620:	4113      	asrs	r3, r2
 8008622:	2200      	movs	r2, #0
 8008624:	e008      	b.n	8008638 <__ulp+0x34>
 8008626:	f1a2 0314 	sub.w	r3, r2, #20
 800862a:	2b1e      	cmp	r3, #30
 800862c:	bfd6      	itet	le
 800862e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008632:	2201      	movgt	r2, #1
 8008634:	40da      	lsrle	r2, r3
 8008636:	2300      	movs	r3, #0
 8008638:	4619      	mov	r1, r3
 800863a:	4610      	mov	r0, r2
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	7ff00000 	.word	0x7ff00000

08008644 <__b2d>:
 8008644:	6902      	ldr	r2, [r0, #16]
 8008646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008648:	f100 0614 	add.w	r6, r0, #20
 800864c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008650:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008654:	4f1e      	ldr	r7, [pc, #120]	@ (80086d0 <__b2d+0x8c>)
 8008656:	4620      	mov	r0, r4
 8008658:	f7ff fd54 	bl	8008104 <__hi0bits>
 800865c:	4603      	mov	r3, r0
 800865e:	f1c0 0020 	rsb	r0, r0, #32
 8008662:	2b0a      	cmp	r3, #10
 8008664:	f1a2 0504 	sub.w	r5, r2, #4
 8008668:	6008      	str	r0, [r1, #0]
 800866a:	dc12      	bgt.n	8008692 <__b2d+0x4e>
 800866c:	42ae      	cmp	r6, r5
 800866e:	bf2c      	ite	cs
 8008670:	2200      	movcs	r2, #0
 8008672:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008676:	f1c3 0c0b 	rsb	ip, r3, #11
 800867a:	3315      	adds	r3, #21
 800867c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008680:	fa04 f303 	lsl.w	r3, r4, r3
 8008684:	fa22 f20c 	lsr.w	r2, r2, ip
 8008688:	ea4e 0107 	orr.w	r1, lr, r7
 800868c:	431a      	orrs	r2, r3
 800868e:	4610      	mov	r0, r2
 8008690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008692:	42ae      	cmp	r6, r5
 8008694:	bf36      	itet	cc
 8008696:	f1a2 0508 	subcc.w	r5, r2, #8
 800869a:	2200      	movcs	r2, #0
 800869c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80086a0:	3b0b      	subs	r3, #11
 80086a2:	d012      	beq.n	80086ca <__b2d+0x86>
 80086a4:	f1c3 0720 	rsb	r7, r3, #32
 80086a8:	fa22 f107 	lsr.w	r1, r2, r7
 80086ac:	409c      	lsls	r4, r3
 80086ae:	430c      	orrs	r4, r1
 80086b0:	42b5      	cmp	r5, r6
 80086b2:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80086b6:	bf94      	ite	ls
 80086b8:	2400      	movls	r4, #0
 80086ba:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80086be:	409a      	lsls	r2, r3
 80086c0:	40fc      	lsrs	r4, r7
 80086c2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80086c6:	4322      	orrs	r2, r4
 80086c8:	e7e1      	b.n	800868e <__b2d+0x4a>
 80086ca:	ea44 0107 	orr.w	r1, r4, r7
 80086ce:	e7de      	b.n	800868e <__b2d+0x4a>
 80086d0:	3ff00000 	.word	0x3ff00000

080086d4 <__d2b>:
 80086d4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80086d8:	2101      	movs	r1, #1
 80086da:	4690      	mov	r8, r2
 80086dc:	4699      	mov	r9, r3
 80086de:	9e08      	ldr	r6, [sp, #32]
 80086e0:	f7ff fc1e 	bl	8007f20 <_Balloc>
 80086e4:	4604      	mov	r4, r0
 80086e6:	b930      	cbnz	r0, 80086f6 <__d2b+0x22>
 80086e8:	4602      	mov	r2, r0
 80086ea:	f240 310f 	movw	r1, #783	@ 0x30f
 80086ee:	4b23      	ldr	r3, [pc, #140]	@ (800877c <__d2b+0xa8>)
 80086f0:	4823      	ldr	r0, [pc, #140]	@ (8008780 <__d2b+0xac>)
 80086f2:	f000 f981 	bl	80089f8 <__assert_func>
 80086f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086fe:	b10d      	cbz	r5, 8008704 <__d2b+0x30>
 8008700:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008704:	9301      	str	r3, [sp, #4]
 8008706:	f1b8 0300 	subs.w	r3, r8, #0
 800870a:	d024      	beq.n	8008756 <__d2b+0x82>
 800870c:	4668      	mov	r0, sp
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	f7ff fd17 	bl	8008142 <__lo0bits>
 8008714:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008718:	b1d8      	cbz	r0, 8008752 <__d2b+0x7e>
 800871a:	f1c0 0320 	rsb	r3, r0, #32
 800871e:	fa02 f303 	lsl.w	r3, r2, r3
 8008722:	430b      	orrs	r3, r1
 8008724:	40c2      	lsrs	r2, r0
 8008726:	6163      	str	r3, [r4, #20]
 8008728:	9201      	str	r2, [sp, #4]
 800872a:	9b01      	ldr	r3, [sp, #4]
 800872c:	2b00      	cmp	r3, #0
 800872e:	bf0c      	ite	eq
 8008730:	2201      	moveq	r2, #1
 8008732:	2202      	movne	r2, #2
 8008734:	61a3      	str	r3, [r4, #24]
 8008736:	6122      	str	r2, [r4, #16]
 8008738:	b1ad      	cbz	r5, 8008766 <__d2b+0x92>
 800873a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800873e:	4405      	add	r5, r0
 8008740:	6035      	str	r5, [r6, #0]
 8008742:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008748:	6018      	str	r0, [r3, #0]
 800874a:	4620      	mov	r0, r4
 800874c:	b002      	add	sp, #8
 800874e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008752:	6161      	str	r1, [r4, #20]
 8008754:	e7e9      	b.n	800872a <__d2b+0x56>
 8008756:	a801      	add	r0, sp, #4
 8008758:	f7ff fcf3 	bl	8008142 <__lo0bits>
 800875c:	9b01      	ldr	r3, [sp, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	6163      	str	r3, [r4, #20]
 8008762:	3020      	adds	r0, #32
 8008764:	e7e7      	b.n	8008736 <__d2b+0x62>
 8008766:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800876a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800876e:	6030      	str	r0, [r6, #0]
 8008770:	6918      	ldr	r0, [r3, #16]
 8008772:	f7ff fcc7 	bl	8008104 <__hi0bits>
 8008776:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800877a:	e7e4      	b.n	8008746 <__d2b+0x72>
 800877c:	080093f5 	.word	0x080093f5
 8008780:	0800947d 	.word	0x0800947d

08008784 <__ratio>:
 8008784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008788:	b085      	sub	sp, #20
 800878a:	e9cd 1000 	strd	r1, r0, [sp]
 800878e:	a902      	add	r1, sp, #8
 8008790:	f7ff ff58 	bl	8008644 <__b2d>
 8008794:	468b      	mov	fp, r1
 8008796:	4606      	mov	r6, r0
 8008798:	460f      	mov	r7, r1
 800879a:	9800      	ldr	r0, [sp, #0]
 800879c:	a903      	add	r1, sp, #12
 800879e:	f7ff ff51 	bl	8008644 <__b2d>
 80087a2:	460d      	mov	r5, r1
 80087a4:	9b01      	ldr	r3, [sp, #4]
 80087a6:	4689      	mov	r9, r1
 80087a8:	6919      	ldr	r1, [r3, #16]
 80087aa:	9b00      	ldr	r3, [sp, #0]
 80087ac:	4604      	mov	r4, r0
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	4630      	mov	r0, r6
 80087b2:	1ac9      	subs	r1, r1, r3
 80087b4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80087b8:	1a9b      	subs	r3, r3, r2
 80087ba:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80087be:	2b00      	cmp	r3, #0
 80087c0:	bfcd      	iteet	gt
 80087c2:	463a      	movgt	r2, r7
 80087c4:	462a      	movle	r2, r5
 80087c6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80087ca:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80087ce:	bfd8      	it	le
 80087d0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80087d4:	464b      	mov	r3, r9
 80087d6:	4622      	mov	r2, r4
 80087d8:	4659      	mov	r1, fp
 80087da:	f7f7 ffa7 	bl	800072c <__aeabi_ddiv>
 80087de:	b005      	add	sp, #20
 80087e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087e4 <__copybits>:
 80087e4:	3901      	subs	r1, #1
 80087e6:	b570      	push	{r4, r5, r6, lr}
 80087e8:	1149      	asrs	r1, r1, #5
 80087ea:	6914      	ldr	r4, [r2, #16]
 80087ec:	3101      	adds	r1, #1
 80087ee:	f102 0314 	add.w	r3, r2, #20
 80087f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80087f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80087fa:	1f05      	subs	r5, r0, #4
 80087fc:	42a3      	cmp	r3, r4
 80087fe:	d30c      	bcc.n	800881a <__copybits+0x36>
 8008800:	1aa3      	subs	r3, r4, r2
 8008802:	3b11      	subs	r3, #17
 8008804:	f023 0303 	bic.w	r3, r3, #3
 8008808:	3211      	adds	r2, #17
 800880a:	42a2      	cmp	r2, r4
 800880c:	bf88      	it	hi
 800880e:	2300      	movhi	r3, #0
 8008810:	4418      	add	r0, r3
 8008812:	2300      	movs	r3, #0
 8008814:	4288      	cmp	r0, r1
 8008816:	d305      	bcc.n	8008824 <__copybits+0x40>
 8008818:	bd70      	pop	{r4, r5, r6, pc}
 800881a:	f853 6b04 	ldr.w	r6, [r3], #4
 800881e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008822:	e7eb      	b.n	80087fc <__copybits+0x18>
 8008824:	f840 3b04 	str.w	r3, [r0], #4
 8008828:	e7f4      	b.n	8008814 <__copybits+0x30>

0800882a <__any_on>:
 800882a:	f100 0214 	add.w	r2, r0, #20
 800882e:	6900      	ldr	r0, [r0, #16]
 8008830:	114b      	asrs	r3, r1, #5
 8008832:	4298      	cmp	r0, r3
 8008834:	b510      	push	{r4, lr}
 8008836:	db11      	blt.n	800885c <__any_on+0x32>
 8008838:	dd0a      	ble.n	8008850 <__any_on+0x26>
 800883a:	f011 011f 	ands.w	r1, r1, #31
 800883e:	d007      	beq.n	8008850 <__any_on+0x26>
 8008840:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008844:	fa24 f001 	lsr.w	r0, r4, r1
 8008848:	fa00 f101 	lsl.w	r1, r0, r1
 800884c:	428c      	cmp	r4, r1
 800884e:	d10b      	bne.n	8008868 <__any_on+0x3e>
 8008850:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008854:	4293      	cmp	r3, r2
 8008856:	d803      	bhi.n	8008860 <__any_on+0x36>
 8008858:	2000      	movs	r0, #0
 800885a:	bd10      	pop	{r4, pc}
 800885c:	4603      	mov	r3, r0
 800885e:	e7f7      	b.n	8008850 <__any_on+0x26>
 8008860:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008864:	2900      	cmp	r1, #0
 8008866:	d0f5      	beq.n	8008854 <__any_on+0x2a>
 8008868:	2001      	movs	r0, #1
 800886a:	e7f6      	b.n	800885a <__any_on+0x30>

0800886c <__ascii_wctomb>:
 800886c:	4603      	mov	r3, r0
 800886e:	4608      	mov	r0, r1
 8008870:	b141      	cbz	r1, 8008884 <__ascii_wctomb+0x18>
 8008872:	2aff      	cmp	r2, #255	@ 0xff
 8008874:	d904      	bls.n	8008880 <__ascii_wctomb+0x14>
 8008876:	228a      	movs	r2, #138	@ 0x8a
 8008878:	f04f 30ff 	mov.w	r0, #4294967295
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	4770      	bx	lr
 8008880:	2001      	movs	r0, #1
 8008882:	700a      	strb	r2, [r1, #0]
 8008884:	4770      	bx	lr
	...

08008888 <__sflush_r>:
 8008888:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888e:	0716      	lsls	r6, r2, #28
 8008890:	4605      	mov	r5, r0
 8008892:	460c      	mov	r4, r1
 8008894:	d454      	bmi.n	8008940 <__sflush_r+0xb8>
 8008896:	684b      	ldr	r3, [r1, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	dc02      	bgt.n	80088a2 <__sflush_r+0x1a>
 800889c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800889e:	2b00      	cmp	r3, #0
 80088a0:	dd48      	ble.n	8008934 <__sflush_r+0xac>
 80088a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088a4:	2e00      	cmp	r6, #0
 80088a6:	d045      	beq.n	8008934 <__sflush_r+0xac>
 80088a8:	2300      	movs	r3, #0
 80088aa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80088ae:	682f      	ldr	r7, [r5, #0]
 80088b0:	6a21      	ldr	r1, [r4, #32]
 80088b2:	602b      	str	r3, [r5, #0]
 80088b4:	d030      	beq.n	8008918 <__sflush_r+0x90>
 80088b6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80088b8:	89a3      	ldrh	r3, [r4, #12]
 80088ba:	0759      	lsls	r1, r3, #29
 80088bc:	d505      	bpl.n	80088ca <__sflush_r+0x42>
 80088be:	6863      	ldr	r3, [r4, #4]
 80088c0:	1ad2      	subs	r2, r2, r3
 80088c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088c4:	b10b      	cbz	r3, 80088ca <__sflush_r+0x42>
 80088c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088c8:	1ad2      	subs	r2, r2, r3
 80088ca:	2300      	movs	r3, #0
 80088cc:	4628      	mov	r0, r5
 80088ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088d0:	6a21      	ldr	r1, [r4, #32]
 80088d2:	47b0      	blx	r6
 80088d4:	1c43      	adds	r3, r0, #1
 80088d6:	89a3      	ldrh	r3, [r4, #12]
 80088d8:	d106      	bne.n	80088e8 <__sflush_r+0x60>
 80088da:	6829      	ldr	r1, [r5, #0]
 80088dc:	291d      	cmp	r1, #29
 80088de:	d82b      	bhi.n	8008938 <__sflush_r+0xb0>
 80088e0:	4a28      	ldr	r2, [pc, #160]	@ (8008984 <__sflush_r+0xfc>)
 80088e2:	410a      	asrs	r2, r1
 80088e4:	07d6      	lsls	r6, r2, #31
 80088e6:	d427      	bmi.n	8008938 <__sflush_r+0xb0>
 80088e8:	2200      	movs	r2, #0
 80088ea:	6062      	str	r2, [r4, #4]
 80088ec:	6922      	ldr	r2, [r4, #16]
 80088ee:	04d9      	lsls	r1, r3, #19
 80088f0:	6022      	str	r2, [r4, #0]
 80088f2:	d504      	bpl.n	80088fe <__sflush_r+0x76>
 80088f4:	1c42      	adds	r2, r0, #1
 80088f6:	d101      	bne.n	80088fc <__sflush_r+0x74>
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	b903      	cbnz	r3, 80088fe <__sflush_r+0x76>
 80088fc:	6560      	str	r0, [r4, #84]	@ 0x54
 80088fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008900:	602f      	str	r7, [r5, #0]
 8008902:	b1b9      	cbz	r1, 8008934 <__sflush_r+0xac>
 8008904:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008908:	4299      	cmp	r1, r3
 800890a:	d002      	beq.n	8008912 <__sflush_r+0x8a>
 800890c:	4628      	mov	r0, r5
 800890e:	f7fe fec5 	bl	800769c <_free_r>
 8008912:	2300      	movs	r3, #0
 8008914:	6363      	str	r3, [r4, #52]	@ 0x34
 8008916:	e00d      	b.n	8008934 <__sflush_r+0xac>
 8008918:	2301      	movs	r3, #1
 800891a:	4628      	mov	r0, r5
 800891c:	47b0      	blx	r6
 800891e:	4602      	mov	r2, r0
 8008920:	1c50      	adds	r0, r2, #1
 8008922:	d1c9      	bne.n	80088b8 <__sflush_r+0x30>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d0c6      	beq.n	80088b8 <__sflush_r+0x30>
 800892a:	2b1d      	cmp	r3, #29
 800892c:	d001      	beq.n	8008932 <__sflush_r+0xaa>
 800892e:	2b16      	cmp	r3, #22
 8008930:	d11d      	bne.n	800896e <__sflush_r+0xe6>
 8008932:	602f      	str	r7, [r5, #0]
 8008934:	2000      	movs	r0, #0
 8008936:	e021      	b.n	800897c <__sflush_r+0xf4>
 8008938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800893c:	b21b      	sxth	r3, r3
 800893e:	e01a      	b.n	8008976 <__sflush_r+0xee>
 8008940:	690f      	ldr	r7, [r1, #16]
 8008942:	2f00      	cmp	r7, #0
 8008944:	d0f6      	beq.n	8008934 <__sflush_r+0xac>
 8008946:	0793      	lsls	r3, r2, #30
 8008948:	bf18      	it	ne
 800894a:	2300      	movne	r3, #0
 800894c:	680e      	ldr	r6, [r1, #0]
 800894e:	bf08      	it	eq
 8008950:	694b      	ldreq	r3, [r1, #20]
 8008952:	1bf6      	subs	r6, r6, r7
 8008954:	600f      	str	r7, [r1, #0]
 8008956:	608b      	str	r3, [r1, #8]
 8008958:	2e00      	cmp	r6, #0
 800895a:	ddeb      	ble.n	8008934 <__sflush_r+0xac>
 800895c:	4633      	mov	r3, r6
 800895e:	463a      	mov	r2, r7
 8008960:	4628      	mov	r0, r5
 8008962:	6a21      	ldr	r1, [r4, #32]
 8008964:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008968:	47e0      	blx	ip
 800896a:	2800      	cmp	r0, #0
 800896c:	dc07      	bgt.n	800897e <__sflush_r+0xf6>
 800896e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008976:	f04f 30ff 	mov.w	r0, #4294967295
 800897a:	81a3      	strh	r3, [r4, #12]
 800897c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800897e:	4407      	add	r7, r0
 8008980:	1a36      	subs	r6, r6, r0
 8008982:	e7e9      	b.n	8008958 <__sflush_r+0xd0>
 8008984:	dfbffffe 	.word	0xdfbffffe

08008988 <_fflush_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	690b      	ldr	r3, [r1, #16]
 800898c:	4605      	mov	r5, r0
 800898e:	460c      	mov	r4, r1
 8008990:	b913      	cbnz	r3, 8008998 <_fflush_r+0x10>
 8008992:	2500      	movs	r5, #0
 8008994:	4628      	mov	r0, r5
 8008996:	bd38      	pop	{r3, r4, r5, pc}
 8008998:	b118      	cbz	r0, 80089a2 <_fflush_r+0x1a>
 800899a:	6a03      	ldr	r3, [r0, #32]
 800899c:	b90b      	cbnz	r3, 80089a2 <_fflush_r+0x1a>
 800899e:	f7fe fd5d 	bl	800745c <__sinit>
 80089a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d0f3      	beq.n	8008992 <_fflush_r+0xa>
 80089aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089ac:	07d0      	lsls	r0, r2, #31
 80089ae:	d404      	bmi.n	80089ba <_fflush_r+0x32>
 80089b0:	0599      	lsls	r1, r3, #22
 80089b2:	d402      	bmi.n	80089ba <_fflush_r+0x32>
 80089b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089b6:	f7fe fe56 	bl	8007666 <__retarget_lock_acquire_recursive>
 80089ba:	4628      	mov	r0, r5
 80089bc:	4621      	mov	r1, r4
 80089be:	f7ff ff63 	bl	8008888 <__sflush_r>
 80089c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089c4:	4605      	mov	r5, r0
 80089c6:	07da      	lsls	r2, r3, #31
 80089c8:	d4e4      	bmi.n	8008994 <_fflush_r+0xc>
 80089ca:	89a3      	ldrh	r3, [r4, #12]
 80089cc:	059b      	lsls	r3, r3, #22
 80089ce:	d4e1      	bmi.n	8008994 <_fflush_r+0xc>
 80089d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089d2:	f7fe fe49 	bl	8007668 <__retarget_lock_release_recursive>
 80089d6:	e7dd      	b.n	8008994 <_fflush_r+0xc>

080089d8 <_sbrk_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	2300      	movs	r3, #0
 80089dc:	4d05      	ldr	r5, [pc, #20]	@ (80089f4 <_sbrk_r+0x1c>)
 80089de:	4604      	mov	r4, r0
 80089e0:	4608      	mov	r0, r1
 80089e2:	602b      	str	r3, [r5, #0]
 80089e4:	f7f9 fce4 	bl	80023b0 <_sbrk>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_sbrk_r+0x1a>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_sbrk_r+0x1a>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	2000051c 	.word	0x2000051c

080089f8 <__assert_func>:
 80089f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089fa:	4614      	mov	r4, r2
 80089fc:	461a      	mov	r2, r3
 80089fe:	4b09      	ldr	r3, [pc, #36]	@ (8008a24 <__assert_func+0x2c>)
 8008a00:	4605      	mov	r5, r0
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68d8      	ldr	r0, [r3, #12]
 8008a06:	b954      	cbnz	r4, 8008a1e <__assert_func+0x26>
 8008a08:	4b07      	ldr	r3, [pc, #28]	@ (8008a28 <__assert_func+0x30>)
 8008a0a:	461c      	mov	r4, r3
 8008a0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a10:	9100      	str	r1, [sp, #0]
 8008a12:	462b      	mov	r3, r5
 8008a14:	4905      	ldr	r1, [pc, #20]	@ (8008a2c <__assert_func+0x34>)
 8008a16:	f000 f829 	bl	8008a6c <fiprintf>
 8008a1a:	f000 f839 	bl	8008a90 <abort>
 8008a1e:	4b04      	ldr	r3, [pc, #16]	@ (8008a30 <__assert_func+0x38>)
 8008a20:	e7f4      	b.n	8008a0c <__assert_func+0x14>
 8008a22:	bf00      	nop
 8008a24:	20000184 	.word	0x20000184
 8008a28:	08009714 	.word	0x08009714
 8008a2c:	080096e6 	.word	0x080096e6
 8008a30:	080096d9 	.word	0x080096d9

08008a34 <_calloc_r>:
 8008a34:	b570      	push	{r4, r5, r6, lr}
 8008a36:	fba1 5402 	umull	r5, r4, r1, r2
 8008a3a:	b93c      	cbnz	r4, 8008a4c <_calloc_r+0x18>
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	f7ff f9d1 	bl	8007de4 <_malloc_r>
 8008a42:	4606      	mov	r6, r0
 8008a44:	b928      	cbnz	r0, 8008a52 <_calloc_r+0x1e>
 8008a46:	2600      	movs	r6, #0
 8008a48:	4630      	mov	r0, r6
 8008a4a:	bd70      	pop	{r4, r5, r6, pc}
 8008a4c:	220c      	movs	r2, #12
 8008a4e:	6002      	str	r2, [r0, #0]
 8008a50:	e7f9      	b.n	8008a46 <_calloc_r+0x12>
 8008a52:	462a      	mov	r2, r5
 8008a54:	4621      	mov	r1, r4
 8008a56:	f7fe fd7a 	bl	800754e <memset>
 8008a5a:	e7f5      	b.n	8008a48 <_calloc_r+0x14>

08008a5c <malloc>:
 8008a5c:	4b02      	ldr	r3, [pc, #8]	@ (8008a68 <malloc+0xc>)
 8008a5e:	4601      	mov	r1, r0
 8008a60:	6818      	ldr	r0, [r3, #0]
 8008a62:	f7ff b9bf 	b.w	8007de4 <_malloc_r>
 8008a66:	bf00      	nop
 8008a68:	20000184 	.word	0x20000184

08008a6c <fiprintf>:
 8008a6c:	b40e      	push	{r1, r2, r3}
 8008a6e:	b503      	push	{r0, r1, lr}
 8008a70:	4601      	mov	r1, r0
 8008a72:	ab03      	add	r3, sp, #12
 8008a74:	4805      	ldr	r0, [pc, #20]	@ (8008a8c <fiprintf+0x20>)
 8008a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a7a:	6800      	ldr	r0, [r0, #0]
 8008a7c:	9301      	str	r3, [sp, #4]
 8008a7e:	f000 f835 	bl	8008aec <_vfiprintf_r>
 8008a82:	b002      	add	sp, #8
 8008a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a88:	b003      	add	sp, #12
 8008a8a:	4770      	bx	lr
 8008a8c:	20000184 	.word	0x20000184

08008a90 <abort>:
 8008a90:	2006      	movs	r0, #6
 8008a92:	b508      	push	{r3, lr}
 8008a94:	f000 fb90 	bl	80091b8 <raise>
 8008a98:	2001      	movs	r0, #1
 8008a9a:	f7f9 fc14 	bl	80022c6 <_exit>

08008a9e <__sfputc_r>:
 8008a9e:	6893      	ldr	r3, [r2, #8]
 8008aa0:	b410      	push	{r4}
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	6093      	str	r3, [r2, #8]
 8008aa8:	da07      	bge.n	8008aba <__sfputc_r+0x1c>
 8008aaa:	6994      	ldr	r4, [r2, #24]
 8008aac:	42a3      	cmp	r3, r4
 8008aae:	db01      	blt.n	8008ab4 <__sfputc_r+0x16>
 8008ab0:	290a      	cmp	r1, #10
 8008ab2:	d102      	bne.n	8008aba <__sfputc_r+0x1c>
 8008ab4:	bc10      	pop	{r4}
 8008ab6:	f000 bac3 	b.w	8009040 <__swbuf_r>
 8008aba:	6813      	ldr	r3, [r2, #0]
 8008abc:	1c58      	adds	r0, r3, #1
 8008abe:	6010      	str	r0, [r2, #0]
 8008ac0:	7019      	strb	r1, [r3, #0]
 8008ac2:	4608      	mov	r0, r1
 8008ac4:	bc10      	pop	{r4}
 8008ac6:	4770      	bx	lr

08008ac8 <__sfputs_r>:
 8008ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aca:	4606      	mov	r6, r0
 8008acc:	460f      	mov	r7, r1
 8008ace:	4614      	mov	r4, r2
 8008ad0:	18d5      	adds	r5, r2, r3
 8008ad2:	42ac      	cmp	r4, r5
 8008ad4:	d101      	bne.n	8008ada <__sfputs_r+0x12>
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	e007      	b.n	8008aea <__sfputs_r+0x22>
 8008ada:	463a      	mov	r2, r7
 8008adc:	4630      	mov	r0, r6
 8008ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae2:	f7ff ffdc 	bl	8008a9e <__sfputc_r>
 8008ae6:	1c43      	adds	r3, r0, #1
 8008ae8:	d1f3      	bne.n	8008ad2 <__sfputs_r+0xa>
 8008aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008aec <_vfiprintf_r>:
 8008aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af0:	460d      	mov	r5, r1
 8008af2:	4614      	mov	r4, r2
 8008af4:	4698      	mov	r8, r3
 8008af6:	4606      	mov	r6, r0
 8008af8:	b09d      	sub	sp, #116	@ 0x74
 8008afa:	b118      	cbz	r0, 8008b04 <_vfiprintf_r+0x18>
 8008afc:	6a03      	ldr	r3, [r0, #32]
 8008afe:	b90b      	cbnz	r3, 8008b04 <_vfiprintf_r+0x18>
 8008b00:	f7fe fcac 	bl	800745c <__sinit>
 8008b04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b06:	07d9      	lsls	r1, r3, #31
 8008b08:	d405      	bmi.n	8008b16 <_vfiprintf_r+0x2a>
 8008b0a:	89ab      	ldrh	r3, [r5, #12]
 8008b0c:	059a      	lsls	r2, r3, #22
 8008b0e:	d402      	bmi.n	8008b16 <_vfiprintf_r+0x2a>
 8008b10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b12:	f7fe fda8 	bl	8007666 <__retarget_lock_acquire_recursive>
 8008b16:	89ab      	ldrh	r3, [r5, #12]
 8008b18:	071b      	lsls	r3, r3, #28
 8008b1a:	d501      	bpl.n	8008b20 <_vfiprintf_r+0x34>
 8008b1c:	692b      	ldr	r3, [r5, #16]
 8008b1e:	b99b      	cbnz	r3, 8008b48 <_vfiprintf_r+0x5c>
 8008b20:	4629      	mov	r1, r5
 8008b22:	4630      	mov	r0, r6
 8008b24:	f000 faca 	bl	80090bc <__swsetup_r>
 8008b28:	b170      	cbz	r0, 8008b48 <_vfiprintf_r+0x5c>
 8008b2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b2c:	07dc      	lsls	r4, r3, #31
 8008b2e:	d504      	bpl.n	8008b3a <_vfiprintf_r+0x4e>
 8008b30:	f04f 30ff 	mov.w	r0, #4294967295
 8008b34:	b01d      	add	sp, #116	@ 0x74
 8008b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b3a:	89ab      	ldrh	r3, [r5, #12]
 8008b3c:	0598      	lsls	r0, r3, #22
 8008b3e:	d4f7      	bmi.n	8008b30 <_vfiprintf_r+0x44>
 8008b40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b42:	f7fe fd91 	bl	8007668 <__retarget_lock_release_recursive>
 8008b46:	e7f3      	b.n	8008b30 <_vfiprintf_r+0x44>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b4c:	2320      	movs	r3, #32
 8008b4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b52:	2330      	movs	r3, #48	@ 0x30
 8008b54:	f04f 0901 	mov.w	r9, #1
 8008b58:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b5c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008d08 <_vfiprintf_r+0x21c>
 8008b60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b64:	4623      	mov	r3, r4
 8008b66:	469a      	mov	sl, r3
 8008b68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b6c:	b10a      	cbz	r2, 8008b72 <_vfiprintf_r+0x86>
 8008b6e:	2a25      	cmp	r2, #37	@ 0x25
 8008b70:	d1f9      	bne.n	8008b66 <_vfiprintf_r+0x7a>
 8008b72:	ebba 0b04 	subs.w	fp, sl, r4
 8008b76:	d00b      	beq.n	8008b90 <_vfiprintf_r+0xa4>
 8008b78:	465b      	mov	r3, fp
 8008b7a:	4622      	mov	r2, r4
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f7ff ffa2 	bl	8008ac8 <__sfputs_r>
 8008b84:	3001      	adds	r0, #1
 8008b86:	f000 80a7 	beq.w	8008cd8 <_vfiprintf_r+0x1ec>
 8008b8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b8c:	445a      	add	r2, fp
 8008b8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b90:	f89a 3000 	ldrb.w	r3, [sl]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 809f 	beq.w	8008cd8 <_vfiprintf_r+0x1ec>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ba4:	f10a 0a01 	add.w	sl, sl, #1
 8008ba8:	9304      	str	r3, [sp, #16]
 8008baa:	9307      	str	r3, [sp, #28]
 8008bac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008bb0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008bb2:	4654      	mov	r4, sl
 8008bb4:	2205      	movs	r2, #5
 8008bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bba:	4853      	ldr	r0, [pc, #332]	@ (8008d08 <_vfiprintf_r+0x21c>)
 8008bbc:	f000 fb18 	bl	80091f0 <memchr>
 8008bc0:	9a04      	ldr	r2, [sp, #16]
 8008bc2:	b9d8      	cbnz	r0, 8008bfc <_vfiprintf_r+0x110>
 8008bc4:	06d1      	lsls	r1, r2, #27
 8008bc6:	bf44      	itt	mi
 8008bc8:	2320      	movmi	r3, #32
 8008bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bce:	0713      	lsls	r3, r2, #28
 8008bd0:	bf44      	itt	mi
 8008bd2:	232b      	movmi	r3, #43	@ 0x2b
 8008bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bde:	d015      	beq.n	8008c0c <_vfiprintf_r+0x120>
 8008be0:	4654      	mov	r4, sl
 8008be2:	2000      	movs	r0, #0
 8008be4:	f04f 0c0a 	mov.w	ip, #10
 8008be8:	9a07      	ldr	r2, [sp, #28]
 8008bea:	4621      	mov	r1, r4
 8008bec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bf0:	3b30      	subs	r3, #48	@ 0x30
 8008bf2:	2b09      	cmp	r3, #9
 8008bf4:	d94b      	bls.n	8008c8e <_vfiprintf_r+0x1a2>
 8008bf6:	b1b0      	cbz	r0, 8008c26 <_vfiprintf_r+0x13a>
 8008bf8:	9207      	str	r2, [sp, #28]
 8008bfa:	e014      	b.n	8008c26 <_vfiprintf_r+0x13a>
 8008bfc:	eba0 0308 	sub.w	r3, r0, r8
 8008c00:	fa09 f303 	lsl.w	r3, r9, r3
 8008c04:	4313      	orrs	r3, r2
 8008c06:	46a2      	mov	sl, r4
 8008c08:	9304      	str	r3, [sp, #16]
 8008c0a:	e7d2      	b.n	8008bb2 <_vfiprintf_r+0xc6>
 8008c0c:	9b03      	ldr	r3, [sp, #12]
 8008c0e:	1d19      	adds	r1, r3, #4
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	9103      	str	r1, [sp, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	bfbb      	ittet	lt
 8008c18:	425b      	neglt	r3, r3
 8008c1a:	f042 0202 	orrlt.w	r2, r2, #2
 8008c1e:	9307      	strge	r3, [sp, #28]
 8008c20:	9307      	strlt	r3, [sp, #28]
 8008c22:	bfb8      	it	lt
 8008c24:	9204      	strlt	r2, [sp, #16]
 8008c26:	7823      	ldrb	r3, [r4, #0]
 8008c28:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c2a:	d10a      	bne.n	8008c42 <_vfiprintf_r+0x156>
 8008c2c:	7863      	ldrb	r3, [r4, #1]
 8008c2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c30:	d132      	bne.n	8008c98 <_vfiprintf_r+0x1ac>
 8008c32:	9b03      	ldr	r3, [sp, #12]
 8008c34:	3402      	adds	r4, #2
 8008c36:	1d1a      	adds	r2, r3, #4
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	9203      	str	r2, [sp, #12]
 8008c3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c40:	9305      	str	r3, [sp, #20]
 8008c42:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008d0c <_vfiprintf_r+0x220>
 8008c46:	2203      	movs	r2, #3
 8008c48:	4650      	mov	r0, sl
 8008c4a:	7821      	ldrb	r1, [r4, #0]
 8008c4c:	f000 fad0 	bl	80091f0 <memchr>
 8008c50:	b138      	cbz	r0, 8008c62 <_vfiprintf_r+0x176>
 8008c52:	2240      	movs	r2, #64	@ 0x40
 8008c54:	9b04      	ldr	r3, [sp, #16]
 8008c56:	eba0 000a 	sub.w	r0, r0, sl
 8008c5a:	4082      	lsls	r2, r0
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	3401      	adds	r4, #1
 8008c60:	9304      	str	r3, [sp, #16]
 8008c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c66:	2206      	movs	r2, #6
 8008c68:	4829      	ldr	r0, [pc, #164]	@ (8008d10 <_vfiprintf_r+0x224>)
 8008c6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c6e:	f000 fabf 	bl	80091f0 <memchr>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	d03f      	beq.n	8008cf6 <_vfiprintf_r+0x20a>
 8008c76:	4b27      	ldr	r3, [pc, #156]	@ (8008d14 <_vfiprintf_r+0x228>)
 8008c78:	bb1b      	cbnz	r3, 8008cc2 <_vfiprintf_r+0x1d6>
 8008c7a:	9b03      	ldr	r3, [sp, #12]
 8008c7c:	3307      	adds	r3, #7
 8008c7e:	f023 0307 	bic.w	r3, r3, #7
 8008c82:	3308      	adds	r3, #8
 8008c84:	9303      	str	r3, [sp, #12]
 8008c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c88:	443b      	add	r3, r7
 8008c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c8c:	e76a      	b.n	8008b64 <_vfiprintf_r+0x78>
 8008c8e:	460c      	mov	r4, r1
 8008c90:	2001      	movs	r0, #1
 8008c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c96:	e7a8      	b.n	8008bea <_vfiprintf_r+0xfe>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f04f 0c0a 	mov.w	ip, #10
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	3401      	adds	r4, #1
 8008ca2:	9305      	str	r3, [sp, #20]
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008caa:	3a30      	subs	r2, #48	@ 0x30
 8008cac:	2a09      	cmp	r2, #9
 8008cae:	d903      	bls.n	8008cb8 <_vfiprintf_r+0x1cc>
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d0c6      	beq.n	8008c42 <_vfiprintf_r+0x156>
 8008cb4:	9105      	str	r1, [sp, #20]
 8008cb6:	e7c4      	b.n	8008c42 <_vfiprintf_r+0x156>
 8008cb8:	4604      	mov	r4, r0
 8008cba:	2301      	movs	r3, #1
 8008cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cc0:	e7f0      	b.n	8008ca4 <_vfiprintf_r+0x1b8>
 8008cc2:	ab03      	add	r3, sp, #12
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	462a      	mov	r2, r5
 8008cc8:	4630      	mov	r0, r6
 8008cca:	4b13      	ldr	r3, [pc, #76]	@ (8008d18 <_vfiprintf_r+0x22c>)
 8008ccc:	a904      	add	r1, sp, #16
 8008cce:	f3af 8000 	nop.w
 8008cd2:	4607      	mov	r7, r0
 8008cd4:	1c78      	adds	r0, r7, #1
 8008cd6:	d1d6      	bne.n	8008c86 <_vfiprintf_r+0x19a>
 8008cd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cda:	07d9      	lsls	r1, r3, #31
 8008cdc:	d405      	bmi.n	8008cea <_vfiprintf_r+0x1fe>
 8008cde:	89ab      	ldrh	r3, [r5, #12]
 8008ce0:	059a      	lsls	r2, r3, #22
 8008ce2:	d402      	bmi.n	8008cea <_vfiprintf_r+0x1fe>
 8008ce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ce6:	f7fe fcbf 	bl	8007668 <__retarget_lock_release_recursive>
 8008cea:	89ab      	ldrh	r3, [r5, #12]
 8008cec:	065b      	lsls	r3, r3, #25
 8008cee:	f53f af1f 	bmi.w	8008b30 <_vfiprintf_r+0x44>
 8008cf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008cf4:	e71e      	b.n	8008b34 <_vfiprintf_r+0x48>
 8008cf6:	ab03      	add	r3, sp, #12
 8008cf8:	9300      	str	r3, [sp, #0]
 8008cfa:	462a      	mov	r2, r5
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	4b06      	ldr	r3, [pc, #24]	@ (8008d18 <_vfiprintf_r+0x22c>)
 8008d00:	a904      	add	r1, sp, #16
 8008d02:	f000 f87d 	bl	8008e00 <_printf_i>
 8008d06:	e7e4      	b.n	8008cd2 <_vfiprintf_r+0x1e6>
 8008d08:	08009715 	.word	0x08009715
 8008d0c:	0800971b 	.word	0x0800971b
 8008d10:	0800971f 	.word	0x0800971f
 8008d14:	00000000 	.word	0x00000000
 8008d18:	08008ac9 	.word	0x08008ac9

08008d1c <_printf_common>:
 8008d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d20:	4616      	mov	r6, r2
 8008d22:	4698      	mov	r8, r3
 8008d24:	688a      	ldr	r2, [r1, #8]
 8008d26:	690b      	ldr	r3, [r1, #16]
 8008d28:	4607      	mov	r7, r0
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	bfb8      	it	lt
 8008d2e:	4613      	movlt	r3, r2
 8008d30:	6033      	str	r3, [r6, #0]
 8008d32:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d36:	460c      	mov	r4, r1
 8008d38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d3c:	b10a      	cbz	r2, 8008d42 <_printf_common+0x26>
 8008d3e:	3301      	adds	r3, #1
 8008d40:	6033      	str	r3, [r6, #0]
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	0699      	lsls	r1, r3, #26
 8008d46:	bf42      	ittt	mi
 8008d48:	6833      	ldrmi	r3, [r6, #0]
 8008d4a:	3302      	addmi	r3, #2
 8008d4c:	6033      	strmi	r3, [r6, #0]
 8008d4e:	6825      	ldr	r5, [r4, #0]
 8008d50:	f015 0506 	ands.w	r5, r5, #6
 8008d54:	d106      	bne.n	8008d64 <_printf_common+0x48>
 8008d56:	f104 0a19 	add.w	sl, r4, #25
 8008d5a:	68e3      	ldr	r3, [r4, #12]
 8008d5c:	6832      	ldr	r2, [r6, #0]
 8008d5e:	1a9b      	subs	r3, r3, r2
 8008d60:	42ab      	cmp	r3, r5
 8008d62:	dc2b      	bgt.n	8008dbc <_printf_common+0xa0>
 8008d64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d68:	6822      	ldr	r2, [r4, #0]
 8008d6a:	3b00      	subs	r3, #0
 8008d6c:	bf18      	it	ne
 8008d6e:	2301      	movne	r3, #1
 8008d70:	0692      	lsls	r2, r2, #26
 8008d72:	d430      	bmi.n	8008dd6 <_printf_common+0xba>
 8008d74:	4641      	mov	r1, r8
 8008d76:	4638      	mov	r0, r7
 8008d78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d7c:	47c8      	blx	r9
 8008d7e:	3001      	adds	r0, #1
 8008d80:	d023      	beq.n	8008dca <_printf_common+0xae>
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	6922      	ldr	r2, [r4, #16]
 8008d86:	f003 0306 	and.w	r3, r3, #6
 8008d8a:	2b04      	cmp	r3, #4
 8008d8c:	bf14      	ite	ne
 8008d8e:	2500      	movne	r5, #0
 8008d90:	6833      	ldreq	r3, [r6, #0]
 8008d92:	f04f 0600 	mov.w	r6, #0
 8008d96:	bf08      	it	eq
 8008d98:	68e5      	ldreq	r5, [r4, #12]
 8008d9a:	f104 041a 	add.w	r4, r4, #26
 8008d9e:	bf08      	it	eq
 8008da0:	1aed      	subeq	r5, r5, r3
 8008da2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008da6:	bf08      	it	eq
 8008da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dac:	4293      	cmp	r3, r2
 8008dae:	bfc4      	itt	gt
 8008db0:	1a9b      	subgt	r3, r3, r2
 8008db2:	18ed      	addgt	r5, r5, r3
 8008db4:	42b5      	cmp	r5, r6
 8008db6:	d11a      	bne.n	8008dee <_printf_common+0xd2>
 8008db8:	2000      	movs	r0, #0
 8008dba:	e008      	b.n	8008dce <_printf_common+0xb2>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	4652      	mov	r2, sl
 8008dc0:	4641      	mov	r1, r8
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	47c8      	blx	r9
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	d103      	bne.n	8008dd2 <_printf_common+0xb6>
 8008dca:	f04f 30ff 	mov.w	r0, #4294967295
 8008dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dd2:	3501      	adds	r5, #1
 8008dd4:	e7c1      	b.n	8008d5a <_printf_common+0x3e>
 8008dd6:	2030      	movs	r0, #48	@ 0x30
 8008dd8:	18e1      	adds	r1, r4, r3
 8008dda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008de4:	4422      	add	r2, r4
 8008de6:	3302      	adds	r3, #2
 8008de8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008dec:	e7c2      	b.n	8008d74 <_printf_common+0x58>
 8008dee:	2301      	movs	r3, #1
 8008df0:	4622      	mov	r2, r4
 8008df2:	4641      	mov	r1, r8
 8008df4:	4638      	mov	r0, r7
 8008df6:	47c8      	blx	r9
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d0e6      	beq.n	8008dca <_printf_common+0xae>
 8008dfc:	3601      	adds	r6, #1
 8008dfe:	e7d9      	b.n	8008db4 <_printf_common+0x98>

08008e00 <_printf_i>:
 8008e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e04:	7e0f      	ldrb	r7, [r1, #24]
 8008e06:	4691      	mov	r9, r2
 8008e08:	2f78      	cmp	r7, #120	@ 0x78
 8008e0a:	4680      	mov	r8, r0
 8008e0c:	460c      	mov	r4, r1
 8008e0e:	469a      	mov	sl, r3
 8008e10:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e16:	d807      	bhi.n	8008e28 <_printf_i+0x28>
 8008e18:	2f62      	cmp	r7, #98	@ 0x62
 8008e1a:	d80a      	bhi.n	8008e32 <_printf_i+0x32>
 8008e1c:	2f00      	cmp	r7, #0
 8008e1e:	f000 80d3 	beq.w	8008fc8 <_printf_i+0x1c8>
 8008e22:	2f58      	cmp	r7, #88	@ 0x58
 8008e24:	f000 80ba 	beq.w	8008f9c <_printf_i+0x19c>
 8008e28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e30:	e03a      	b.n	8008ea8 <_printf_i+0xa8>
 8008e32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e36:	2b15      	cmp	r3, #21
 8008e38:	d8f6      	bhi.n	8008e28 <_printf_i+0x28>
 8008e3a:	a101      	add	r1, pc, #4	@ (adr r1, 8008e40 <_printf_i+0x40>)
 8008e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e40:	08008e99 	.word	0x08008e99
 8008e44:	08008ead 	.word	0x08008ead
 8008e48:	08008e29 	.word	0x08008e29
 8008e4c:	08008e29 	.word	0x08008e29
 8008e50:	08008e29 	.word	0x08008e29
 8008e54:	08008e29 	.word	0x08008e29
 8008e58:	08008ead 	.word	0x08008ead
 8008e5c:	08008e29 	.word	0x08008e29
 8008e60:	08008e29 	.word	0x08008e29
 8008e64:	08008e29 	.word	0x08008e29
 8008e68:	08008e29 	.word	0x08008e29
 8008e6c:	08008faf 	.word	0x08008faf
 8008e70:	08008ed7 	.word	0x08008ed7
 8008e74:	08008f69 	.word	0x08008f69
 8008e78:	08008e29 	.word	0x08008e29
 8008e7c:	08008e29 	.word	0x08008e29
 8008e80:	08008fd1 	.word	0x08008fd1
 8008e84:	08008e29 	.word	0x08008e29
 8008e88:	08008ed7 	.word	0x08008ed7
 8008e8c:	08008e29 	.word	0x08008e29
 8008e90:	08008e29 	.word	0x08008e29
 8008e94:	08008f71 	.word	0x08008f71
 8008e98:	6833      	ldr	r3, [r6, #0]
 8008e9a:	1d1a      	adds	r2, r3, #4
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6032      	str	r2, [r6, #0]
 8008ea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ea4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e09e      	b.n	8008fea <_printf_i+0x1ea>
 8008eac:	6833      	ldr	r3, [r6, #0]
 8008eae:	6820      	ldr	r0, [r4, #0]
 8008eb0:	1d19      	adds	r1, r3, #4
 8008eb2:	6031      	str	r1, [r6, #0]
 8008eb4:	0606      	lsls	r6, r0, #24
 8008eb6:	d501      	bpl.n	8008ebc <_printf_i+0xbc>
 8008eb8:	681d      	ldr	r5, [r3, #0]
 8008eba:	e003      	b.n	8008ec4 <_printf_i+0xc4>
 8008ebc:	0645      	lsls	r5, r0, #25
 8008ebe:	d5fb      	bpl.n	8008eb8 <_printf_i+0xb8>
 8008ec0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ec4:	2d00      	cmp	r5, #0
 8008ec6:	da03      	bge.n	8008ed0 <_printf_i+0xd0>
 8008ec8:	232d      	movs	r3, #45	@ 0x2d
 8008eca:	426d      	negs	r5, r5
 8008ecc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ed0:	230a      	movs	r3, #10
 8008ed2:	4859      	ldr	r0, [pc, #356]	@ (8009038 <_printf_i+0x238>)
 8008ed4:	e011      	b.n	8008efa <_printf_i+0xfa>
 8008ed6:	6821      	ldr	r1, [r4, #0]
 8008ed8:	6833      	ldr	r3, [r6, #0]
 8008eda:	0608      	lsls	r0, r1, #24
 8008edc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ee0:	d402      	bmi.n	8008ee8 <_printf_i+0xe8>
 8008ee2:	0649      	lsls	r1, r1, #25
 8008ee4:	bf48      	it	mi
 8008ee6:	b2ad      	uxthmi	r5, r5
 8008ee8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008eea:	6033      	str	r3, [r6, #0]
 8008eec:	bf14      	ite	ne
 8008eee:	230a      	movne	r3, #10
 8008ef0:	2308      	moveq	r3, #8
 8008ef2:	4851      	ldr	r0, [pc, #324]	@ (8009038 <_printf_i+0x238>)
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008efa:	6866      	ldr	r6, [r4, #4]
 8008efc:	2e00      	cmp	r6, #0
 8008efe:	bfa8      	it	ge
 8008f00:	6821      	ldrge	r1, [r4, #0]
 8008f02:	60a6      	str	r6, [r4, #8]
 8008f04:	bfa4      	itt	ge
 8008f06:	f021 0104 	bicge.w	r1, r1, #4
 8008f0a:	6021      	strge	r1, [r4, #0]
 8008f0c:	b90d      	cbnz	r5, 8008f12 <_printf_i+0x112>
 8008f0e:	2e00      	cmp	r6, #0
 8008f10:	d04b      	beq.n	8008faa <_printf_i+0x1aa>
 8008f12:	4616      	mov	r6, r2
 8008f14:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f18:	fb03 5711 	mls	r7, r3, r1, r5
 8008f1c:	5dc7      	ldrb	r7, [r0, r7]
 8008f1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f22:	462f      	mov	r7, r5
 8008f24:	42bb      	cmp	r3, r7
 8008f26:	460d      	mov	r5, r1
 8008f28:	d9f4      	bls.n	8008f14 <_printf_i+0x114>
 8008f2a:	2b08      	cmp	r3, #8
 8008f2c:	d10b      	bne.n	8008f46 <_printf_i+0x146>
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	07df      	lsls	r7, r3, #31
 8008f32:	d508      	bpl.n	8008f46 <_printf_i+0x146>
 8008f34:	6923      	ldr	r3, [r4, #16]
 8008f36:	6861      	ldr	r1, [r4, #4]
 8008f38:	4299      	cmp	r1, r3
 8008f3a:	bfde      	ittt	le
 8008f3c:	2330      	movle	r3, #48	@ 0x30
 8008f3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f42:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f46:	1b92      	subs	r2, r2, r6
 8008f48:	6122      	str	r2, [r4, #16]
 8008f4a:	464b      	mov	r3, r9
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	4640      	mov	r0, r8
 8008f50:	f8cd a000 	str.w	sl, [sp]
 8008f54:	aa03      	add	r2, sp, #12
 8008f56:	f7ff fee1 	bl	8008d1c <_printf_common>
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	d14a      	bne.n	8008ff4 <_printf_i+0x1f4>
 8008f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f62:	b004      	add	sp, #16
 8008f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f68:	6823      	ldr	r3, [r4, #0]
 8008f6a:	f043 0320 	orr.w	r3, r3, #32
 8008f6e:	6023      	str	r3, [r4, #0]
 8008f70:	2778      	movs	r7, #120	@ 0x78
 8008f72:	4832      	ldr	r0, [pc, #200]	@ (800903c <_printf_i+0x23c>)
 8008f74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f78:	6823      	ldr	r3, [r4, #0]
 8008f7a:	6831      	ldr	r1, [r6, #0]
 8008f7c:	061f      	lsls	r7, r3, #24
 8008f7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f82:	d402      	bmi.n	8008f8a <_printf_i+0x18a>
 8008f84:	065f      	lsls	r7, r3, #25
 8008f86:	bf48      	it	mi
 8008f88:	b2ad      	uxthmi	r5, r5
 8008f8a:	6031      	str	r1, [r6, #0]
 8008f8c:	07d9      	lsls	r1, r3, #31
 8008f8e:	bf44      	itt	mi
 8008f90:	f043 0320 	orrmi.w	r3, r3, #32
 8008f94:	6023      	strmi	r3, [r4, #0]
 8008f96:	b11d      	cbz	r5, 8008fa0 <_printf_i+0x1a0>
 8008f98:	2310      	movs	r3, #16
 8008f9a:	e7ab      	b.n	8008ef4 <_printf_i+0xf4>
 8008f9c:	4826      	ldr	r0, [pc, #152]	@ (8009038 <_printf_i+0x238>)
 8008f9e:	e7e9      	b.n	8008f74 <_printf_i+0x174>
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	f023 0320 	bic.w	r3, r3, #32
 8008fa6:	6023      	str	r3, [r4, #0]
 8008fa8:	e7f6      	b.n	8008f98 <_printf_i+0x198>
 8008faa:	4616      	mov	r6, r2
 8008fac:	e7bd      	b.n	8008f2a <_printf_i+0x12a>
 8008fae:	6833      	ldr	r3, [r6, #0]
 8008fb0:	6825      	ldr	r5, [r4, #0]
 8008fb2:	1d18      	adds	r0, r3, #4
 8008fb4:	6961      	ldr	r1, [r4, #20]
 8008fb6:	6030      	str	r0, [r6, #0]
 8008fb8:	062e      	lsls	r6, r5, #24
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	d501      	bpl.n	8008fc2 <_printf_i+0x1c2>
 8008fbe:	6019      	str	r1, [r3, #0]
 8008fc0:	e002      	b.n	8008fc8 <_printf_i+0x1c8>
 8008fc2:	0668      	lsls	r0, r5, #25
 8008fc4:	d5fb      	bpl.n	8008fbe <_printf_i+0x1be>
 8008fc6:	8019      	strh	r1, [r3, #0]
 8008fc8:	2300      	movs	r3, #0
 8008fca:	4616      	mov	r6, r2
 8008fcc:	6123      	str	r3, [r4, #16]
 8008fce:	e7bc      	b.n	8008f4a <_printf_i+0x14a>
 8008fd0:	6833      	ldr	r3, [r6, #0]
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	1d1a      	adds	r2, r3, #4
 8008fd6:	6032      	str	r2, [r6, #0]
 8008fd8:	681e      	ldr	r6, [r3, #0]
 8008fda:	6862      	ldr	r2, [r4, #4]
 8008fdc:	4630      	mov	r0, r6
 8008fde:	f000 f907 	bl	80091f0 <memchr>
 8008fe2:	b108      	cbz	r0, 8008fe8 <_printf_i+0x1e8>
 8008fe4:	1b80      	subs	r0, r0, r6
 8008fe6:	6060      	str	r0, [r4, #4]
 8008fe8:	6863      	ldr	r3, [r4, #4]
 8008fea:	6123      	str	r3, [r4, #16]
 8008fec:	2300      	movs	r3, #0
 8008fee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ff2:	e7aa      	b.n	8008f4a <_printf_i+0x14a>
 8008ff4:	4632      	mov	r2, r6
 8008ff6:	4649      	mov	r1, r9
 8008ff8:	4640      	mov	r0, r8
 8008ffa:	6923      	ldr	r3, [r4, #16]
 8008ffc:	47d0      	blx	sl
 8008ffe:	3001      	adds	r0, #1
 8009000:	d0ad      	beq.n	8008f5e <_printf_i+0x15e>
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	079b      	lsls	r3, r3, #30
 8009006:	d413      	bmi.n	8009030 <_printf_i+0x230>
 8009008:	68e0      	ldr	r0, [r4, #12]
 800900a:	9b03      	ldr	r3, [sp, #12]
 800900c:	4298      	cmp	r0, r3
 800900e:	bfb8      	it	lt
 8009010:	4618      	movlt	r0, r3
 8009012:	e7a6      	b.n	8008f62 <_printf_i+0x162>
 8009014:	2301      	movs	r3, #1
 8009016:	4632      	mov	r2, r6
 8009018:	4649      	mov	r1, r9
 800901a:	4640      	mov	r0, r8
 800901c:	47d0      	blx	sl
 800901e:	3001      	adds	r0, #1
 8009020:	d09d      	beq.n	8008f5e <_printf_i+0x15e>
 8009022:	3501      	adds	r5, #1
 8009024:	68e3      	ldr	r3, [r4, #12]
 8009026:	9903      	ldr	r1, [sp, #12]
 8009028:	1a5b      	subs	r3, r3, r1
 800902a:	42ab      	cmp	r3, r5
 800902c:	dcf2      	bgt.n	8009014 <_printf_i+0x214>
 800902e:	e7eb      	b.n	8009008 <_printf_i+0x208>
 8009030:	2500      	movs	r5, #0
 8009032:	f104 0619 	add.w	r6, r4, #25
 8009036:	e7f5      	b.n	8009024 <_printf_i+0x224>
 8009038:	08009726 	.word	0x08009726
 800903c:	08009737 	.word	0x08009737

08009040 <__swbuf_r>:
 8009040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009042:	460e      	mov	r6, r1
 8009044:	4614      	mov	r4, r2
 8009046:	4605      	mov	r5, r0
 8009048:	b118      	cbz	r0, 8009052 <__swbuf_r+0x12>
 800904a:	6a03      	ldr	r3, [r0, #32]
 800904c:	b90b      	cbnz	r3, 8009052 <__swbuf_r+0x12>
 800904e:	f7fe fa05 	bl	800745c <__sinit>
 8009052:	69a3      	ldr	r3, [r4, #24]
 8009054:	60a3      	str	r3, [r4, #8]
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	071a      	lsls	r2, r3, #28
 800905a:	d501      	bpl.n	8009060 <__swbuf_r+0x20>
 800905c:	6923      	ldr	r3, [r4, #16]
 800905e:	b943      	cbnz	r3, 8009072 <__swbuf_r+0x32>
 8009060:	4621      	mov	r1, r4
 8009062:	4628      	mov	r0, r5
 8009064:	f000 f82a 	bl	80090bc <__swsetup_r>
 8009068:	b118      	cbz	r0, 8009072 <__swbuf_r+0x32>
 800906a:	f04f 37ff 	mov.w	r7, #4294967295
 800906e:	4638      	mov	r0, r7
 8009070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	6922      	ldr	r2, [r4, #16]
 8009076:	b2f6      	uxtb	r6, r6
 8009078:	1a98      	subs	r0, r3, r2
 800907a:	6963      	ldr	r3, [r4, #20]
 800907c:	4637      	mov	r7, r6
 800907e:	4283      	cmp	r3, r0
 8009080:	dc05      	bgt.n	800908e <__swbuf_r+0x4e>
 8009082:	4621      	mov	r1, r4
 8009084:	4628      	mov	r0, r5
 8009086:	f7ff fc7f 	bl	8008988 <_fflush_r>
 800908a:	2800      	cmp	r0, #0
 800908c:	d1ed      	bne.n	800906a <__swbuf_r+0x2a>
 800908e:	68a3      	ldr	r3, [r4, #8]
 8009090:	3b01      	subs	r3, #1
 8009092:	60a3      	str	r3, [r4, #8]
 8009094:	6823      	ldr	r3, [r4, #0]
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	6022      	str	r2, [r4, #0]
 800909a:	701e      	strb	r6, [r3, #0]
 800909c:	6962      	ldr	r2, [r4, #20]
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d004      	beq.n	80090ae <__swbuf_r+0x6e>
 80090a4:	89a3      	ldrh	r3, [r4, #12]
 80090a6:	07db      	lsls	r3, r3, #31
 80090a8:	d5e1      	bpl.n	800906e <__swbuf_r+0x2e>
 80090aa:	2e0a      	cmp	r6, #10
 80090ac:	d1df      	bne.n	800906e <__swbuf_r+0x2e>
 80090ae:	4621      	mov	r1, r4
 80090b0:	4628      	mov	r0, r5
 80090b2:	f7ff fc69 	bl	8008988 <_fflush_r>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	d0d9      	beq.n	800906e <__swbuf_r+0x2e>
 80090ba:	e7d6      	b.n	800906a <__swbuf_r+0x2a>

080090bc <__swsetup_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4b29      	ldr	r3, [pc, #164]	@ (8009164 <__swsetup_r+0xa8>)
 80090c0:	4605      	mov	r5, r0
 80090c2:	6818      	ldr	r0, [r3, #0]
 80090c4:	460c      	mov	r4, r1
 80090c6:	b118      	cbz	r0, 80090d0 <__swsetup_r+0x14>
 80090c8:	6a03      	ldr	r3, [r0, #32]
 80090ca:	b90b      	cbnz	r3, 80090d0 <__swsetup_r+0x14>
 80090cc:	f7fe f9c6 	bl	800745c <__sinit>
 80090d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090d4:	0719      	lsls	r1, r3, #28
 80090d6:	d422      	bmi.n	800911e <__swsetup_r+0x62>
 80090d8:	06da      	lsls	r2, r3, #27
 80090da:	d407      	bmi.n	80090ec <__swsetup_r+0x30>
 80090dc:	2209      	movs	r2, #9
 80090de:	602a      	str	r2, [r5, #0]
 80090e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295
 80090e8:	81a3      	strh	r3, [r4, #12]
 80090ea:	e033      	b.n	8009154 <__swsetup_r+0x98>
 80090ec:	0758      	lsls	r0, r3, #29
 80090ee:	d512      	bpl.n	8009116 <__swsetup_r+0x5a>
 80090f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090f2:	b141      	cbz	r1, 8009106 <__swsetup_r+0x4a>
 80090f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090f8:	4299      	cmp	r1, r3
 80090fa:	d002      	beq.n	8009102 <__swsetup_r+0x46>
 80090fc:	4628      	mov	r0, r5
 80090fe:	f7fe facd 	bl	800769c <_free_r>
 8009102:	2300      	movs	r3, #0
 8009104:	6363      	str	r3, [r4, #52]	@ 0x34
 8009106:	89a3      	ldrh	r3, [r4, #12]
 8009108:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800910c:	81a3      	strh	r3, [r4, #12]
 800910e:	2300      	movs	r3, #0
 8009110:	6063      	str	r3, [r4, #4]
 8009112:	6923      	ldr	r3, [r4, #16]
 8009114:	6023      	str	r3, [r4, #0]
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	f043 0308 	orr.w	r3, r3, #8
 800911c:	81a3      	strh	r3, [r4, #12]
 800911e:	6923      	ldr	r3, [r4, #16]
 8009120:	b94b      	cbnz	r3, 8009136 <__swsetup_r+0x7a>
 8009122:	89a3      	ldrh	r3, [r4, #12]
 8009124:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800912c:	d003      	beq.n	8009136 <__swsetup_r+0x7a>
 800912e:	4621      	mov	r1, r4
 8009130:	4628      	mov	r0, r5
 8009132:	f000 f890 	bl	8009256 <__smakebuf_r>
 8009136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800913a:	f013 0201 	ands.w	r2, r3, #1
 800913e:	d00a      	beq.n	8009156 <__swsetup_r+0x9a>
 8009140:	2200      	movs	r2, #0
 8009142:	60a2      	str	r2, [r4, #8]
 8009144:	6962      	ldr	r2, [r4, #20]
 8009146:	4252      	negs	r2, r2
 8009148:	61a2      	str	r2, [r4, #24]
 800914a:	6922      	ldr	r2, [r4, #16]
 800914c:	b942      	cbnz	r2, 8009160 <__swsetup_r+0xa4>
 800914e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009152:	d1c5      	bne.n	80090e0 <__swsetup_r+0x24>
 8009154:	bd38      	pop	{r3, r4, r5, pc}
 8009156:	0799      	lsls	r1, r3, #30
 8009158:	bf58      	it	pl
 800915a:	6962      	ldrpl	r2, [r4, #20]
 800915c:	60a2      	str	r2, [r4, #8]
 800915e:	e7f4      	b.n	800914a <__swsetup_r+0x8e>
 8009160:	2000      	movs	r0, #0
 8009162:	e7f7      	b.n	8009154 <__swsetup_r+0x98>
 8009164:	20000184 	.word	0x20000184

08009168 <_raise_r>:
 8009168:	291f      	cmp	r1, #31
 800916a:	b538      	push	{r3, r4, r5, lr}
 800916c:	4605      	mov	r5, r0
 800916e:	460c      	mov	r4, r1
 8009170:	d904      	bls.n	800917c <_raise_r+0x14>
 8009172:	2316      	movs	r3, #22
 8009174:	6003      	str	r3, [r0, #0]
 8009176:	f04f 30ff 	mov.w	r0, #4294967295
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800917e:	b112      	cbz	r2, 8009186 <_raise_r+0x1e>
 8009180:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009184:	b94b      	cbnz	r3, 800919a <_raise_r+0x32>
 8009186:	4628      	mov	r0, r5
 8009188:	f000 f830 	bl	80091ec <_getpid_r>
 800918c:	4622      	mov	r2, r4
 800918e:	4601      	mov	r1, r0
 8009190:	4628      	mov	r0, r5
 8009192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009196:	f000 b817 	b.w	80091c8 <_kill_r>
 800919a:	2b01      	cmp	r3, #1
 800919c:	d00a      	beq.n	80091b4 <_raise_r+0x4c>
 800919e:	1c59      	adds	r1, r3, #1
 80091a0:	d103      	bne.n	80091aa <_raise_r+0x42>
 80091a2:	2316      	movs	r3, #22
 80091a4:	6003      	str	r3, [r0, #0]
 80091a6:	2001      	movs	r0, #1
 80091a8:	e7e7      	b.n	800917a <_raise_r+0x12>
 80091aa:	2100      	movs	r1, #0
 80091ac:	4620      	mov	r0, r4
 80091ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80091b2:	4798      	blx	r3
 80091b4:	2000      	movs	r0, #0
 80091b6:	e7e0      	b.n	800917a <_raise_r+0x12>

080091b8 <raise>:
 80091b8:	4b02      	ldr	r3, [pc, #8]	@ (80091c4 <raise+0xc>)
 80091ba:	4601      	mov	r1, r0
 80091bc:	6818      	ldr	r0, [r3, #0]
 80091be:	f7ff bfd3 	b.w	8009168 <_raise_r>
 80091c2:	bf00      	nop
 80091c4:	20000184 	.word	0x20000184

080091c8 <_kill_r>:
 80091c8:	b538      	push	{r3, r4, r5, lr}
 80091ca:	2300      	movs	r3, #0
 80091cc:	4d06      	ldr	r5, [pc, #24]	@ (80091e8 <_kill_r+0x20>)
 80091ce:	4604      	mov	r4, r0
 80091d0:	4608      	mov	r0, r1
 80091d2:	4611      	mov	r1, r2
 80091d4:	602b      	str	r3, [r5, #0]
 80091d6:	f7f9 f866 	bl	80022a6 <_kill>
 80091da:	1c43      	adds	r3, r0, #1
 80091dc:	d102      	bne.n	80091e4 <_kill_r+0x1c>
 80091de:	682b      	ldr	r3, [r5, #0]
 80091e0:	b103      	cbz	r3, 80091e4 <_kill_r+0x1c>
 80091e2:	6023      	str	r3, [r4, #0]
 80091e4:	bd38      	pop	{r3, r4, r5, pc}
 80091e6:	bf00      	nop
 80091e8:	2000051c 	.word	0x2000051c

080091ec <_getpid_r>:
 80091ec:	f7f9 b854 	b.w	8002298 <_getpid>

080091f0 <memchr>:
 80091f0:	4603      	mov	r3, r0
 80091f2:	b510      	push	{r4, lr}
 80091f4:	b2c9      	uxtb	r1, r1
 80091f6:	4402      	add	r2, r0
 80091f8:	4293      	cmp	r3, r2
 80091fa:	4618      	mov	r0, r3
 80091fc:	d101      	bne.n	8009202 <memchr+0x12>
 80091fe:	2000      	movs	r0, #0
 8009200:	e003      	b.n	800920a <memchr+0x1a>
 8009202:	7804      	ldrb	r4, [r0, #0]
 8009204:	3301      	adds	r3, #1
 8009206:	428c      	cmp	r4, r1
 8009208:	d1f6      	bne.n	80091f8 <memchr+0x8>
 800920a:	bd10      	pop	{r4, pc}

0800920c <__swhatbuf_r>:
 800920c:	b570      	push	{r4, r5, r6, lr}
 800920e:	460c      	mov	r4, r1
 8009210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009214:	4615      	mov	r5, r2
 8009216:	2900      	cmp	r1, #0
 8009218:	461e      	mov	r6, r3
 800921a:	b096      	sub	sp, #88	@ 0x58
 800921c:	da0c      	bge.n	8009238 <__swhatbuf_r+0x2c>
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	2100      	movs	r1, #0
 8009222:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009226:	bf14      	ite	ne
 8009228:	2340      	movne	r3, #64	@ 0x40
 800922a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800922e:	2000      	movs	r0, #0
 8009230:	6031      	str	r1, [r6, #0]
 8009232:	602b      	str	r3, [r5, #0]
 8009234:	b016      	add	sp, #88	@ 0x58
 8009236:	bd70      	pop	{r4, r5, r6, pc}
 8009238:	466a      	mov	r2, sp
 800923a:	f000 f849 	bl	80092d0 <_fstat_r>
 800923e:	2800      	cmp	r0, #0
 8009240:	dbed      	blt.n	800921e <__swhatbuf_r+0x12>
 8009242:	9901      	ldr	r1, [sp, #4]
 8009244:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009248:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800924c:	4259      	negs	r1, r3
 800924e:	4159      	adcs	r1, r3
 8009250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009254:	e7eb      	b.n	800922e <__swhatbuf_r+0x22>

08009256 <__smakebuf_r>:
 8009256:	898b      	ldrh	r3, [r1, #12]
 8009258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800925a:	079d      	lsls	r5, r3, #30
 800925c:	4606      	mov	r6, r0
 800925e:	460c      	mov	r4, r1
 8009260:	d507      	bpl.n	8009272 <__smakebuf_r+0x1c>
 8009262:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009266:	6023      	str	r3, [r4, #0]
 8009268:	6123      	str	r3, [r4, #16]
 800926a:	2301      	movs	r3, #1
 800926c:	6163      	str	r3, [r4, #20]
 800926e:	b003      	add	sp, #12
 8009270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009272:	466a      	mov	r2, sp
 8009274:	ab01      	add	r3, sp, #4
 8009276:	f7ff ffc9 	bl	800920c <__swhatbuf_r>
 800927a:	9f00      	ldr	r7, [sp, #0]
 800927c:	4605      	mov	r5, r0
 800927e:	4639      	mov	r1, r7
 8009280:	4630      	mov	r0, r6
 8009282:	f7fe fdaf 	bl	8007de4 <_malloc_r>
 8009286:	b948      	cbnz	r0, 800929c <__smakebuf_r+0x46>
 8009288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800928c:	059a      	lsls	r2, r3, #22
 800928e:	d4ee      	bmi.n	800926e <__smakebuf_r+0x18>
 8009290:	f023 0303 	bic.w	r3, r3, #3
 8009294:	f043 0302 	orr.w	r3, r3, #2
 8009298:	81a3      	strh	r3, [r4, #12]
 800929a:	e7e2      	b.n	8009262 <__smakebuf_r+0xc>
 800929c:	89a3      	ldrh	r3, [r4, #12]
 800929e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092a6:	81a3      	strh	r3, [r4, #12]
 80092a8:	9b01      	ldr	r3, [sp, #4]
 80092aa:	6020      	str	r0, [r4, #0]
 80092ac:	b15b      	cbz	r3, 80092c6 <__smakebuf_r+0x70>
 80092ae:	4630      	mov	r0, r6
 80092b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b4:	f000 f81e 	bl	80092f4 <_isatty_r>
 80092b8:	b128      	cbz	r0, 80092c6 <__smakebuf_r+0x70>
 80092ba:	89a3      	ldrh	r3, [r4, #12]
 80092bc:	f023 0303 	bic.w	r3, r3, #3
 80092c0:	f043 0301 	orr.w	r3, r3, #1
 80092c4:	81a3      	strh	r3, [r4, #12]
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	431d      	orrs	r5, r3
 80092ca:	81a5      	strh	r5, [r4, #12]
 80092cc:	e7cf      	b.n	800926e <__smakebuf_r+0x18>
	...

080092d0 <_fstat_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	2300      	movs	r3, #0
 80092d4:	4d06      	ldr	r5, [pc, #24]	@ (80092f0 <_fstat_r+0x20>)
 80092d6:	4604      	mov	r4, r0
 80092d8:	4608      	mov	r0, r1
 80092da:	4611      	mov	r1, r2
 80092dc:	602b      	str	r3, [r5, #0]
 80092de:	f7f9 f841 	bl	8002364 <_fstat>
 80092e2:	1c43      	adds	r3, r0, #1
 80092e4:	d102      	bne.n	80092ec <_fstat_r+0x1c>
 80092e6:	682b      	ldr	r3, [r5, #0]
 80092e8:	b103      	cbz	r3, 80092ec <_fstat_r+0x1c>
 80092ea:	6023      	str	r3, [r4, #0]
 80092ec:	bd38      	pop	{r3, r4, r5, pc}
 80092ee:	bf00      	nop
 80092f0:	2000051c 	.word	0x2000051c

080092f4 <_isatty_r>:
 80092f4:	b538      	push	{r3, r4, r5, lr}
 80092f6:	2300      	movs	r3, #0
 80092f8:	4d05      	ldr	r5, [pc, #20]	@ (8009310 <_isatty_r+0x1c>)
 80092fa:	4604      	mov	r4, r0
 80092fc:	4608      	mov	r0, r1
 80092fe:	602b      	str	r3, [r5, #0]
 8009300:	f7f9 f83f 	bl	8002382 <_isatty>
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	d102      	bne.n	800930e <_isatty_r+0x1a>
 8009308:	682b      	ldr	r3, [r5, #0]
 800930a:	b103      	cbz	r3, 800930e <_isatty_r+0x1a>
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	bd38      	pop	{r3, r4, r5, pc}
 8009310:	2000051c 	.word	0x2000051c

08009314 <_init>:
 8009314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009316:	bf00      	nop
 8009318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931a:	bc08      	pop	{r3}
 800931c:	469e      	mov	lr, r3
 800931e:	4770      	bx	lr

08009320 <_fini>:
 8009320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009322:	bf00      	nop
 8009324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009326:	bc08      	pop	{r3}
 8009328:	469e      	mov	lr, r3
 800932a:	4770      	bx	lr
